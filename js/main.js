!function(e){var t={};function n(i){if(t[i])return t[i].exports;var r=t[i]={i:i,l:!1,exports:{}};return e[i].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,i){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:i})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var i=Object.create(null);if(n.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(i,r,function(t){return e[t]}.bind(null,r));return i},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t){var n;n=function(){return this}();try{n=n||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var i;
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
!function(t,n){"use strict";"object"==typeof e&&"object"==typeof e.exports?e.exports=t.document?n(t,!0):function(e){if(!e.document)throw new Error("jQuery requires a window with a document");return n(e)}:n(t)}("undefined"!=typeof window?window:this,function(n,r){"use strict";var s=[],o=n.document,a=Object.getPrototypeOf,l=s.slice,d=s.concat,c=s.push,u=s.indexOf,p={},h=p.toString,f=p.hasOwnProperty,m=f.toString,g=m.call(Object),v={},y=function(e){return"function"==typeof e&&"number"!=typeof e.nodeType},b=function(e){return null!=e&&e===e.window},w={type:!0,src:!0,noModule:!0};function E(e,t,n){var i,r=(t=t||o).createElement("script");if(r.text=e,n)for(i in w)n[i]&&(r[i]=n[i]);t.head.appendChild(r).parentNode.removeChild(r)}function x(e){return null==e?e+"":"object"==typeof e||"function"==typeof e?p[h.call(e)]||"object":typeof e}var T=function(e,t){return new T.fn.init(e,t)},S=/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;function C(e){var t=!!e&&"length"in e&&e.length,n=x(e);return!y(e)&&!b(e)&&("array"===n||0===t||"number"==typeof t&&t>0&&t-1 in e)}T.fn=T.prototype={jquery:"3.3.1",constructor:T,length:0,toArray:function(){return l.call(this)},get:function(e){return null==e?l.call(this):e<0?this[e+this.length]:this[e]},pushStack:function(e){var t=T.merge(this.constructor(),e);return t.prevObject=this,t},each:function(e){return T.each(this,e)},map:function(e){return this.pushStack(T.map(this,function(t,n){return e.call(t,n,t)}))},slice:function(){return this.pushStack(l.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},eq:function(e){var t=this.length,n=+e+(e<0?t:0);return this.pushStack(n>=0&&n<t?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:c,sort:s.sort,splice:s.splice},T.extend=T.fn.extend=function(){var e,t,n,i,r,s,o=arguments[0]||{},a=1,l=arguments.length,d=!1;for("boolean"==typeof o&&(d=o,o=arguments[a]||{},a++),"object"==typeof o||y(o)||(o={}),a===l&&(o=this,a--);a<l;a++)if(null!=(e=arguments[a]))for(t in e)n=o[t],o!==(i=e[t])&&(d&&i&&(T.isPlainObject(i)||(r=Array.isArray(i)))?(r?(r=!1,s=n&&Array.isArray(n)?n:[]):s=n&&T.isPlainObject(n)?n:{},o[t]=T.extend(d,s,i)):void 0!==i&&(o[t]=i));return o},T.extend({expando:"jQuery"+("3.3.1"+Math.random()).replace(/\D/g,""),isReady:!0,error:function(e){throw new Error(e)},noop:function(){},isPlainObject:function(e){var t,n;return!(!e||"[object Object]"!==h.call(e))&&(!(t=a(e))||"function"==typeof(n=f.call(t,"constructor")&&t.constructor)&&m.call(n)===g)},isEmptyObject:function(e){var t;for(t in e)return!1;return!0},globalEval:function(e){E(e)},each:function(e,t){var n,i=0;if(C(e))for(n=e.length;i<n&&!1!==t.call(e[i],i,e[i]);i++);else for(i in e)if(!1===t.call(e[i],i,e[i]))break;return e},trim:function(e){return null==e?"":(e+"").replace(S,"")},makeArray:function(e,t){var n=t||[];return null!=e&&(C(Object(e))?T.merge(n,"string"==typeof e?[e]:e):c.call(n,e)),n},inArray:function(e,t,n){return null==t?-1:u.call(t,e,n)},merge:function(e,t){for(var n=+t.length,i=0,r=e.length;i<n;i++)e[r++]=t[i];return e.length=r,e},grep:function(e,t,n){for(var i=[],r=0,s=e.length,o=!n;r<s;r++)!t(e[r],r)!==o&&i.push(e[r]);return i},map:function(e,t,n){var i,r,s=0,o=[];if(C(e))for(i=e.length;s<i;s++)null!=(r=t(e[s],s,n))&&o.push(r);else for(s in e)null!=(r=t(e[s],s,n))&&o.push(r);return d.apply([],o)},guid:1,support:v}),"function"==typeof Symbol&&(T.fn[Symbol.iterator]=s[Symbol.iterator]),T.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),function(e,t){p["[object "+t+"]"]=t.toLowerCase()});var k=
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
function(e){var t,n,i,r,s,o,a,l,d,c,u,p,h,f,m,g,v,y,b,w="sizzle"+1*new Date,E=e.document,x=0,T=0,S=oe(),C=oe(),k=oe(),P=function(e,t){return e===t&&(u=!0),0},$={}.hasOwnProperty,A=[],_=A.pop,L=A.push,M=A.push,N=A.slice,D=function(e,t){for(var n=0,i=e.length;n<i;n++)if(e[n]===t)return n;return-1},I="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",O="[\\x20\\t\\r\\n\\f]",j="(?:\\\\.|[\\w-]|[^\0-\\xa0])+",F="\\["+O+"*("+j+")(?:"+O+"*([*^$|!~]?=)"+O+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+j+"))|)"+O+"*\\]",z=":("+j+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+F+")*)|.*)\\)|)",H=new RegExp(O+"+","g"),R=new RegExp("^"+O+"+|((?:^|[^\\\\])(?:\\\\.)*)"+O+"+$","g"),q=new RegExp("^"+O+"*,"+O+"*"),B=new RegExp("^"+O+"*([>+~]|"+O+")"+O+"*"),V=new RegExp("="+O+"*([^\\]'\"]*?)"+O+"*\\]","g"),U=new RegExp(z),W=new RegExp("^"+j+"$"),G={ID:new RegExp("^#("+j+")"),CLASS:new RegExp("^\\.("+j+")"),TAG:new RegExp("^("+j+"|[*])"),ATTR:new RegExp("^"+F),PSEUDO:new RegExp("^"+z),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+O+"*(even|odd|(([+-]|)(\\d*)n|)"+O+"*(?:([+-]|)"+O+"*(\\d+)|))"+O+"*\\)|)","i"),bool:new RegExp("^(?:"+I+")$","i"),needsContext:new RegExp("^"+O+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+O+"*((?:-\\d)?\\d*)"+O+"*\\)|)(?=[^-]|$)","i")},X=/^(?:input|select|textarea|button)$/i,Y=/^h\d$/i,K=/^[^{]+\{\s*\[native \w/,Q=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,Z=/[+~]/,J=new RegExp("\\\\([\\da-f]{1,6}"+O+"?|("+O+")|.)","ig"),ee=function(e,t,n){var i="0x"+t-65536;return i!=i||n?t:i<0?String.fromCharCode(i+65536):String.fromCharCode(i>>10|55296,1023&i|56320)},te=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,ne=function(e,t){return t?"\0"===e?"ï¿½":e.slice(0,-1)+"\\"+e.charCodeAt(e.length-1).toString(16)+" ":"\\"+e},ie=function(){p()},re=ye(function(e){return!0===e.disabled&&("form"in e||"label"in e)},{dir:"parentNode",next:"legend"});try{M.apply(A=N.call(E.childNodes),E.childNodes),A[E.childNodes.length].nodeType}catch(e){M={apply:A.length?function(e,t){L.apply(e,N.call(t))}:function(e,t){for(var n=e.length,i=0;e[n++]=t[i++];);e.length=n-1}}}function se(e,t,i,r){var s,a,d,c,u,f,v,y=t&&t.ownerDocument,x=t?t.nodeType:9;if(i=i||[],"string"!=typeof e||!e||1!==x&&9!==x&&11!==x)return i;if(!r&&((t?t.ownerDocument||t:E)!==h&&p(t),t=t||h,m)){if(11!==x&&(u=Q.exec(e)))if(s=u[1]){if(9===x){if(!(d=t.getElementById(s)))return i;if(d.id===s)return i.push(d),i}else if(y&&(d=y.getElementById(s))&&b(t,d)&&d.id===s)return i.push(d),i}else{if(u[2])return M.apply(i,t.getElementsByTagName(e)),i;if((s=u[3])&&n.getElementsByClassName&&t.getElementsByClassName)return M.apply(i,t.getElementsByClassName(s)),i}if(n.qsa&&!k[e+" "]&&(!g||!g.test(e))){if(1!==x)y=t,v=e;else if("object"!==t.nodeName.toLowerCase()){for((c=t.getAttribute("id"))?c=c.replace(te,ne):t.setAttribute("id",c=w),a=(f=o(e)).length;a--;)f[a]="#"+c+" "+ve(f[a]);v=f.join(","),y=Z.test(e)&&me(t.parentNode)||t}if(v)try{return M.apply(i,y.querySelectorAll(v)),i}catch(e){}finally{c===w&&t.removeAttribute("id")}}}return l(e.replace(R,"$1"),t,i,r)}function oe(){var e=[];return function t(n,r){return e.push(n+" ")>i.cacheLength&&delete t[e.shift()],t[n+" "]=r}}function ae(e){return e[w]=!0,e}function le(e){var t=h.createElement("fieldset");try{return!!e(t)}catch(e){return!1}finally{t.parentNode&&t.parentNode.removeChild(t),t=null}}function de(e,t){for(var n=e.split("|"),r=n.length;r--;)i.attrHandle[n[r]]=t}function ce(e,t){var n=t&&e,i=n&&1===e.nodeType&&1===t.nodeType&&e.sourceIndex-t.sourceIndex;if(i)return i;if(n)for(;n=n.nextSibling;)if(n===t)return-1;return e?1:-1}function ue(e){return function(t){return"input"===t.nodeName.toLowerCase()&&t.type===e}}function pe(e){return function(t){var n=t.nodeName.toLowerCase();return("input"===n||"button"===n)&&t.type===e}}function he(e){return function(t){return"form"in t?t.parentNode&&!1===t.disabled?"label"in t?"label"in t.parentNode?t.parentNode.disabled===e:t.disabled===e:t.isDisabled===e||t.isDisabled!==!e&&re(t)===e:t.disabled===e:"label"in t&&t.disabled===e}}function fe(e){return ae(function(t){return t=+t,ae(function(n,i){for(var r,s=e([],n.length,t),o=s.length;o--;)n[r=s[o]]&&(n[r]=!(i[r]=n[r]))})})}function me(e){return e&&void 0!==e.getElementsByTagName&&e}for(t in n=se.support={},s=se.isXML=function(e){var t=e&&(e.ownerDocument||e).documentElement;return!!t&&"HTML"!==t.nodeName},p=se.setDocument=function(e){var t,r,o=e?e.ownerDocument||e:E;return o!==h&&9===o.nodeType&&o.documentElement?(f=(h=o).documentElement,m=!s(h),E!==h&&(r=h.defaultView)&&r.top!==r&&(r.addEventListener?r.addEventListener("unload",ie,!1):r.attachEvent&&r.attachEvent("onunload",ie)),n.attributes=le(function(e){return e.className="i",!e.getAttribute("className")}),n.getElementsByTagName=le(function(e){return e.appendChild(h.createComment("")),!e.getElementsByTagName("*").length}),n.getElementsByClassName=K.test(h.getElementsByClassName),n.getById=le(function(e){return f.appendChild(e).id=w,!h.getElementsByName||!h.getElementsByName(w).length}),n.getById?(i.filter.ID=function(e){var t=e.replace(J,ee);return function(e){return e.getAttribute("id")===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n=t.getElementById(e);return n?[n]:[]}}):(i.filter.ID=function(e){var t=e.replace(J,ee);return function(e){var n=void 0!==e.getAttributeNode&&e.getAttributeNode("id");return n&&n.value===t}},i.find.ID=function(e,t){if(void 0!==t.getElementById&&m){var n,i,r,s=t.getElementById(e);if(s){if((n=s.getAttributeNode("id"))&&n.value===e)return[s];for(r=t.getElementsByName(e),i=0;s=r[i++];)if((n=s.getAttributeNode("id"))&&n.value===e)return[s]}return[]}}),i.find.TAG=n.getElementsByTagName?function(e,t){return void 0!==t.getElementsByTagName?t.getElementsByTagName(e):n.qsa?t.querySelectorAll(e):void 0}:function(e,t){var n,i=[],r=0,s=t.getElementsByTagName(e);if("*"===e){for(;n=s[r++];)1===n.nodeType&&i.push(n);return i}return s},i.find.CLASS=n.getElementsByClassName&&function(e,t){if(void 0!==t.getElementsByClassName&&m)return t.getElementsByClassName(e)},v=[],g=[],(n.qsa=K.test(h.querySelectorAll))&&(le(function(e){f.appendChild(e).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",e.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+O+"*(?:''|\"\")"),e.querySelectorAll("[selected]").length||g.push("\\["+O+"*(?:value|"+I+")"),e.querySelectorAll("[id~="+w+"-]").length||g.push("~="),e.querySelectorAll(":checked").length||g.push(":checked"),e.querySelectorAll("a#"+w+"+*").length||g.push(".#.+[+~]")}),le(function(e){e.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var t=h.createElement("input");t.setAttribute("type","hidden"),e.appendChild(t).setAttribute("name","D"),e.querySelectorAll("[name=d]").length&&g.push("name"+O+"*[*^$|!~]?="),2!==e.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),f.appendChild(e).disabled=!0,2!==e.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),e.querySelectorAll("*,:x"),g.push(",.*:")})),(n.matchesSelector=K.test(y=f.matches||f.webkitMatchesSelector||f.mozMatchesSelector||f.oMatchesSelector||f.msMatchesSelector))&&le(function(e){n.disconnectedMatch=y.call(e,"*"),y.call(e,"[s!='']:x"),v.push("!=",z)}),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),t=K.test(f.compareDocumentPosition),b=t||K.test(f.contains)?function(e,t){var n=9===e.nodeType?e.documentElement:e,i=t&&t.parentNode;return e===i||!(!i||1!==i.nodeType||!(n.contains?n.contains(i):e.compareDocumentPosition&&16&e.compareDocumentPosition(i)))}:function(e,t){if(t)for(;t=t.parentNode;)if(t===e)return!0;return!1},P=t?function(e,t){if(e===t)return u=!0,0;var i=!e.compareDocumentPosition-!t.compareDocumentPosition;return i||(1&(i=(e.ownerDocument||e)===(t.ownerDocument||t)?e.compareDocumentPosition(t):1)||!n.sortDetached&&t.compareDocumentPosition(e)===i?e===h||e.ownerDocument===E&&b(E,e)?-1:t===h||t.ownerDocument===E&&b(E,t)?1:c?D(c,e)-D(c,t):0:4&i?-1:1)}:function(e,t){if(e===t)return u=!0,0;var n,i=0,r=e.parentNode,s=t.parentNode,o=[e],a=[t];if(!r||!s)return e===h?-1:t===h?1:r?-1:s?1:c?D(c,e)-D(c,t):0;if(r===s)return ce(e,t);for(n=e;n=n.parentNode;)o.unshift(n);for(n=t;n=n.parentNode;)a.unshift(n);for(;o[i]===a[i];)i++;return i?ce(o[i],a[i]):o[i]===E?-1:a[i]===E?1:0},h):h},se.matches=function(e,t){return se(e,null,null,t)},se.matchesSelector=function(e,t){if((e.ownerDocument||e)!==h&&p(e),t=t.replace(V,"='$1']"),n.matchesSelector&&m&&!k[t+" "]&&(!v||!v.test(t))&&(!g||!g.test(t)))try{var i=y.call(e,t);if(i||n.disconnectedMatch||e.document&&11!==e.document.nodeType)return i}catch(e){}return se(t,h,null,[e]).length>0},se.contains=function(e,t){return(e.ownerDocument||e)!==h&&p(e),b(e,t)},se.attr=function(e,t){(e.ownerDocument||e)!==h&&p(e);var r=i.attrHandle[t.toLowerCase()],s=r&&$.call(i.attrHandle,t.toLowerCase())?r(e,t,!m):void 0;return void 0!==s?s:n.attributes||!m?e.getAttribute(t):(s=e.getAttributeNode(t))&&s.specified?s.value:null},se.escape=function(e){return(e+"").replace(te,ne)},se.error=function(e){throw new Error("Syntax error, unrecognized expression: "+e)},se.uniqueSort=function(e){var t,i=[],r=0,s=0;if(u=!n.detectDuplicates,c=!n.sortStable&&e.slice(0),e.sort(P),u){for(;t=e[s++];)t===e[s]&&(r=i.push(s));for(;r--;)e.splice(i[r],1)}return c=null,e},r=se.getText=function(e){var t,n="",i=0,s=e.nodeType;if(s){if(1===s||9===s||11===s){if("string"==typeof e.textContent)return e.textContent;for(e=e.firstChild;e;e=e.nextSibling)n+=r(e)}else if(3===s||4===s)return e.nodeValue}else for(;t=e[i++];)n+=r(t);return n},(i=se.selectors={cacheLength:50,createPseudo:ae,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(e){return e[1]=e[1].replace(J,ee),e[3]=(e[3]||e[4]||e[5]||"").replace(J,ee),"~="===e[2]&&(e[3]=" "+e[3]+" "),e.slice(0,4)},CHILD:function(e){return e[1]=e[1].toLowerCase(),"nth"===e[1].slice(0,3)?(e[3]||se.error(e[0]),e[4]=+(e[4]?e[5]+(e[6]||1):2*("even"===e[3]||"odd"===e[3])),e[5]=+(e[7]+e[8]||"odd"===e[3])):e[3]&&se.error(e[0]),e},PSEUDO:function(e){var t,n=!e[6]&&e[2];return G.CHILD.test(e[0])?null:(e[3]?e[2]=e[4]||e[5]||"":n&&U.test(n)&&(t=o(n,!0))&&(t=n.indexOf(")",n.length-t)-n.length)&&(e[0]=e[0].slice(0,t),e[2]=n.slice(0,t)),e.slice(0,3))}},filter:{TAG:function(e){var t=e.replace(J,ee).toLowerCase();return"*"===e?function(){return!0}:function(e){return e.nodeName&&e.nodeName.toLowerCase()===t}},CLASS:function(e){var t=S[e+" "];return t||(t=new RegExp("(^|"+O+")"+e+"("+O+"|$)"))&&S(e,function(e){return t.test("string"==typeof e.className&&e.className||void 0!==e.getAttribute&&e.getAttribute("class")||"")})},ATTR:function(e,t,n){return function(i){var r=se.attr(i,e);return null==r?"!="===t:!t||(r+="","="===t?r===n:"!="===t?r!==n:"^="===t?n&&0===r.indexOf(n):"*="===t?n&&r.indexOf(n)>-1:"$="===t?n&&r.slice(-n.length)===n:"~="===t?(" "+r.replace(H," ")+" ").indexOf(n)>-1:"|="===t&&(r===n||r.slice(0,n.length+1)===n+"-"))}},CHILD:function(e,t,n,i,r){var s="nth"!==e.slice(0,3),o="last"!==e.slice(-4),a="of-type"===t;return 1===i&&0===r?function(e){return!!e.parentNode}:function(t,n,l){var d,c,u,p,h,f,m=s!==o?"nextSibling":"previousSibling",g=t.parentNode,v=a&&t.nodeName.toLowerCase(),y=!l&&!a,b=!1;if(g){if(s){for(;m;){for(p=t;p=p[m];)if(a?p.nodeName.toLowerCase()===v:1===p.nodeType)return!1;f=m="only"===e&&!f&&"nextSibling"}return!0}if(f=[o?g.firstChild:g.lastChild],o&&y){for(b=(h=(d=(c=(u=(p=g)[w]||(p[w]={}))[p.uniqueID]||(u[p.uniqueID]={}))[e]||[])[0]===x&&d[1])&&d[2],p=h&&g.childNodes[h];p=++h&&p&&p[m]||(b=h=0)||f.pop();)if(1===p.nodeType&&++b&&p===t){c[e]=[x,h,b];break}}else if(y&&(b=h=(d=(c=(u=(p=t)[w]||(p[w]={}))[p.uniqueID]||(u[p.uniqueID]={}))[e]||[])[0]===x&&d[1]),!1===b)for(;(p=++h&&p&&p[m]||(b=h=0)||f.pop())&&((a?p.nodeName.toLowerCase()!==v:1!==p.nodeType)||!++b||(y&&((c=(u=p[w]||(p[w]={}))[p.uniqueID]||(u[p.uniqueID]={}))[e]=[x,b]),p!==t)););return(b-=r)===i||b%i==0&&b/i>=0}}},PSEUDO:function(e,t){var n,r=i.pseudos[e]||i.setFilters[e.toLowerCase()]||se.error("unsupported pseudo: "+e);return r[w]?r(t):r.length>1?(n=[e,e,"",t],i.setFilters.hasOwnProperty(e.toLowerCase())?ae(function(e,n){for(var i,s=r(e,t),o=s.length;o--;)e[i=D(e,s[o])]=!(n[i]=s[o])}):function(e){return r(e,0,n)}):r}},pseudos:{not:ae(function(e){var t=[],n=[],i=a(e.replace(R,"$1"));return i[w]?ae(function(e,t,n,r){for(var s,o=i(e,null,r,[]),a=e.length;a--;)(s=o[a])&&(e[a]=!(t[a]=s))}):function(e,r,s){return t[0]=e,i(t,null,s,n),t[0]=null,!n.pop()}}),has:ae(function(e){return function(t){return se(e,t).length>0}}),contains:ae(function(e){return e=e.replace(J,ee),function(t){return(t.textContent||t.innerText||r(t)).indexOf(e)>-1}}),lang:ae(function(e){return W.test(e||"")||se.error("unsupported lang: "+e),e=e.replace(J,ee).toLowerCase(),function(t){var n;do{if(n=m?t.lang:t.getAttribute("xml:lang")||t.getAttribute("lang"))return(n=n.toLowerCase())===e||0===n.indexOf(e+"-")}while((t=t.parentNode)&&1===t.nodeType);return!1}}),target:function(t){var n=e.location&&e.location.hash;return n&&n.slice(1)===t.id},root:function(e){return e===f},focus:function(e){return e===h.activeElement&&(!h.hasFocus||h.hasFocus())&&!!(e.type||e.href||~e.tabIndex)},enabled:he(!1),disabled:he(!0),checked:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&!!e.checked||"option"===t&&!!e.selected},selected:function(e){return e.parentNode&&e.parentNode.selectedIndex,!0===e.selected},empty:function(e){for(e=e.firstChild;e;e=e.nextSibling)if(e.nodeType<6)return!1;return!0},parent:function(e){return!i.pseudos.empty(e)},header:function(e){return Y.test(e.nodeName)},input:function(e){return X.test(e.nodeName)},button:function(e){var t=e.nodeName.toLowerCase();return"input"===t&&"button"===e.type||"button"===t},text:function(e){var t;return"input"===e.nodeName.toLowerCase()&&"text"===e.type&&(null==(t=e.getAttribute("type"))||"text"===t.toLowerCase())},first:fe(function(){return[0]}),last:fe(function(e,t){return[t-1]}),eq:fe(function(e,t,n){return[n<0?n+t:n]}),even:fe(function(e,t){for(var n=0;n<t;n+=2)e.push(n);return e}),odd:fe(function(e,t){for(var n=1;n<t;n+=2)e.push(n);return e}),lt:fe(function(e,t,n){for(var i=n<0?n+t:n;--i>=0;)e.push(i);return e}),gt:fe(function(e,t,n){for(var i=n<0?n+t:n;++i<t;)e.push(i);return e})}}).pseudos.nth=i.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})i.pseudos[t]=ue(t);for(t in{submit:!0,reset:!0})i.pseudos[t]=pe(t);function ge(){}function ve(e){for(var t=0,n=e.length,i="";t<n;t++)i+=e[t].value;return i}function ye(e,t,n){var i=t.dir,r=t.next,s=r||i,o=n&&"parentNode"===s,a=T++;return t.first?function(t,n,r){for(;t=t[i];)if(1===t.nodeType||o)return e(t,n,r);return!1}:function(t,n,l){var d,c,u,p=[x,a];if(l){for(;t=t[i];)if((1===t.nodeType||o)&&e(t,n,l))return!0}else for(;t=t[i];)if(1===t.nodeType||o)if(c=(u=t[w]||(t[w]={}))[t.uniqueID]||(u[t.uniqueID]={}),r&&r===t.nodeName.toLowerCase())t=t[i]||t;else{if((d=c[s])&&d[0]===x&&d[1]===a)return p[2]=d[2];if(c[s]=p,p[2]=e(t,n,l))return!0}return!1}}function be(e){return e.length>1?function(t,n,i){for(var r=e.length;r--;)if(!e[r](t,n,i))return!1;return!0}:e[0]}function we(e,t,n,i,r){for(var s,o=[],a=0,l=e.length,d=null!=t;a<l;a++)(s=e[a])&&(n&&!n(s,i,r)||(o.push(s),d&&t.push(a)));return o}function Ee(e,t,n,i,r,s){return i&&!i[w]&&(i=Ee(i)),r&&!r[w]&&(r=Ee(r,s)),ae(function(s,o,a,l){var d,c,u,p=[],h=[],f=o.length,m=s||function(e,t,n){for(var i=0,r=t.length;i<r;i++)se(e,t[i],n);return n}(t||"*",a.nodeType?[a]:a,[]),g=!e||!s&&t?m:we(m,p,e,a,l),v=n?r||(s?e:f||i)?[]:o:g;if(n&&n(g,v,a,l),i)for(d=we(v,h),i(d,[],a,l),c=d.length;c--;)(u=d[c])&&(v[h[c]]=!(g[h[c]]=u));if(s){if(r||e){if(r){for(d=[],c=v.length;c--;)(u=v[c])&&d.push(g[c]=u);r(null,v=[],d,l)}for(c=v.length;c--;)(u=v[c])&&(d=r?D(s,u):p[c])>-1&&(s[d]=!(o[d]=u))}}else v=we(v===o?v.splice(f,v.length):v),r?r(null,o,v,l):M.apply(o,v)})}function xe(e){for(var t,n,r,s=e.length,o=i.relative[e[0].type],a=o||i.relative[" "],l=o?1:0,c=ye(function(e){return e===t},a,!0),u=ye(function(e){return D(t,e)>-1},a,!0),p=[function(e,n,i){var r=!o&&(i||n!==d)||((t=n).nodeType?c(e,n,i):u(e,n,i));return t=null,r}];l<s;l++)if(n=i.relative[e[l].type])p=[ye(be(p),n)];else{if((n=i.filter[e[l].type].apply(null,e[l].matches))[w]){for(r=++l;r<s&&!i.relative[e[r].type];r++);return Ee(l>1&&be(p),l>1&&ve(e.slice(0,l-1).concat({value:" "===e[l-2].type?"*":""})).replace(R,"$1"),n,l<r&&xe(e.slice(l,r)),r<s&&xe(e=e.slice(r)),r<s&&ve(e))}p.push(n)}return be(p)}return ge.prototype=i.filters=i.pseudos,i.setFilters=new ge,o=se.tokenize=function(e,t){var n,r,s,o,a,l,d,c=C[e+" "];if(c)return t?0:c.slice(0);for(a=e,l=[],d=i.preFilter;a;){for(o in n&&!(r=q.exec(a))||(r&&(a=a.slice(r[0].length)||a),l.push(s=[])),n=!1,(r=B.exec(a))&&(n=r.shift(),s.push({value:n,type:r[0].replace(R," ")}),a=a.slice(n.length)),i.filter)!(r=G[o].exec(a))||d[o]&&!(r=d[o](r))||(n=r.shift(),s.push({value:n,type:o,matches:r}),a=a.slice(n.length));if(!n)break}return t?a.length:a?se.error(e):C(e,l).slice(0)},a=se.compile=function(e,t){var n,r=[],s=[],a=k[e+" "];if(!a){for(t||(t=o(e)),n=t.length;n--;)(a=xe(t[n]))[w]?r.push(a):s.push(a);(a=k(e,function(e,t){var n=t.length>0,r=e.length>0,s=function(s,o,a,l,c){var u,f,g,v=0,y="0",b=s&&[],w=[],E=d,T=s||r&&i.find.TAG("*",c),S=x+=null==E?1:Math.random()||.1,C=T.length;for(c&&(d=o===h||o||c);y!==C&&null!=(u=T[y]);y++){if(r&&u){for(f=0,o||u.ownerDocument===h||(p(u),a=!m);g=e[f++];)if(g(u,o||h,a)){l.push(u);break}c&&(x=S)}n&&((u=!g&&u)&&v--,s&&b.push(u))}if(v+=y,n&&y!==v){for(f=0;g=t[f++];)g(b,w,o,a);if(s){if(v>0)for(;y--;)b[y]||w[y]||(w[y]=_.call(l));w=we(w)}M.apply(l,w),c&&!s&&w.length>0&&v+t.length>1&&se.uniqueSort(l)}return c&&(x=S,d=E),b};return n?ae(s):s}(s,r))).selector=e}return a},l=se.select=function(e,t,n,r){var s,l,d,c,u,p="function"==typeof e&&e,h=!r&&o(e=p.selector||e);if(n=n||[],1===h.length){if((l=h[0]=h[0].slice(0)).length>2&&"ID"===(d=l[0]).type&&9===t.nodeType&&m&&i.relative[l[1].type]){if(!(t=(i.find.ID(d.matches[0].replace(J,ee),t)||[])[0]))return n;p&&(t=t.parentNode),e=e.slice(l.shift().value.length)}for(s=G.needsContext.test(e)?0:l.length;s--&&(d=l[s],!i.relative[c=d.type]);)if((u=i.find[c])&&(r=u(d.matches[0].replace(J,ee),Z.test(l[0].type)&&me(t.parentNode)||t))){if(l.splice(s,1),!(e=r.length&&ve(l)))return M.apply(n,r),n;break}}return(p||a(e,h))(r,t,!m,n,!t||Z.test(e)&&me(t.parentNode)||t),n},n.sortStable=w.split("").sort(P).join("")===w,n.detectDuplicates=!!u,p(),n.sortDetached=le(function(e){return 1&e.compareDocumentPosition(h.createElement("fieldset"))}),le(function(e){return e.innerHTML="<a href='#'></a>","#"===e.firstChild.getAttribute("href")})||de("type|href|height|width",function(e,t,n){if(!n)return e.getAttribute(t,"type"===t.toLowerCase()?1:2)}),n.attributes&&le(function(e){return e.innerHTML="<input/>",e.firstChild.setAttribute("value",""),""===e.firstChild.getAttribute("value")})||de("value",function(e,t,n){if(!n&&"input"===e.nodeName.toLowerCase())return e.defaultValue}),le(function(e){return null==e.getAttribute("disabled")})||de(I,function(e,t,n){var i;if(!n)return!0===e[t]?t.toLowerCase():(i=e.getAttributeNode(t))&&i.specified?i.value:null}),se}(n);T.find=k,T.expr=k.selectors,T.expr[":"]=T.expr.pseudos,T.uniqueSort=T.unique=k.uniqueSort,T.text=k.getText,T.isXMLDoc=k.isXML,T.contains=k.contains,T.escapeSelector=k.escape;var P=function(e,t,n){for(var i=[],r=void 0!==n;(e=e[t])&&9!==e.nodeType;)if(1===e.nodeType){if(r&&T(e).is(n))break;i.push(e)}return i},$=function(e,t){for(var n=[];e;e=e.nextSibling)1===e.nodeType&&e!==t&&n.push(e);return n},A=T.expr.match.needsContext;function _(e,t){return e.nodeName&&e.nodeName.toLowerCase()===t.toLowerCase()}var L=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function M(e,t,n){return y(t)?T.grep(e,function(e,i){return!!t.call(e,i,e)!==n}):t.nodeType?T.grep(e,function(e){return e===t!==n}):"string"!=typeof t?T.grep(e,function(e){return u.call(t,e)>-1!==n}):T.filter(t,e,n)}T.filter=function(e,t,n){var i=t[0];return n&&(e=":not("+e+")"),1===t.length&&1===i.nodeType?T.find.matchesSelector(i,e)?[i]:[]:T.find.matches(e,T.grep(t,function(e){return 1===e.nodeType}))},T.fn.extend({find:function(e){var t,n,i=this.length,r=this;if("string"!=typeof e)return this.pushStack(T(e).filter(function(){for(t=0;t<i;t++)if(T.contains(r[t],this))return!0}));for(n=this.pushStack([]),t=0;t<i;t++)T.find(e,r[t],n);return i>1?T.uniqueSort(n):n},filter:function(e){return this.pushStack(M(this,e||[],!1))},not:function(e){return this.pushStack(M(this,e||[],!0))},is:function(e){return!!M(this,"string"==typeof e&&A.test(e)?T(e):e||[],!1).length}});var N,D=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(T.fn.init=function(e,t,n){var i,r;if(!e)return this;if(n=n||N,"string"==typeof e){if(!(i="<"===e[0]&&">"===e[e.length-1]&&e.length>=3?[null,e,null]:D.exec(e))||!i[1]&&t)return!t||t.jquery?(t||n).find(e):this.constructor(t).find(e);if(i[1]){if(t=t instanceof T?t[0]:t,T.merge(this,T.parseHTML(i[1],t&&t.nodeType?t.ownerDocument||t:o,!0)),L.test(i[1])&&T.isPlainObject(t))for(i in t)y(this[i])?this[i](t[i]):this.attr(i,t[i]);return this}return(r=o.getElementById(i[2]))&&(this[0]=r,this.length=1),this}return e.nodeType?(this[0]=e,this.length=1,this):y(e)?void 0!==n.ready?n.ready(e):e(T):T.makeArray(e,this)}).prototype=T.fn,N=T(o);var I=/^(?:parents|prev(?:Until|All))/,O={children:!0,contents:!0,next:!0,prev:!0};function j(e,t){for(;(e=e[t])&&1!==e.nodeType;);return e}T.fn.extend({has:function(e){var t=T(e,this),n=t.length;return this.filter(function(){for(var e=0;e<n;e++)if(T.contains(this,t[e]))return!0})},closest:function(e,t){var n,i=0,r=this.length,s=[],o="string"!=typeof e&&T(e);if(!A.test(e))for(;i<r;i++)for(n=this[i];n&&n!==t;n=n.parentNode)if(n.nodeType<11&&(o?o.index(n)>-1:1===n.nodeType&&T.find.matchesSelector(n,e))){s.push(n);break}return this.pushStack(s.length>1?T.uniqueSort(s):s)},index:function(e){return e?"string"==typeof e?u.call(T(e),this[0]):u.call(this,e.jquery?e[0]:e):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(e,t){return this.pushStack(T.uniqueSort(T.merge(this.get(),T(e,t))))},addBack:function(e){return this.add(null==e?this.prevObject:this.prevObject.filter(e))}}),T.each({parent:function(e){var t=e.parentNode;return t&&11!==t.nodeType?t:null},parents:function(e){return P(e,"parentNode")},parentsUntil:function(e,t,n){return P(e,"parentNode",n)},next:function(e){return j(e,"nextSibling")},prev:function(e){return j(e,"previousSibling")},nextAll:function(e){return P(e,"nextSibling")},prevAll:function(e){return P(e,"previousSibling")},nextUntil:function(e,t,n){return P(e,"nextSibling",n)},prevUntil:function(e,t,n){return P(e,"previousSibling",n)},siblings:function(e){return $((e.parentNode||{}).firstChild,e)},children:function(e){return $(e.firstChild)},contents:function(e){return _(e,"iframe")?e.contentDocument:(_(e,"template")&&(e=e.content||e),T.merge([],e.childNodes))}},function(e,t){T.fn[e]=function(n,i){var r=T.map(this,t,n);return"Until"!==e.slice(-5)&&(i=n),i&&"string"==typeof i&&(r=T.filter(i,r)),this.length>1&&(O[e]||T.uniqueSort(r),I.test(e)&&r.reverse()),this.pushStack(r)}});var F=/[^\x20\t\r\n\f]+/g;function z(e){return e}function H(e){throw e}function R(e,t,n,i){var r;try{e&&y(r=e.promise)?r.call(e).done(t).fail(n):e&&y(r=e.then)?r.call(e,t,n):t.apply(void 0,[e].slice(i))}catch(e){n.apply(void 0,[e])}}T.Callbacks=function(e){e="string"==typeof e?function(e){var t={};return T.each(e.match(F)||[],function(e,n){t[n]=!0}),t}(e):T.extend({},e);var t,n,i,r,s=[],o=[],a=-1,l=function(){for(r=r||e.once,i=t=!0;o.length;a=-1)for(n=o.shift();++a<s.length;)!1===s[a].apply(n[0],n[1])&&e.stopOnFalse&&(a=s.length,n=!1);e.memory||(n=!1),t=!1,r&&(s=n?[]:"")},d={add:function(){return s&&(n&&!t&&(a=s.length-1,o.push(n)),function t(n){T.each(n,function(n,i){y(i)?e.unique&&d.has(i)||s.push(i):i&&i.length&&"string"!==x(i)&&t(i)})}(arguments),n&&!t&&l()),this},remove:function(){return T.each(arguments,function(e,t){for(var n;(n=T.inArray(t,s,n))>-1;)s.splice(n,1),n<=a&&a--}),this},has:function(e){return e?T.inArray(e,s)>-1:s.length>0},empty:function(){return s&&(s=[]),this},disable:function(){return r=o=[],s=n="",this},disabled:function(){return!s},lock:function(){return r=o=[],n||t||(s=n=""),this},locked:function(){return!!r},fireWith:function(e,n){return r||(n=[e,(n=n||[]).slice?n.slice():n],o.push(n),t||l()),this},fire:function(){return d.fireWith(this,arguments),this},fired:function(){return!!i}};return d},T.extend({Deferred:function(e){var t=[["notify","progress",T.Callbacks("memory"),T.Callbacks("memory"),2],["resolve","done",T.Callbacks("once memory"),T.Callbacks("once memory"),0,"resolved"],["reject","fail",T.Callbacks("once memory"),T.Callbacks("once memory"),1,"rejected"]],i="pending",r={state:function(){return i},always:function(){return s.done(arguments).fail(arguments),this},catch:function(e){return r.then(null,e)},pipe:function(){var e=arguments;return T.Deferred(function(n){T.each(t,function(t,i){var r=y(e[i[4]])&&e[i[4]];s[i[1]](function(){var e=r&&r.apply(this,arguments);e&&y(e.promise)?e.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[i[0]+"With"](this,r?[e]:arguments)})}),e=null}).promise()},then:function(e,i,r){var s=0;function o(e,t,i,r){return function(){var a=this,l=arguments,d=function(){var n,d;if(!(e<s)){if((n=i.apply(a,l))===t.promise())throw new TypeError("Thenable self-resolution");d=n&&("object"==typeof n||"function"==typeof n)&&n.then,y(d)?r?d.call(n,o(s,t,z,r),o(s,t,H,r)):(s++,d.call(n,o(s,t,z,r),o(s,t,H,r),o(s,t,z,t.notifyWith))):(i!==z&&(a=void 0,l=[n]),(r||t.resolveWith)(a,l))}},c=r?d:function(){try{d()}catch(n){T.Deferred.exceptionHook&&T.Deferred.exceptionHook(n,c.stackTrace),e+1>=s&&(i!==H&&(a=void 0,l=[n]),t.rejectWith(a,l))}};e?c():(T.Deferred.getStackHook&&(c.stackTrace=T.Deferred.getStackHook()),n.setTimeout(c))}}return T.Deferred(function(n){t[0][3].add(o(0,n,y(r)?r:z,n.notifyWith)),t[1][3].add(o(0,n,y(e)?e:z)),t[2][3].add(o(0,n,y(i)?i:H))}).promise()},promise:function(e){return null!=e?T.extend(e,r):r}},s={};return T.each(t,function(e,n){var o=n[2],a=n[5];r[n[1]]=o.add,a&&o.add(function(){i=a},t[3-e][2].disable,t[3-e][3].disable,t[0][2].lock,t[0][3].lock),o.add(n[3].fire),s[n[0]]=function(){return s[n[0]+"With"](this===s?void 0:this,arguments),this},s[n[0]+"With"]=o.fireWith}),r.promise(s),e&&e.call(s,s),s},when:function(e){var t=arguments.length,n=t,i=Array(n),r=l.call(arguments),s=T.Deferred(),o=function(e){return function(n){i[e]=this,r[e]=arguments.length>1?l.call(arguments):n,--t||s.resolveWith(i,r)}};if(t<=1&&(R(e,s.done(o(n)).resolve,s.reject,!t),"pending"===s.state()||y(r[n]&&r[n].then)))return s.then();for(;n--;)R(r[n],o(n),s.reject);return s.promise()}});var q=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;T.Deferred.exceptionHook=function(e,t){n.console&&n.console.warn&&e&&q.test(e.name)&&n.console.warn("jQuery.Deferred exception: "+e.message,e.stack,t)},T.readyException=function(e){n.setTimeout(function(){throw e})};var B=T.Deferred();function V(){o.removeEventListener("DOMContentLoaded",V),n.removeEventListener("load",V),T.ready()}T.fn.ready=function(e){return B.then(e).catch(function(e){T.readyException(e)}),this},T.extend({isReady:!1,readyWait:1,ready:function(e){(!0===e?--T.readyWait:T.isReady)||(T.isReady=!0,!0!==e&&--T.readyWait>0||B.resolveWith(o,[T]))}}),T.ready.then=B.then,"complete"===o.readyState||"loading"!==o.readyState&&!o.documentElement.doScroll?n.setTimeout(T.ready):(o.addEventListener("DOMContentLoaded",V),n.addEventListener("load",V));var U=function(e,t,n,i,r,s,o){var a=0,l=e.length,d=null==n;if("object"===x(n))for(a in r=!0,n)U(e,t,a,n[a],!0,s,o);else if(void 0!==i&&(r=!0,y(i)||(o=!0),d&&(o?(t.call(e,i),t=null):(d=t,t=function(e,t,n){return d.call(T(e),n)})),t))for(;a<l;a++)t(e[a],n,o?i:i.call(e[a],a,t(e[a],n)));return r?e:d?t.call(e):l?t(e[0],n):s},W=/^-ms-/,G=/-([a-z])/g;function X(e,t){return t.toUpperCase()}function Y(e){return e.replace(W,"ms-").replace(G,X)}var K=function(e){return 1===e.nodeType||9===e.nodeType||!+e.nodeType};function Q(){this.expando=T.expando+Q.uid++}Q.uid=1,Q.prototype={cache:function(e){var t=e[this.expando];return t||(t={},K(e)&&(e.nodeType?e[this.expando]=t:Object.defineProperty(e,this.expando,{value:t,configurable:!0}))),t},set:function(e,t,n){var i,r=this.cache(e);if("string"==typeof t)r[Y(t)]=n;else for(i in t)r[Y(i)]=t[i];return r},get:function(e,t){return void 0===t?this.cache(e):e[this.expando]&&e[this.expando][Y(t)]},access:function(e,t,n){return void 0===t||t&&"string"==typeof t&&void 0===n?this.get(e,t):(this.set(e,t,n),void 0!==n?n:t)},remove:function(e,t){var n,i=e[this.expando];if(void 0!==i){if(void 0!==t){n=(t=Array.isArray(t)?t.map(Y):(t=Y(t))in i?[t]:t.match(F)||[]).length;for(;n--;)delete i[t[n]]}(void 0===t||T.isEmptyObject(i))&&(e.nodeType?e[this.expando]=void 0:delete e[this.expando])}},hasData:function(e){var t=e[this.expando];return void 0!==t&&!T.isEmptyObject(t)}};var Z=new Q,J=new Q,ee=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,te=/[A-Z]/g;function ne(e,t,n){var i;if(void 0===n&&1===e.nodeType)if(i="data-"+t.replace(te,"-$&").toLowerCase(),"string"==typeof(n=e.getAttribute(i))){try{n=function(e){return"true"===e||"false"!==e&&("null"===e?null:e===+e+""?+e:ee.test(e)?JSON.parse(e):e)}(n)}catch(e){}J.set(e,t,n)}else n=void 0;return n}T.extend({hasData:function(e){return J.hasData(e)||Z.hasData(e)},data:function(e,t,n){return J.access(e,t,n)},removeData:function(e,t){J.remove(e,t)},_data:function(e,t,n){return Z.access(e,t,n)},_removeData:function(e,t){Z.remove(e,t)}}),T.fn.extend({data:function(e,t){var n,i,r,s=this[0],o=s&&s.attributes;if(void 0===e){if(this.length&&(r=J.get(s),1===s.nodeType&&!Z.get(s,"hasDataAttrs"))){for(n=o.length;n--;)o[n]&&0===(i=o[n].name).indexOf("data-")&&(i=Y(i.slice(5)),ne(s,i,r[i]));Z.set(s,"hasDataAttrs",!0)}return r}return"object"==typeof e?this.each(function(){J.set(this,e)}):U(this,function(t){var n;if(s&&void 0===t)return void 0!==(n=J.get(s,e))?n:void 0!==(n=ne(s,e))?n:void 0;this.each(function(){J.set(this,e,t)})},null,t,arguments.length>1,null,!0)},removeData:function(e){return this.each(function(){J.remove(this,e)})}}),T.extend({queue:function(e,t,n){var i;if(e)return t=(t||"fx")+"queue",i=Z.get(e,t),n&&(!i||Array.isArray(n)?i=Z.access(e,t,T.makeArray(n)):i.push(n)),i||[]},dequeue:function(e,t){t=t||"fx";var n=T.queue(e,t),i=n.length,r=n.shift(),s=T._queueHooks(e,t);"inprogress"===r&&(r=n.shift(),i--),r&&("fx"===t&&n.unshift("inprogress"),delete s.stop,r.call(e,function(){T.dequeue(e,t)},s)),!i&&s&&s.empty.fire()},_queueHooks:function(e,t){var n=t+"queueHooks";return Z.get(e,n)||Z.access(e,n,{empty:T.Callbacks("once memory").add(function(){Z.remove(e,[t+"queue",n])})})}}),T.fn.extend({queue:function(e,t){var n=2;return"string"!=typeof e&&(t=e,e="fx",n--),arguments.length<n?T.queue(this[0],e):void 0===t?this:this.each(function(){var n=T.queue(this,e,t);T._queueHooks(this,e),"fx"===e&&"inprogress"!==n[0]&&T.dequeue(this,e)})},dequeue:function(e){return this.each(function(){T.dequeue(this,e)})},clearQueue:function(e){return this.queue(e||"fx",[])},promise:function(e,t){var n,i=1,r=T.Deferred(),s=this,o=this.length,a=function(){--i||r.resolveWith(s,[s])};for("string"!=typeof e&&(t=e,e=void 0),e=e||"fx";o--;)(n=Z.get(s[o],e+"queueHooks"))&&n.empty&&(i++,n.empty.add(a));return a(),r.promise(t)}});var ie=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,re=new RegExp("^(?:([+-])=|)("+ie+")([a-z%]*)$","i"),se=["Top","Right","Bottom","Left"],oe=function(e,t){return"none"===(e=t||e).style.display||""===e.style.display&&T.contains(e.ownerDocument,e)&&"none"===T.css(e,"display")},ae=function(e,t,n,i){var r,s,o={};for(s in t)o[s]=e.style[s],e.style[s]=t[s];for(s in r=n.apply(e,i||[]),t)e.style[s]=o[s];return r};function le(e,t,n,i){var r,s,o=20,a=i?function(){return i.cur()}:function(){return T.css(e,t,"")},l=a(),d=n&&n[3]||(T.cssNumber[t]?"":"px"),c=(T.cssNumber[t]||"px"!==d&&+l)&&re.exec(T.css(e,t));if(c&&c[3]!==d){for(l/=2,d=d||c[3],c=+l||1;o--;)T.style(e,t,c+d),(1-s)*(1-(s=a()/l||.5))<=0&&(o=0),c/=s;c*=2,T.style(e,t,c+d),n=n||[]}return n&&(c=+c||+l||0,r=n[1]?c+(n[1]+1)*n[2]:+n[2],i&&(i.unit=d,i.start=c,i.end=r)),r}var de={};function ce(e){var t,n=e.ownerDocument,i=e.nodeName,r=de[i];return r||(t=n.body.appendChild(n.createElement(i)),r=T.css(t,"display"),t.parentNode.removeChild(t),"none"===r&&(r="block"),de[i]=r,r)}function ue(e,t){for(var n,i,r=[],s=0,o=e.length;s<o;s++)(i=e[s]).style&&(n=i.style.display,t?("none"===n&&(r[s]=Z.get(i,"display")||null,r[s]||(i.style.display="")),""===i.style.display&&oe(i)&&(r[s]=ce(i))):"none"!==n&&(r[s]="none",Z.set(i,"display",n)));for(s=0;s<o;s++)null!=r[s]&&(e[s].style.display=r[s]);return e}T.fn.extend({show:function(){return ue(this,!0)},hide:function(){return ue(this)},toggle:function(e){return"boolean"==typeof e?e?this.show():this.hide():this.each(function(){oe(this)?T(this).show():T(this).hide()})}});var pe=/^(?:checkbox|radio)$/i,he=/<([a-z][^\/\0>\x20\t\r\n\f]+)/i,fe=/^$|^module$|\/(?:java|ecma)script/i,me={option:[1,"<select multiple='multiple'>","</select>"],thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function ge(e,t){var n;return n=void 0!==e.getElementsByTagName?e.getElementsByTagName(t||"*"):void 0!==e.querySelectorAll?e.querySelectorAll(t||"*"):[],void 0===t||t&&_(e,t)?T.merge([e],n):n}function ve(e,t){for(var n=0,i=e.length;n<i;n++)Z.set(e[n],"globalEval",!t||Z.get(t[n],"globalEval"))}me.optgroup=me.option,me.tbody=me.tfoot=me.colgroup=me.caption=me.thead,me.th=me.td;var ye=/<|&#?\w+;/;function be(e,t,n,i,r){for(var s,o,a,l,d,c,u=t.createDocumentFragment(),p=[],h=0,f=e.length;h<f;h++)if((s=e[h])||0===s)if("object"===x(s))T.merge(p,s.nodeType?[s]:s);else if(ye.test(s)){for(o=o||u.appendChild(t.createElement("div")),a=(he.exec(s)||["",""])[1].toLowerCase(),l=me[a]||me._default,o.innerHTML=l[1]+T.htmlPrefilter(s)+l[2],c=l[0];c--;)o=o.lastChild;T.merge(p,o.childNodes),(o=u.firstChild).textContent=""}else p.push(t.createTextNode(s));for(u.textContent="",h=0;s=p[h++];)if(i&&T.inArray(s,i)>-1)r&&r.push(s);else if(d=T.contains(s.ownerDocument,s),o=ge(u.appendChild(s),"script"),d&&ve(o),n)for(c=0;s=o[c++];)fe.test(s.type||"")&&n.push(s);return u}!function(){var e=o.createDocumentFragment().appendChild(o.createElement("div")),t=o.createElement("input");t.setAttribute("type","radio"),t.setAttribute("checked","checked"),t.setAttribute("name","t"),e.appendChild(t),v.checkClone=e.cloneNode(!0).cloneNode(!0).lastChild.checked,e.innerHTML="<textarea>x</textarea>",v.noCloneChecked=!!e.cloneNode(!0).lastChild.defaultValue}();var we=o.documentElement,Ee=/^key/,xe=/^(?:mouse|pointer|contextmenu|drag|drop)|click/,Te=/^([^.]*)(?:\.(.+)|)/;function Se(){return!0}function Ce(){return!1}function ke(){try{return o.activeElement}catch(e){}}function Pe(e,t,n,i,r,s){var o,a;if("object"==typeof t){for(a in"string"!=typeof n&&(i=i||n,n=void 0),t)Pe(e,a,n,i,t[a],s);return e}if(null==i&&null==r?(r=n,i=n=void 0):null==r&&("string"==typeof n?(r=i,i=void 0):(r=i,i=n,n=void 0)),!1===r)r=Ce;else if(!r)return e;return 1===s&&(o=r,(r=function(e){return T().off(e),o.apply(this,arguments)}).guid=o.guid||(o.guid=T.guid++)),e.each(function(){T.event.add(this,t,r,i,n)})}T.event={global:{},add:function(e,t,n,i,r){var s,o,a,l,d,c,u,p,h,f,m,g=Z.get(e);if(g)for(n.handler&&(n=(s=n).handler,r=s.selector),r&&T.find.matchesSelector(we,r),n.guid||(n.guid=T.guid++),(l=g.events)||(l=g.events={}),(o=g.handle)||(o=g.handle=function(t){return void 0!==T&&T.event.triggered!==t.type?T.event.dispatch.apply(e,arguments):void 0}),d=(t=(t||"").match(F)||[""]).length;d--;)h=m=(a=Te.exec(t[d])||[])[1],f=(a[2]||"").split(".").sort(),h&&(u=T.event.special[h]||{},h=(r?u.delegateType:u.bindType)||h,u=T.event.special[h]||{},c=T.extend({type:h,origType:m,data:i,handler:n,guid:n.guid,selector:r,needsContext:r&&T.expr.match.needsContext.test(r),namespace:f.join(".")},s),(p=l[h])||((p=l[h]=[]).delegateCount=0,u.setup&&!1!==u.setup.call(e,i,f,o)||e.addEventListener&&e.addEventListener(h,o)),u.add&&(u.add.call(e,c),c.handler.guid||(c.handler.guid=n.guid)),r?p.splice(p.delegateCount++,0,c):p.push(c),T.event.global[h]=!0)},remove:function(e,t,n,i,r){var s,o,a,l,d,c,u,p,h,f,m,g=Z.hasData(e)&&Z.get(e);if(g&&(l=g.events)){for(d=(t=(t||"").match(F)||[""]).length;d--;)if(h=m=(a=Te.exec(t[d])||[])[1],f=(a[2]||"").split(".").sort(),h){for(u=T.event.special[h]||{},p=l[h=(i?u.delegateType:u.bindType)||h]||[],a=a[2]&&new RegExp("(^|\\.)"+f.join("\\.(?:.*\\.|)")+"(\\.|$)"),o=s=p.length;s--;)c=p[s],!r&&m!==c.origType||n&&n.guid!==c.guid||a&&!a.test(c.namespace)||i&&i!==c.selector&&("**"!==i||!c.selector)||(p.splice(s,1),c.selector&&p.delegateCount--,u.remove&&u.remove.call(e,c));o&&!p.length&&(u.teardown&&!1!==u.teardown.call(e,f,g.handle)||T.removeEvent(e,h,g.handle),delete l[h])}else for(h in l)T.event.remove(e,h+t[d],n,i,!0);T.isEmptyObject(l)&&Z.remove(e,"handle events")}},dispatch:function(e){var t,n,i,r,s,o,a=T.event.fix(e),l=new Array(arguments.length),d=(Z.get(this,"events")||{})[a.type]||[],c=T.event.special[a.type]||{};for(l[0]=a,t=1;t<arguments.length;t++)l[t]=arguments[t];if(a.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,a)){for(o=T.event.handlers.call(this,a,d),t=0;(r=o[t++])&&!a.isPropagationStopped();)for(a.currentTarget=r.elem,n=0;(s=r.handlers[n++])&&!a.isImmediatePropagationStopped();)a.rnamespace&&!a.rnamespace.test(s.namespace)||(a.handleObj=s,a.data=s.data,void 0!==(i=((T.event.special[s.origType]||{}).handle||s.handler).apply(r.elem,l))&&!1===(a.result=i)&&(a.preventDefault(),a.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,a),a.result}},handlers:function(e,t){var n,i,r,s,o,a=[],l=t.delegateCount,d=e.target;if(l&&d.nodeType&&!("click"===e.type&&e.button>=1))for(;d!==this;d=d.parentNode||this)if(1===d.nodeType&&("click"!==e.type||!0!==d.disabled)){for(s=[],o={},n=0;n<l;n++)void 0===o[r=(i=t[n]).selector+" "]&&(o[r]=i.needsContext?T(r,this).index(d)>-1:T.find(r,this,null,[d]).length),o[r]&&s.push(i);s.length&&a.push({elem:d,handlers:s})}return d=this,l<t.length&&a.push({elem:d,handlers:t.slice(l)}),a},addProp:function(e,t){Object.defineProperty(T.Event.prototype,e,{enumerable:!0,configurable:!0,get:y(t)?function(){if(this.originalEvent)return t(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[e]},set:function(t){Object.defineProperty(this,e,{enumerable:!0,configurable:!0,writable:!0,value:t})}})},fix:function(e){return e[T.expando]?e:new T.Event(e)},special:{load:{noBubble:!0},focus:{trigger:function(){if(this!==ke()&&this.focus)return this.focus(),!1},delegateType:"focusin"},blur:{trigger:function(){if(this===ke()&&this.blur)return this.blur(),!1},delegateType:"focusout"},click:{trigger:function(){if("checkbox"===this.type&&this.click&&_(this,"input"))return this.click(),!1},_default:function(e){return _(e.target,"a")}},beforeunload:{postDispatch:function(e){void 0!==e.result&&e.originalEvent&&(e.originalEvent.returnValue=e.result)}}}},T.removeEvent=function(e,t,n){e.removeEventListener&&e.removeEventListener(t,n)},T.Event=function(e,t){if(!(this instanceof T.Event))return new T.Event(e,t);e&&e.type?(this.originalEvent=e,this.type=e.type,this.isDefaultPrevented=e.defaultPrevented||void 0===e.defaultPrevented&&!1===e.returnValue?Se:Ce,this.target=e.target&&3===e.target.nodeType?e.target.parentNode:e.target,this.currentTarget=e.currentTarget,this.relatedTarget=e.relatedTarget):this.type=e,t&&T.extend(this,t),this.timeStamp=e&&e.timeStamp||Date.now(),this[T.expando]=!0},T.Event.prototype={constructor:T.Event,isDefaultPrevented:Ce,isPropagationStopped:Ce,isImmediatePropagationStopped:Ce,isSimulated:!1,preventDefault:function(){var e=this.originalEvent;this.isDefaultPrevented=Se,e&&!this.isSimulated&&e.preventDefault()},stopPropagation:function(){var e=this.originalEvent;this.isPropagationStopped=Se,e&&!this.isSimulated&&e.stopPropagation()},stopImmediatePropagation:function(){var e=this.originalEvent;this.isImmediatePropagationStopped=Se,e&&!this.isSimulated&&e.stopImmediatePropagation(),this.stopPropagation()}},T.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:function(e){var t=e.button;return null==e.which&&Ee.test(e.type)?null!=e.charCode?e.charCode:e.keyCode:!e.which&&void 0!==t&&xe.test(e.type)?1&t?1:2&t?3:4&t?2:0:e.which}},T.event.addProp),T.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},function(e,t){T.event.special[e]={delegateType:t,bindType:t,handle:function(e){var n,i=e.relatedTarget,r=e.handleObj;return i&&(i===this||T.contains(this,i))||(e.type=r.origType,n=r.handler.apply(this,arguments),e.type=t),n}}}),T.fn.extend({on:function(e,t,n,i){return Pe(this,e,t,n,i)},one:function(e,t,n,i){return Pe(this,e,t,n,i,1)},off:function(e,t,n){var i,r;if(e&&e.preventDefault&&e.handleObj)return i=e.handleObj,T(e.delegateTarget).off(i.namespace?i.origType+"."+i.namespace:i.origType,i.selector,i.handler),this;if("object"==typeof e){for(r in e)this.off(r,t,e[r]);return this}return!1!==t&&"function"!=typeof t||(n=t,t=void 0),!1===n&&(n=Ce),this.each(function(){T.event.remove(this,e,n,t)})}});var $e=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,Ae=/<script|<style|<link/i,_e=/checked\s*(?:[^=]|=\s*.checked.)/i,Le=/^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;function Me(e,t){return _(e,"table")&&_(11!==t.nodeType?t:t.firstChild,"tr")&&T(e).children("tbody")[0]||e}function Ne(e){return e.type=(null!==e.getAttribute("type"))+"/"+e.type,e}function De(e){return"true/"===(e.type||"").slice(0,5)?e.type=e.type.slice(5):e.removeAttribute("type"),e}function Ie(e,t){var n,i,r,s,o,a,l,d;if(1===t.nodeType){if(Z.hasData(e)&&(s=Z.access(e),o=Z.set(t,s),d=s.events))for(r in delete o.handle,o.events={},d)for(n=0,i=d[r].length;n<i;n++)T.event.add(t,r,d[r][n]);J.hasData(e)&&(a=J.access(e),l=T.extend({},a),J.set(t,l))}}function Oe(e,t){var n=t.nodeName.toLowerCase();"input"===n&&pe.test(e.type)?t.checked=e.checked:"input"!==n&&"textarea"!==n||(t.defaultValue=e.defaultValue)}function je(e,t,n,i){t=d.apply([],t);var r,s,o,a,l,c,u=0,p=e.length,h=p-1,f=t[0],m=y(f);if(m||p>1&&"string"==typeof f&&!v.checkClone&&_e.test(f))return e.each(function(r){var s=e.eq(r);m&&(t[0]=f.call(this,r,s.html())),je(s,t,n,i)});if(p&&(s=(r=be(t,e[0].ownerDocument,!1,e,i)).firstChild,1===r.childNodes.length&&(r=s),s||i)){for(a=(o=T.map(ge(r,"script"),Ne)).length;u<p;u++)l=r,u!==h&&(l=T.clone(l,!0,!0),a&&T.merge(o,ge(l,"script"))),n.call(e[u],l,u);if(a)for(c=o[o.length-1].ownerDocument,T.map(o,De),u=0;u<a;u++)l=o[u],fe.test(l.type||"")&&!Z.access(l,"globalEval")&&T.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?T._evalUrl&&T._evalUrl(l.src):E(l.textContent.replace(Le,""),c,l))}return e}function Fe(e,t,n){for(var i,r=t?T.filter(t,e):e,s=0;null!=(i=r[s]);s++)n||1!==i.nodeType||T.cleanData(ge(i)),i.parentNode&&(n&&T.contains(i.ownerDocument,i)&&ve(ge(i,"script")),i.parentNode.removeChild(i));return e}T.extend({htmlPrefilter:function(e){return e.replace($e,"<$1></$2>")},clone:function(e,t,n){var i,r,s,o,a=e.cloneNode(!0),l=T.contains(e.ownerDocument,e);if(!(v.noCloneChecked||1!==e.nodeType&&11!==e.nodeType||T.isXMLDoc(e)))for(o=ge(a),i=0,r=(s=ge(e)).length;i<r;i++)Oe(s[i],o[i]);if(t)if(n)for(s=s||ge(e),o=o||ge(a),i=0,r=s.length;i<r;i++)Ie(s[i],o[i]);else Ie(e,a);return(o=ge(a,"script")).length>0&&ve(o,!l&&ge(e,"script")),a},cleanData:function(e){for(var t,n,i,r=T.event.special,s=0;void 0!==(n=e[s]);s++)if(K(n)){if(t=n[Z.expando]){if(t.events)for(i in t.events)r[i]?T.event.remove(n,i):T.removeEvent(n,i,t.handle);n[Z.expando]=void 0}n[J.expando]&&(n[J.expando]=void 0)}}}),T.fn.extend({detach:function(e){return Fe(this,e,!0)},remove:function(e){return Fe(this,e)},text:function(e){return U(this,function(e){return void 0===e?T.text(this):this.empty().each(function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=e)})},null,e,arguments.length)},append:function(){return je(this,arguments,function(e){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Me(this,e).appendChild(e)})},prepend:function(){return je(this,arguments,function(e){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var t=Me(this,e);t.insertBefore(e,t.firstChild)}})},before:function(){return je(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this)})},after:function(){return je(this,arguments,function(e){this.parentNode&&this.parentNode.insertBefore(e,this.nextSibling)})},empty:function(){for(var e,t=0;null!=(e=this[t]);t++)1===e.nodeType&&(T.cleanData(ge(e,!1)),e.textContent="");return this},clone:function(e,t){return e=null!=e&&e,t=null==t?e:t,this.map(function(){return T.clone(this,e,t)})},html:function(e){return U(this,function(e){var t=this[0]||{},n=0,i=this.length;if(void 0===e&&1===t.nodeType)return t.innerHTML;if("string"==typeof e&&!Ae.test(e)&&!me[(he.exec(e)||["",""])[1].toLowerCase()]){e=T.htmlPrefilter(e);try{for(;n<i;n++)1===(t=this[n]||{}).nodeType&&(T.cleanData(ge(t,!1)),t.innerHTML=e);t=0}catch(e){}}t&&this.empty().append(e)},null,e,arguments.length)},replaceWith:function(){var e=[];return je(this,arguments,function(t){var n=this.parentNode;T.inArray(this,e)<0&&(T.cleanData(ge(this)),n&&n.replaceChild(t,this))},e)}}),T.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},function(e,t){T.fn[e]=function(e){for(var n,i=[],r=T(e),s=r.length-1,o=0;o<=s;o++)n=o===s?this:this.clone(!0),T(r[o])[t](n),c.apply(i,n.get());return this.pushStack(i)}});var ze=new RegExp("^("+ie+")(?!px)[a-z%]+$","i"),He=function(e){var t=e.ownerDocument.defaultView;return t&&t.opener||(t=n),t.getComputedStyle(e)},Re=new RegExp(se.join("|"),"i");function qe(e,t,n){var i,r,s,o,a=e.style;return(n=n||He(e))&&(""!==(o=n.getPropertyValue(t)||n[t])||T.contains(e.ownerDocument,e)||(o=T.style(e,t)),!v.pixelBoxStyles()&&ze.test(o)&&Re.test(t)&&(i=a.width,r=a.minWidth,s=a.maxWidth,a.minWidth=a.maxWidth=a.width=o,o=n.width,a.width=i,a.minWidth=r,a.maxWidth=s)),void 0!==o?o+"":o}function Be(e,t){return{get:function(){if(!e())return(this.get=t).apply(this,arguments);delete this.get}}}!function(){function e(){if(c){d.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",we.appendChild(d).appendChild(c);var e=n.getComputedStyle(c);i="1%"!==e.top,l=12===t(e.marginLeft),c.style.right="60%",a=36===t(e.right),r=36===t(e.width),c.style.position="absolute",s=36===c.offsetWidth||"absolute",we.removeChild(d),c=null}}function t(e){return Math.round(parseFloat(e))}var i,r,s,a,l,d=o.createElement("div"),c=o.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",v.clearCloneStyle="content-box"===c.style.backgroundClip,T.extend(v,{boxSizingReliable:function(){return e(),r},pixelBoxStyles:function(){return e(),a},pixelPosition:function(){return e(),i},reliableMarginLeft:function(){return e(),l},scrollboxSize:function(){return e(),s}}))}();var Ve=/^(none|table(?!-c[ea]).+)/,Ue=/^--/,We={position:"absolute",visibility:"hidden",display:"block"},Ge={letterSpacing:"0",fontWeight:"400"},Xe=["Webkit","Moz","ms"],Ye=o.createElement("div").style;function Ke(e){var t=T.cssProps[e];return t||(t=T.cssProps[e]=function(e){if(e in Ye)return e;for(var t=e[0].toUpperCase()+e.slice(1),n=Xe.length;n--;)if((e=Xe[n]+t)in Ye)return e}(e)||e),t}function Qe(e,t,n){var i=re.exec(t);return i?Math.max(0,i[2]-(n||0))+(i[3]||"px"):t}function Ze(e,t,n,i,r,s){var o="width"===t?1:0,a=0,l=0;if(n===(i?"border":"content"))return 0;for(;o<4;o+=2)"margin"===n&&(l+=T.css(e,n+se[o],!0,r)),i?("content"===n&&(l-=T.css(e,"padding"+se[o],!0,r)),"margin"!==n&&(l-=T.css(e,"border"+se[o]+"Width",!0,r))):(l+=T.css(e,"padding"+se[o],!0,r),"padding"!==n?l+=T.css(e,"border"+se[o]+"Width",!0,r):a+=T.css(e,"border"+se[o]+"Width",!0,r));return!i&&s>=0&&(l+=Math.max(0,Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-s-l-a-.5))),l}function Je(e,t,n){var i=He(e),r=qe(e,t,i),s="border-box"===T.css(e,"boxSizing",!1,i),o=s;if(ze.test(r)){if(!n)return r;r="auto"}return o=o&&(v.boxSizingReliable()||r===e.style[t]),("auto"===r||!parseFloat(r)&&"inline"===T.css(e,"display",!1,i))&&(r=e["offset"+t[0].toUpperCase()+t.slice(1)],o=!0),(r=parseFloat(r)||0)+Ze(e,t,n||(s?"border":"content"),o,i,r)+"px"}function et(e,t,n,i,r){return new et.prototype.init(e,t,n,i,r)}T.extend({cssHooks:{opacity:{get:function(e,t){if(t){var n=qe(e,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(e,t,n,i){if(e&&3!==e.nodeType&&8!==e.nodeType&&e.style){var r,s,o,a=Y(t),l=Ue.test(t),d=e.style;if(l||(t=Ke(a)),o=T.cssHooks[t]||T.cssHooks[a],void 0===n)return o&&"get"in o&&void 0!==(r=o.get(e,!1,i))?r:d[t];"string"===(s=typeof n)&&(r=re.exec(n))&&r[1]&&(n=le(e,t,r),s="number"),null!=n&&n==n&&("number"===s&&(n+=r&&r[3]||(T.cssNumber[a]?"":"px")),v.clearCloneStyle||""!==n||0!==t.indexOf("background")||(d[t]="inherit"),o&&"set"in o&&void 0===(n=o.set(e,n,i))||(l?d.setProperty(t,n):d[t]=n))}},css:function(e,t,n,i){var r,s,o,a=Y(t);return Ue.test(t)||(t=Ke(a)),(o=T.cssHooks[t]||T.cssHooks[a])&&"get"in o&&(r=o.get(e,!0,n)),void 0===r&&(r=qe(e,t,i)),"normal"===r&&t in Ge&&(r=Ge[t]),""===n||n?(s=parseFloat(r),!0===n||isFinite(s)?s||0:r):r}}),T.each(["height","width"],function(e,t){T.cssHooks[t]={get:function(e,n,i){if(n)return!Ve.test(T.css(e,"display"))||e.getClientRects().length&&e.getBoundingClientRect().width?Je(e,t,i):ae(e,We,function(){return Je(e,t,i)})},set:function(e,n,i){var r,s=He(e),o="border-box"===T.css(e,"boxSizing",!1,s),a=i&&Ze(e,t,i,o,s);return o&&v.scrollboxSize()===s.position&&(a-=Math.ceil(e["offset"+t[0].toUpperCase()+t.slice(1)]-parseFloat(s[t])-Ze(e,t,"border",!1,s)-.5)),a&&(r=re.exec(n))&&"px"!==(r[3]||"px")&&(e.style[t]=n,n=T.css(e,t)),Qe(0,n,a)}}}),T.cssHooks.marginLeft=Be(v.reliableMarginLeft,function(e,t){if(t)return(parseFloat(qe(e,"marginLeft"))||e.getBoundingClientRect().left-ae(e,{marginLeft:0},function(){return e.getBoundingClientRect().left}))+"px"}),T.each({margin:"",padding:"",border:"Width"},function(e,t){T.cssHooks[e+t]={expand:function(n){for(var i=0,r={},s="string"==typeof n?n.split(" "):[n];i<4;i++)r[e+se[i]+t]=s[i]||s[i-2]||s[0];return r}},"margin"!==e&&(T.cssHooks[e+t].set=Qe)}),T.fn.extend({css:function(e,t){return U(this,function(e,t,n){var i,r,s={},o=0;if(Array.isArray(t)){for(i=He(e),r=t.length;o<r;o++)s[t[o]]=T.css(e,t[o],!1,i);return s}return void 0!==n?T.style(e,t,n):T.css(e,t)},e,t,arguments.length>1)}}),T.Tween=et,et.prototype={constructor:et,init:function(e,t,n,i,r,s){this.elem=e,this.prop=n,this.easing=r||T.easing._default,this.options=t,this.start=this.now=this.cur(),this.end=i,this.unit=s||(T.cssNumber[n]?"":"px")},cur:function(){var e=et.propHooks[this.prop];return e&&e.get?e.get(this):et.propHooks._default.get(this)},run:function(e){var t,n=et.propHooks[this.prop];return this.options.duration?this.pos=t=T.easing[this.easing](e,this.options.duration*e,0,1,this.options.duration):this.pos=t=e,this.now=(this.end-this.start)*t+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):et.propHooks._default.set(this),this}},et.prototype.init.prototype=et.prototype,et.propHooks={_default:{get:function(e){var t;return 1!==e.elem.nodeType||null!=e.elem[e.prop]&&null==e.elem.style[e.prop]?e.elem[e.prop]:(t=T.css(e.elem,e.prop,""))&&"auto"!==t?t:0},set:function(e){T.fx.step[e.prop]?T.fx.step[e.prop](e):1!==e.elem.nodeType||null==e.elem.style[T.cssProps[e.prop]]&&!T.cssHooks[e.prop]?e.elem[e.prop]=e.now:T.style(e.elem,e.prop,e.now+e.unit)}}},et.propHooks.scrollTop=et.propHooks.scrollLeft={set:function(e){e.elem.nodeType&&e.elem.parentNode&&(e.elem[e.prop]=e.now)}},T.easing={linear:function(e){return e},swing:function(e){return.5-Math.cos(e*Math.PI)/2},_default:"swing"},T.fx=et.prototype.init,T.fx.step={};var tt,nt,it=/^(?:toggle|show|hide)$/,rt=/queueHooks$/;function st(){nt&&(!1===o.hidden&&n.requestAnimationFrame?n.requestAnimationFrame(st):n.setTimeout(st,T.fx.interval),T.fx.tick())}function ot(){return n.setTimeout(function(){tt=void 0}),tt=Date.now()}function at(e,t){var n,i=0,r={height:e};for(t=t?1:0;i<4;i+=2-t)r["margin"+(n=se[i])]=r["padding"+n]=e;return t&&(r.opacity=r.width=e),r}function lt(e,t,n){for(var i,r=(dt.tweeners[t]||[]).concat(dt.tweeners["*"]),s=0,o=r.length;s<o;s++)if(i=r[s].call(n,t,e))return i}function dt(e,t,n){var i,r,s=0,o=dt.prefilters.length,a=T.Deferred().always(function(){delete l.elem}),l=function(){if(r)return!1;for(var t=tt||ot(),n=Math.max(0,d.startTime+d.duration-t),i=1-(n/d.duration||0),s=0,o=d.tweens.length;s<o;s++)d.tweens[s].run(i);return a.notifyWith(e,[d,i,n]),i<1&&o?n:(o||a.notifyWith(e,[d,1,0]),a.resolveWith(e,[d]),!1)},d=a.promise({elem:e,props:T.extend({},t),opts:T.extend(!0,{specialEasing:{},easing:T.easing._default},n),originalProperties:t,originalOptions:n,startTime:tt||ot(),duration:n.duration,tweens:[],createTween:function(t,n){var i=T.Tween(e,d.opts,t,n,d.opts.specialEasing[t]||d.opts.easing);return d.tweens.push(i),i},stop:function(t){var n=0,i=t?d.tweens.length:0;if(r)return this;for(r=!0;n<i;n++)d.tweens[n].run(1);return t?(a.notifyWith(e,[d,1,0]),a.resolveWith(e,[d,t])):a.rejectWith(e,[d,t]),this}}),c=d.props;for(!function(e,t){var n,i,r,s,o;for(n in e)if(r=t[i=Y(n)],s=e[n],Array.isArray(s)&&(r=s[1],s=e[n]=s[0]),n!==i&&(e[i]=s,delete e[n]),(o=T.cssHooks[i])&&"expand"in o)for(n in s=o.expand(s),delete e[i],s)n in e||(e[n]=s[n],t[n]=r);else t[i]=r}(c,d.opts.specialEasing);s<o;s++)if(i=dt.prefilters[s].call(d,e,c,d.opts))return y(i.stop)&&(T._queueHooks(d.elem,d.opts.queue).stop=i.stop.bind(i)),i;return T.map(c,lt,d),y(d.opts.start)&&d.opts.start.call(e,d),d.progress(d.opts.progress).done(d.opts.done,d.opts.complete).fail(d.opts.fail).always(d.opts.always),T.fx.timer(T.extend(l,{elem:e,anim:d,queue:d.opts.queue})),d}T.Animation=T.extend(dt,{tweeners:{"*":[function(e,t){var n=this.createTween(e,t);return le(n.elem,e,re.exec(t),n),n}]},tweener:function(e,t){y(e)?(t=e,e=["*"]):e=e.match(F);for(var n,i=0,r=e.length;i<r;i++)n=e[i],dt.tweeners[n]=dt.tweeners[n]||[],dt.tweeners[n].unshift(t)},prefilters:[function(e,t,n){var i,r,s,o,a,l,d,c,u="width"in t||"height"in t,p=this,h={},f=e.style,m=e.nodeType&&oe(e),g=Z.get(e,"fxshow");for(i in n.queue||(null==(o=T._queueHooks(e,"fx")).unqueued&&(o.unqueued=0,a=o.empty.fire,o.empty.fire=function(){o.unqueued||a()}),o.unqueued++,p.always(function(){p.always(function(){o.unqueued--,T.queue(e,"fx").length||o.empty.fire()})})),t)if(r=t[i],it.test(r)){if(delete t[i],s=s||"toggle"===r,r===(m?"hide":"show")){if("show"!==r||!g||void 0===g[i])continue;m=!0}h[i]=g&&g[i]||T.style(e,i)}if((l=!T.isEmptyObject(t))||!T.isEmptyObject(h))for(i in u&&1===e.nodeType&&(n.overflow=[f.overflow,f.overflowX,f.overflowY],null==(d=g&&g.display)&&(d=Z.get(e,"display")),"none"===(c=T.css(e,"display"))&&(d?c=d:(ue([e],!0),d=e.style.display||d,c=T.css(e,"display"),ue([e]))),("inline"===c||"inline-block"===c&&null!=d)&&"none"===T.css(e,"float")&&(l||(p.done(function(){f.display=d}),null==d&&(c=f.display,d="none"===c?"":c)),f.display="inline-block")),n.overflow&&(f.overflow="hidden",p.always(function(){f.overflow=n.overflow[0],f.overflowX=n.overflow[1],f.overflowY=n.overflow[2]})),l=!1,h)l||(g?"hidden"in g&&(m=g.hidden):g=Z.access(e,"fxshow",{display:d}),s&&(g.hidden=!m),m&&ue([e],!0),p.done(function(){for(i in m||ue([e]),Z.remove(e,"fxshow"),h)T.style(e,i,h[i])})),l=lt(m?g[i]:0,i,p),i in g||(g[i]=l.start,m&&(l.end=l.start,l.start=0))}],prefilter:function(e,t){t?dt.prefilters.unshift(e):dt.prefilters.push(e)}}),T.speed=function(e,t,n){var i=e&&"object"==typeof e?T.extend({},e):{complete:n||!n&&t||y(e)&&e,duration:e,easing:n&&t||t&&!y(t)&&t};return T.fx.off?i.duration=0:"number"!=typeof i.duration&&(i.duration in T.fx.speeds?i.duration=T.fx.speeds[i.duration]:i.duration=T.fx.speeds._default),null!=i.queue&&!0!==i.queue||(i.queue="fx"),i.old=i.complete,i.complete=function(){y(i.old)&&i.old.call(this),i.queue&&T.dequeue(this,i.queue)},i},T.fn.extend({fadeTo:function(e,t,n,i){return this.filter(oe).css("opacity",0).show().end().animate({opacity:t},e,n,i)},animate:function(e,t,n,i){var r=T.isEmptyObject(e),s=T.speed(t,n,i),o=function(){var t=dt(this,T.extend({},e),s);(r||Z.get(this,"finish"))&&t.stop(!0)};return o.finish=o,r||!1===s.queue?this.each(o):this.queue(s.queue,o)},stop:function(e,t,n){var i=function(e){var t=e.stop;delete e.stop,t(n)};return"string"!=typeof e&&(n=t,t=e,e=void 0),t&&!1!==e&&this.queue(e||"fx",[]),this.each(function(){var t=!0,r=null!=e&&e+"queueHooks",s=T.timers,o=Z.get(this);if(r)o[r]&&o[r].stop&&i(o[r]);else for(r in o)o[r]&&o[r].stop&&rt.test(r)&&i(o[r]);for(r=s.length;r--;)s[r].elem!==this||null!=e&&s[r].queue!==e||(s[r].anim.stop(n),t=!1,s.splice(r,1));!t&&n||T.dequeue(this,e)})},finish:function(e){return!1!==e&&(e=e||"fx"),this.each(function(){var t,n=Z.get(this),i=n[e+"queue"],r=n[e+"queueHooks"],s=T.timers,o=i?i.length:0;for(n.finish=!0,T.queue(this,e,[]),r&&r.stop&&r.stop.call(this,!0),t=s.length;t--;)s[t].elem===this&&s[t].queue===e&&(s[t].anim.stop(!0),s.splice(t,1));for(t=0;t<o;t++)i[t]&&i[t].finish&&i[t].finish.call(this);delete n.finish})}}),T.each(["toggle","show","hide"],function(e,t){var n=T.fn[t];T.fn[t]=function(e,i,r){return null==e||"boolean"==typeof e?n.apply(this,arguments):this.animate(at(t,!0),e,i,r)}}),T.each({slideDown:at("show"),slideUp:at("hide"),slideToggle:at("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},function(e,t){T.fn[e]=function(e,n,i){return this.animate(t,e,n,i)}}),T.timers=[],T.fx.tick=function(){var e,t=0,n=T.timers;for(tt=Date.now();t<n.length;t++)(e=n[t])()||n[t]!==e||n.splice(t--,1);n.length||T.fx.stop(),tt=void 0},T.fx.timer=function(e){T.timers.push(e),T.fx.start()},T.fx.interval=13,T.fx.start=function(){nt||(nt=!0,st())},T.fx.stop=function(){nt=null},T.fx.speeds={slow:600,fast:200,_default:400},T.fn.delay=function(e,t){return e=T.fx&&T.fx.speeds[e]||e,t=t||"fx",this.queue(t,function(t,i){var r=n.setTimeout(t,e);i.stop=function(){n.clearTimeout(r)}})},function(){var e=o.createElement("input"),t=o.createElement("select").appendChild(o.createElement("option"));e.type="checkbox",v.checkOn=""!==e.value,v.optSelected=t.selected,(e=o.createElement("input")).value="t",e.type="radio",v.radioValue="t"===e.value}();var ct,ut=T.expr.attrHandle;T.fn.extend({attr:function(e,t){return U(this,T.attr,e,t,arguments.length>1)},removeAttr:function(e){return this.each(function(){T.removeAttr(this,e)})}}),T.extend({attr:function(e,t,n){var i,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return void 0===e.getAttribute?T.prop(e,t,n):(1===s&&T.isXMLDoc(e)||(r=T.attrHooks[t.toLowerCase()]||(T.expr.match.bool.test(t)?ct:void 0)),void 0!==n?null===n?void T.removeAttr(e,t):r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:(e.setAttribute(t,n+""),n):r&&"get"in r&&null!==(i=r.get(e,t))?i:null==(i=T.find.attr(e,t))?void 0:i)},attrHooks:{type:{set:function(e,t){if(!v.radioValue&&"radio"===t&&_(e,"input")){var n=e.value;return e.setAttribute("type",t),n&&(e.value=n),t}}}},removeAttr:function(e,t){var n,i=0,r=t&&t.match(F);if(r&&1===e.nodeType)for(;n=r[i++];)e.removeAttribute(n)}}),ct={set:function(e,t,n){return!1===t?T.removeAttr(e,n):e.setAttribute(n,n),n}},T.each(T.expr.match.bool.source.match(/\w+/g),function(e,t){var n=ut[t]||T.find.attr;ut[t]=function(e,t,i){var r,s,o=t.toLowerCase();return i||(s=ut[o],ut[o]=r,r=null!=n(e,t,i)?o:null,ut[o]=s),r}});var pt=/^(?:input|select|textarea|button)$/i,ht=/^(?:a|area)$/i;function ft(e){return(e.match(F)||[]).join(" ")}function mt(e){return e.getAttribute&&e.getAttribute("class")||""}function gt(e){return Array.isArray(e)?e:"string"==typeof e&&e.match(F)||[]}T.fn.extend({prop:function(e,t){return U(this,T.prop,e,t,arguments.length>1)},removeProp:function(e){return this.each(function(){delete this[T.propFix[e]||e]})}}),T.extend({prop:function(e,t,n){var i,r,s=e.nodeType;if(3!==s&&8!==s&&2!==s)return 1===s&&T.isXMLDoc(e)||(t=T.propFix[t]||t,r=T.propHooks[t]),void 0!==n?r&&"set"in r&&void 0!==(i=r.set(e,n,t))?i:e[t]=n:r&&"get"in r&&null!==(i=r.get(e,t))?i:e[t]},propHooks:{tabIndex:{get:function(e){var t=T.find.attr(e,"tabindex");return t?parseInt(t,10):pt.test(e.nodeName)||ht.test(e.nodeName)&&e.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),v.optSelected||(T.propHooks.selected={get:function(e){var t=e.parentNode;return t&&t.parentNode&&t.parentNode.selectedIndex,null},set:function(e){var t=e.parentNode;t&&(t.selectedIndex,t.parentNode&&t.parentNode.selectedIndex)}}),T.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],function(){T.propFix[this.toLowerCase()]=this}),T.fn.extend({addClass:function(e){var t,n,i,r,s,o,a,l=0;if(y(e))return this.each(function(t){T(this).addClass(e.call(this,t,mt(this)))});if((t=gt(e)).length)for(;n=this[l++];)if(r=mt(n),i=1===n.nodeType&&" "+ft(r)+" "){for(o=0;s=t[o++];)i.indexOf(" "+s+" ")<0&&(i+=s+" ");r!==(a=ft(i))&&n.setAttribute("class",a)}return this},removeClass:function(e){var t,n,i,r,s,o,a,l=0;if(y(e))return this.each(function(t){T(this).removeClass(e.call(this,t,mt(this)))});if(!arguments.length)return this.attr("class","");if((t=gt(e)).length)for(;n=this[l++];)if(r=mt(n),i=1===n.nodeType&&" "+ft(r)+" "){for(o=0;s=t[o++];)for(;i.indexOf(" "+s+" ")>-1;)i=i.replace(" "+s+" "," ");r!==(a=ft(i))&&n.setAttribute("class",a)}return this},toggleClass:function(e,t){var n=typeof e,i="string"===n||Array.isArray(e);return"boolean"==typeof t&&i?t?this.addClass(e):this.removeClass(e):y(e)?this.each(function(n){T(this).toggleClass(e.call(this,n,mt(this),t),t)}):this.each(function(){var t,r,s,o;if(i)for(r=0,s=T(this),o=gt(e);t=o[r++];)s.hasClass(t)?s.removeClass(t):s.addClass(t);else void 0!==e&&"boolean"!==n||((t=mt(this))&&Z.set(this,"__className__",t),this.setAttribute&&this.setAttribute("class",t||!1===e?"":Z.get(this,"__className__")||""))})},hasClass:function(e){var t,n,i=0;for(t=" "+e+" ";n=this[i++];)if(1===n.nodeType&&(" "+ft(mt(n))+" ").indexOf(t)>-1)return!0;return!1}});var vt=/\r/g;T.fn.extend({val:function(e){var t,n,i,r=this[0];return arguments.length?(i=y(e),this.each(function(n){var r;1===this.nodeType&&(null==(r=i?e.call(this,n,T(this).val()):e)?r="":"number"==typeof r?r+="":Array.isArray(r)&&(r=T.map(r,function(e){return null==e?"":e+""})),(t=T.valHooks[this.type]||T.valHooks[this.nodeName.toLowerCase()])&&"set"in t&&void 0!==t.set(this,r,"value")||(this.value=r))})):r?(t=T.valHooks[r.type]||T.valHooks[r.nodeName.toLowerCase()])&&"get"in t&&void 0!==(n=t.get(r,"value"))?n:"string"==typeof(n=r.value)?n.replace(vt,""):null==n?"":n:void 0}}),T.extend({valHooks:{option:{get:function(e){var t=T.find.attr(e,"value");return null!=t?t:ft(T.text(e))}},select:{get:function(e){var t,n,i,r=e.options,s=e.selectedIndex,o="select-one"===e.type,a=o?null:[],l=o?s+1:r.length;for(i=s<0?l:o?s:0;i<l;i++)if(((n=r[i]).selected||i===s)&&!n.disabled&&(!n.parentNode.disabled||!_(n.parentNode,"optgroup"))){if(t=T(n).val(),o)return t;a.push(t)}return a},set:function(e,t){for(var n,i,r=e.options,s=T.makeArray(t),o=r.length;o--;)((i=r[o]).selected=T.inArray(T.valHooks.option.get(i),s)>-1)&&(n=!0);return n||(e.selectedIndex=-1),s}}}}),T.each(["radio","checkbox"],function(){T.valHooks[this]={set:function(e,t){if(Array.isArray(t))return e.checked=T.inArray(T(e).val(),t)>-1}},v.checkOn||(T.valHooks[this].get=function(e){return null===e.getAttribute("value")?"on":e.value})}),v.focusin="onfocusin"in n;var yt=/^(?:focusinfocus|focusoutblur)$/,bt=function(e){e.stopPropagation()};T.extend(T.event,{trigger:function(e,t,i,r){var s,a,l,d,c,u,p,h,m=[i||o],g=f.call(e,"type")?e.type:e,v=f.call(e,"namespace")?e.namespace.split("."):[];if(a=h=l=i=i||o,3!==i.nodeType&&8!==i.nodeType&&!yt.test(g+T.event.triggered)&&(g.indexOf(".")>-1&&(g=(v=g.split(".")).shift(),v.sort()),c=g.indexOf(":")<0&&"on"+g,(e=e[T.expando]?e:new T.Event(g,"object"==typeof e&&e)).isTrigger=r?2:3,e.namespace=v.join("."),e.rnamespace=e.namespace?new RegExp("(^|\\.)"+v.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,e.result=void 0,e.target||(e.target=i),t=null==t?[e]:T.makeArray(t,[e]),p=T.event.special[g]||{},r||!p.trigger||!1!==p.trigger.apply(i,t))){if(!r&&!p.noBubble&&!b(i)){for(d=p.delegateType||g,yt.test(d+g)||(a=a.parentNode);a;a=a.parentNode)m.push(a),l=a;l===(i.ownerDocument||o)&&m.push(l.defaultView||l.parentWindow||n)}for(s=0;(a=m[s++])&&!e.isPropagationStopped();)h=a,e.type=s>1?d:p.bindType||g,(u=(Z.get(a,"events")||{})[e.type]&&Z.get(a,"handle"))&&u.apply(a,t),(u=c&&a[c])&&u.apply&&K(a)&&(e.result=u.apply(a,t),!1===e.result&&e.preventDefault());return e.type=g,r||e.isDefaultPrevented()||p._default&&!1!==p._default.apply(m.pop(),t)||!K(i)||c&&y(i[g])&&!b(i)&&((l=i[c])&&(i[c]=null),T.event.triggered=g,e.isPropagationStopped()&&h.addEventListener(g,bt),i[g](),e.isPropagationStopped()&&h.removeEventListener(g,bt),T.event.triggered=void 0,l&&(i[c]=l)),e.result}},simulate:function(e,t,n){var i=T.extend(new T.Event,n,{type:e,isSimulated:!0});T.event.trigger(i,null,t)}}),T.fn.extend({trigger:function(e,t){return this.each(function(){T.event.trigger(e,t,this)})},triggerHandler:function(e,t){var n=this[0];if(n)return T.event.trigger(e,t,n,!0)}}),v.focusin||T.each({focus:"focusin",blur:"focusout"},function(e,t){var n=function(e){T.event.simulate(t,e.target,T.event.fix(e))};T.event.special[t]={setup:function(){var i=this.ownerDocument||this,r=Z.access(i,t);r||i.addEventListener(e,n,!0),Z.access(i,t,(r||0)+1)},teardown:function(){var i=this.ownerDocument||this,r=Z.access(i,t)-1;r?Z.access(i,t,r):(i.removeEventListener(e,n,!0),Z.remove(i,t))}}});var wt=n.location,Et=Date.now(),xt=/\?/;T.parseXML=function(e){var t;if(!e||"string"!=typeof e)return null;try{t=(new n.DOMParser).parseFromString(e,"text/xml")}catch(e){t=void 0}return t&&!t.getElementsByTagName("parsererror").length||T.error("Invalid XML: "+e),t};var Tt=/\[\]$/,St=/\r?\n/g,Ct=/^(?:submit|button|image|reset|file)$/i,kt=/^(?:input|select|textarea|keygen)/i;function Pt(e,t,n,i){var r;if(Array.isArray(t))T.each(t,function(t,r){n||Tt.test(e)?i(e,r):Pt(e+"["+("object"==typeof r&&null!=r?t:"")+"]",r,n,i)});else if(n||"object"!==x(t))i(e,t);else for(r in t)Pt(e+"["+r+"]",t[r],n,i)}T.param=function(e,t){var n,i=[],r=function(e,t){var n=y(t)?t():t;i[i.length]=encodeURIComponent(e)+"="+encodeURIComponent(null==n?"":n)};if(Array.isArray(e)||e.jquery&&!T.isPlainObject(e))T.each(e,function(){r(this.name,this.value)});else for(n in e)Pt(n,e[n],t,r);return i.join("&")},T.fn.extend({serialize:function(){return T.param(this.serializeArray())},serializeArray:function(){return this.map(function(){var e=T.prop(this,"elements");return e?T.makeArray(e):this}).filter(function(){var e=this.type;return this.name&&!T(this).is(":disabled")&&kt.test(this.nodeName)&&!Ct.test(e)&&(this.checked||!pe.test(e))}).map(function(e,t){var n=T(this).val();return null==n?null:Array.isArray(n)?T.map(n,function(e){return{name:t.name,value:e.replace(St,"\r\n")}}):{name:t.name,value:n.replace(St,"\r\n")}}).get()}});var $t=/%20/g,At=/#.*$/,_t=/([?&])_=[^&]*/,Lt=/^(.*?):[ \t]*([^\r\n]*)$/gm,Mt=/^(?:GET|HEAD)$/,Nt=/^\/\//,Dt={},It={},Ot="*/".concat("*"),jt=o.createElement("a");function Ft(e){return function(t,n){"string"!=typeof t&&(n=t,t="*");var i,r=0,s=t.toLowerCase().match(F)||[];if(y(n))for(;i=s[r++];)"+"===i[0]?(i=i.slice(1)||"*",(e[i]=e[i]||[]).unshift(n)):(e[i]=e[i]||[]).push(n)}}function zt(e,t,n,i){var r={},s=e===It;function o(a){var l;return r[a]=!0,T.each(e[a]||[],function(e,a){var d=a(t,n,i);return"string"!=typeof d||s||r[d]?s?!(l=d):void 0:(t.dataTypes.unshift(d),o(d),!1)}),l}return o(t.dataTypes[0])||!r["*"]&&o("*")}function Ht(e,t){var n,i,r=T.ajaxSettings.flatOptions||{};for(n in t)void 0!==t[n]&&((r[n]?e:i||(i={}))[n]=t[n]);return i&&T.extend(!0,e,i),e}jt.href=wt.href,T.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:wt.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(wt.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ot,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":T.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(e,t){return t?Ht(Ht(e,T.ajaxSettings),t):Ht(T.ajaxSettings,e)},ajaxPrefilter:Ft(Dt),ajaxTransport:Ft(It),ajax:function(e,t){"object"==typeof e&&(t=e,e=void 0),t=t||{};var i,r,s,a,l,d,c,u,p,h,f=T.ajaxSetup({},t),m=f.context||f,g=f.context&&(m.nodeType||m.jquery)?T(m):T.event,v=T.Deferred(),y=T.Callbacks("once memory"),b=f.statusCode||{},w={},E={},x="canceled",S={readyState:0,getResponseHeader:function(e){var t;if(c){if(!a)for(a={};t=Lt.exec(s);)a[t[1].toLowerCase()]=t[2];t=a[e.toLowerCase()]}return null==t?null:t},getAllResponseHeaders:function(){return c?s:null},setRequestHeader:function(e,t){return null==c&&(e=E[e.toLowerCase()]=E[e.toLowerCase()]||e,w[e]=t),this},overrideMimeType:function(e){return null==c&&(f.mimeType=e),this},statusCode:function(e){var t;if(e)if(c)S.always(e[S.status]);else for(t in e)b[t]=[b[t],e[t]];return this},abort:function(e){var t=e||x;return i&&i.abort(t),C(0,t),this}};if(v.promise(S),f.url=((e||f.url||wt.href)+"").replace(Nt,wt.protocol+"//"),f.type=t.method||t.type||f.method||f.type,f.dataTypes=(f.dataType||"*").toLowerCase().match(F)||[""],null==f.crossDomain){d=o.createElement("a");try{d.href=f.url,d.href=d.href,f.crossDomain=jt.protocol+"//"+jt.host!=d.protocol+"//"+d.host}catch(e){f.crossDomain=!0}}if(f.data&&f.processData&&"string"!=typeof f.data&&(f.data=T.param(f.data,f.traditional)),zt(Dt,f,t,S),c)return S;for(p in(u=T.event&&f.global)&&0==T.active++&&T.event.trigger("ajaxStart"),f.type=f.type.toUpperCase(),f.hasContent=!Mt.test(f.type),r=f.url.replace(At,""),f.hasContent?f.data&&f.processData&&0===(f.contentType||"").indexOf("application/x-www-form-urlencoded")&&(f.data=f.data.replace($t,"+")):(h=f.url.slice(r.length),f.data&&(f.processData||"string"==typeof f.data)&&(r+=(xt.test(r)?"&":"?")+f.data,delete f.data),!1===f.cache&&(r=r.replace(_t,"$1"),h=(xt.test(r)?"&":"?")+"_="+Et+++h),f.url=r+h),f.ifModified&&(T.lastModified[r]&&S.setRequestHeader("If-Modified-Since",T.lastModified[r]),T.etag[r]&&S.setRequestHeader("If-None-Match",T.etag[r])),(f.data&&f.hasContent&&!1!==f.contentType||t.contentType)&&S.setRequestHeader("Content-Type",f.contentType),S.setRequestHeader("Accept",f.dataTypes[0]&&f.accepts[f.dataTypes[0]]?f.accepts[f.dataTypes[0]]+("*"!==f.dataTypes[0]?", "+Ot+"; q=0.01":""):f.accepts["*"]),f.headers)S.setRequestHeader(p,f.headers[p]);if(f.beforeSend&&(!1===f.beforeSend.call(m,S,f)||c))return S.abort();if(x="abort",y.add(f.complete),S.done(f.success),S.fail(f.error),i=zt(It,f,t,S)){if(S.readyState=1,u&&g.trigger("ajaxSend",[S,f]),c)return S;f.async&&f.timeout>0&&(l=n.setTimeout(function(){S.abort("timeout")},f.timeout));try{c=!1,i.send(w,C)}catch(e){if(c)throw e;C(-1,e)}}else C(-1,"No Transport");function C(e,t,o,a){var d,p,h,w,E,x=t;c||(c=!0,l&&n.clearTimeout(l),i=void 0,s=a||"",S.readyState=e>0?4:0,d=e>=200&&e<300||304===e,o&&(w=function(e,t,n){for(var i,r,s,o,a=e.contents,l=e.dataTypes;"*"===l[0];)l.shift(),void 0===i&&(i=e.mimeType||t.getResponseHeader("Content-Type"));if(i)for(r in a)if(a[r]&&a[r].test(i)){l.unshift(r);break}if(l[0]in n)s=l[0];else{for(r in n){if(!l[0]||e.converters[r+" "+l[0]]){s=r;break}o||(o=r)}s=s||o}if(s)return s!==l[0]&&l.unshift(s),n[s]}(f,S,o)),w=function(e,t,n,i){var r,s,o,a,l,d={},c=e.dataTypes.slice();if(c[1])for(o in e.converters)d[o.toLowerCase()]=e.converters[o];for(s=c.shift();s;)if(e.responseFields[s]&&(n[e.responseFields[s]]=t),!l&&i&&e.dataFilter&&(t=e.dataFilter(t,e.dataType)),l=s,s=c.shift())if("*"===s)s=l;else if("*"!==l&&l!==s){if(!(o=d[l+" "+s]||d["* "+s]))for(r in d)if((a=r.split(" "))[1]===s&&(o=d[l+" "+a[0]]||d["* "+a[0]])){!0===o?o=d[r]:!0!==d[r]&&(s=a[0],c.unshift(a[1]));break}if(!0!==o)if(o&&e.throws)t=o(t);else try{t=o(t)}catch(e){return{state:"parsererror",error:o?e:"No conversion from "+l+" to "+s}}}return{state:"success",data:t}}(f,w,S,d),d?(f.ifModified&&((E=S.getResponseHeader("Last-Modified"))&&(T.lastModified[r]=E),(E=S.getResponseHeader("etag"))&&(T.etag[r]=E)),204===e||"HEAD"===f.type?x="nocontent":304===e?x="notmodified":(x=w.state,p=w.data,d=!(h=w.error))):(h=x,!e&&x||(x="error",e<0&&(e=0))),S.status=e,S.statusText=(t||x)+"",d?v.resolveWith(m,[p,x,S]):v.rejectWith(m,[S,x,h]),S.statusCode(b),b=void 0,u&&g.trigger(d?"ajaxSuccess":"ajaxError",[S,f,d?p:h]),y.fireWith(m,[S,x]),u&&(g.trigger("ajaxComplete",[S,f]),--T.active||T.event.trigger("ajaxStop")))}return S},getJSON:function(e,t,n){return T.get(e,t,n,"json")},getScript:function(e,t){return T.get(e,void 0,t,"script")}}),T.each(["get","post"],function(e,t){T[t]=function(e,n,i,r){return y(n)&&(r=r||i,i=n,n=void 0),T.ajax(T.extend({url:e,type:t,dataType:r,data:n,success:i},T.isPlainObject(e)&&e))}}),T._evalUrl=function(e){return T.ajax({url:e,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,throws:!0})},T.fn.extend({wrapAll:function(e){var t;return this[0]&&(y(e)&&(e=e.call(this[0])),t=T(e,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&t.insertBefore(this[0]),t.map(function(){for(var e=this;e.firstElementChild;)e=e.firstElementChild;return e}).append(this)),this},wrapInner:function(e){return y(e)?this.each(function(t){T(this).wrapInner(e.call(this,t))}):this.each(function(){var t=T(this),n=t.contents();n.length?n.wrapAll(e):t.append(e)})},wrap:function(e){var t=y(e);return this.each(function(n){T(this).wrapAll(t?e.call(this,n):e)})},unwrap:function(e){return this.parent(e).not("body").each(function(){T(this).replaceWith(this.childNodes)}),this}}),T.expr.pseudos.hidden=function(e){return!T.expr.pseudos.visible(e)},T.expr.pseudos.visible=function(e){return!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length)},T.ajaxSettings.xhr=function(){try{return new n.XMLHttpRequest}catch(e){}};var Rt={0:200,1223:204},qt=T.ajaxSettings.xhr();v.cors=!!qt&&"withCredentials"in qt,v.ajax=qt=!!qt,T.ajaxTransport(function(e){var t,i;if(v.cors||qt&&!e.crossDomain)return{send:function(r,s){var o,a=e.xhr();if(a.open(e.type,e.url,e.async,e.username,e.password),e.xhrFields)for(o in e.xhrFields)a[o]=e.xhrFields[o];for(o in e.mimeType&&a.overrideMimeType&&a.overrideMimeType(e.mimeType),e.crossDomain||r["X-Requested-With"]||(r["X-Requested-With"]="XMLHttpRequest"),r)a.setRequestHeader(o,r[o]);t=function(e){return function(){t&&(t=i=a.onload=a.onerror=a.onabort=a.ontimeout=a.onreadystatechange=null,"abort"===e?a.abort():"error"===e?"number"!=typeof a.status?s(0,"error"):s(a.status,a.statusText):s(Rt[a.status]||a.status,a.statusText,"text"!==(a.responseType||"text")||"string"!=typeof a.responseText?{binary:a.response}:{text:a.responseText},a.getAllResponseHeaders()))}},a.onload=t(),i=a.onerror=a.ontimeout=t("error"),void 0!==a.onabort?a.onabort=i:a.onreadystatechange=function(){4===a.readyState&&n.setTimeout(function(){t&&i()})},t=t("abort");try{a.send(e.hasContent&&e.data||null)}catch(e){if(t)throw e}},abort:function(){t&&t()}}}),T.ajaxPrefilter(function(e){e.crossDomain&&(e.contents.script=!1)}),T.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(e){return T.globalEval(e),e}}}),T.ajaxPrefilter("script",function(e){void 0===e.cache&&(e.cache=!1),e.crossDomain&&(e.type="GET")}),T.ajaxTransport("script",function(e){var t,n;if(e.crossDomain)return{send:function(i,r){t=T("<script>").prop({charset:e.scriptCharset,src:e.url}).on("load error",n=function(e){t.remove(),n=null,e&&r("error"===e.type?404:200,e.type)}),o.head.appendChild(t[0])},abort:function(){n&&n()}}});var Bt=[],Vt=/(=)\?(?=&|$)|\?\?/;T.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var e=Bt.pop()||T.expando+"_"+Et++;return this[e]=!0,e}}),T.ajaxPrefilter("json jsonp",function(e,t,i){var r,s,o,a=!1!==e.jsonp&&(Vt.test(e.url)?"url":"string"==typeof e.data&&0===(e.contentType||"").indexOf("application/x-www-form-urlencoded")&&Vt.test(e.data)&&"data");if(a||"jsonp"===e.dataTypes[0])return r=e.jsonpCallback=y(e.jsonpCallback)?e.jsonpCallback():e.jsonpCallback,a?e[a]=e[a].replace(Vt,"$1"+r):!1!==e.jsonp&&(e.url+=(xt.test(e.url)?"&":"?")+e.jsonp+"="+r),e.converters["script json"]=function(){return o||T.error(r+" was not called"),o[0]},e.dataTypes[0]="json",s=n[r],n[r]=function(){o=arguments},i.always(function(){void 0===s?T(n).removeProp(r):n[r]=s,e[r]&&(e.jsonpCallback=t.jsonpCallback,Bt.push(r)),o&&y(s)&&s(o[0]),o=s=void 0}),"script"}),v.createHTMLDocument=function(){var e=o.implementation.createHTMLDocument("").body;return e.innerHTML="<form></form><form></form>",2===e.childNodes.length}(),T.parseHTML=function(e,t,n){return"string"!=typeof e?[]:("boolean"==typeof t&&(n=t,t=!1),t||(v.createHTMLDocument?((i=(t=o.implementation.createHTMLDocument("")).createElement("base")).href=o.location.href,t.head.appendChild(i)):t=o),r=L.exec(e),s=!n&&[],r?[t.createElement(r[1])]:(r=be([e],t,s),s&&s.length&&T(s).remove(),T.merge([],r.childNodes)));var i,r,s},T.fn.load=function(e,t,n){var i,r,s,o=this,a=e.indexOf(" ");return a>-1&&(i=ft(e.slice(a)),e=e.slice(0,a)),y(t)?(n=t,t=void 0):t&&"object"==typeof t&&(r="POST"),o.length>0&&T.ajax({url:e,type:r||"GET",dataType:"html",data:t}).done(function(e){s=arguments,o.html(i?T("<div>").append(T.parseHTML(e)).find(i):e)}).always(n&&function(e,t){o.each(function(){n.apply(this,s||[e.responseText,t,e])})}),this},T.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],function(e,t){T.fn[t]=function(e){return this.on(t,e)}}),T.expr.pseudos.animated=function(e){return T.grep(T.timers,function(t){return e===t.elem}).length},T.offset={setOffset:function(e,t,n){var i,r,s,o,a,l,d=T.css(e,"position"),c=T(e),u={};"static"===d&&(e.style.position="relative"),a=c.offset(),s=T.css(e,"top"),l=T.css(e,"left"),("absolute"===d||"fixed"===d)&&(s+l).indexOf("auto")>-1?(o=(i=c.position()).top,r=i.left):(o=parseFloat(s)||0,r=parseFloat(l)||0),y(t)&&(t=t.call(e,n,T.extend({},a))),null!=t.top&&(u.top=t.top-a.top+o),null!=t.left&&(u.left=t.left-a.left+r),"using"in t?t.using.call(e,u):c.css(u)}},T.fn.extend({offset:function(e){if(arguments.length)return void 0===e?this:this.each(function(t){T.offset.setOffset(this,e,t)});var t,n,i=this[0];return i?i.getClientRects().length?(t=i.getBoundingClientRect(),n=i.ownerDocument.defaultView,{top:t.top+n.pageYOffset,left:t.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var e,t,n,i=this[0],r={top:0,left:0};if("fixed"===T.css(i,"position"))t=i.getBoundingClientRect();else{for(t=this.offset(),n=i.ownerDocument,e=i.offsetParent||n.documentElement;e&&(e===n.body||e===n.documentElement)&&"static"===T.css(e,"position");)e=e.parentNode;e&&e!==i&&1===e.nodeType&&((r=T(e).offset()).top+=T.css(e,"borderTopWidth",!0),r.left+=T.css(e,"borderLeftWidth",!0))}return{top:t.top-r.top-T.css(i,"marginTop",!0),left:t.left-r.left-T.css(i,"marginLeft",!0)}}},offsetParent:function(){return this.map(function(){for(var e=this.offsetParent;e&&"static"===T.css(e,"position");)e=e.offsetParent;return e||we})}}),T.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},function(e,t){var n="pageYOffset"===t;T.fn[e]=function(i){return U(this,function(e,i,r){var s;if(b(e)?s=e:9===e.nodeType&&(s=e.defaultView),void 0===r)return s?s[t]:e[i];s?s.scrollTo(n?s.pageXOffset:r,n?r:s.pageYOffset):e[i]=r},e,i,arguments.length)}}),T.each(["top","left"],function(e,t){T.cssHooks[t]=Be(v.pixelPosition,function(e,n){if(n)return n=qe(e,t),ze.test(n)?T(e).position()[t]+"px":n})}),T.each({Height:"height",Width:"width"},function(e,t){T.each({padding:"inner"+e,content:t,"":"outer"+e},function(n,i){T.fn[i]=function(r,s){var o=arguments.length&&(n||"boolean"!=typeof r),a=n||(!0===r||!0===s?"margin":"border");return U(this,function(t,n,r){var s;return b(t)?0===i.indexOf("outer")?t["inner"+e]:t.document.documentElement["client"+e]:9===t.nodeType?(s=t.documentElement,Math.max(t.body["scroll"+e],s["scroll"+e],t.body["offset"+e],s["offset"+e],s["client"+e])):void 0===r?T.css(t,n,a):T.style(t,n,r,a)},t,o?r:void 0,o)}})}),T.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),function(e,t){T.fn[t]=function(e,n){return arguments.length>0?this.on(t,null,e,n):this.trigger(t)}}),T.fn.extend({hover:function(e,t){return this.mouseenter(e).mouseleave(t||e)}}),T.fn.extend({bind:function(e,t,n){return this.on(e,null,t,n)},unbind:function(e,t){return this.off(e,null,t)},delegate:function(e,t,n,i){return this.on(t,e,n,i)},undelegate:function(e,t,n){return 1===arguments.length?this.off(e,"**"):this.off(t,e||"**",n)}}),T.proxy=function(e,t){var n,i,r;if("string"==typeof t&&(n=e[t],t=e,e=n),y(e))return i=l.call(arguments,2),(r=function(){return e.apply(t||this,i.concat(l.call(arguments)))}).guid=e.guid=e.guid||T.guid++,r},T.holdReady=function(e){e?T.readyWait++:T.ready(!0)},T.isArray=Array.isArray,T.parseJSON=JSON.parse,T.nodeName=_,T.isFunction=y,T.isWindow=b,T.camelCase=Y,T.type=x,T.now=Date.now,T.isNumeric=function(e){var t=T.type(e);return("number"===t||"string"===t)&&!isNaN(e-parseFloat(e))},void 0===(i=function(){return T}.apply(t,[]))||(e.exports=i);var Ut=n.jQuery,Wt=n.$;return T.noConflict=function(e){return n.$===T&&(n.$=Wt),e&&n.jQuery===T&&(n.jQuery=Ut),T},r||(n.jQuery=n.$=T),T})},function(e,t,n){n(3),e.exports=n(18)},function(e,t,n){window.$=window.jQuery=n(1),window.Swiper=n(21).default,n(4),n(5),n(6),n(11),n(12),n(13),n(14),n(15),n(16),n(17)},function(e,t){
/*!
 * Bootstrap v3.3.7 (http://getbootstrap.com)
 * Copyright 2011-2016 Twitter, Inc.
 * Licensed under the MIT license
 */
if("undefined"==typeof jQuery)throw new Error("Bootstrap's JavaScript requires jQuery");!function(e){"use strict";var t=e.fn.jquery.split(" ")[0].split(".");if(t[0]<2&&t[1]<9||1==t[0]&&9==t[1]&&t[2]<1||t[0]>3)throw new Error("Bootstrap's JavaScript requires jQuery version 1.9.1 or higher, but lower than version 4")}(jQuery),function(e){"use strict";e.fn.emulateTransitionEnd=function(t){var n=!1,i=this;e(this).one("bsTransitionEnd",function(){n=!0});return setTimeout(function(){n||e(i).trigger(e.support.transition.end)},t),this},e(function(){e.support.transition=function(){var e=document.createElement("bootstrap"),t={WebkitTransition:"webkitTransitionEnd",MozTransition:"transitionend",OTransition:"oTransitionEnd otransitionend",transition:"transitionend"};for(var n in t)if(void 0!==e.style[n])return{end:t[n]};return!1}(),e.support.transition&&(e.event.special.bsTransitionEnd={bindType:e.support.transition.end,delegateType:e.support.transition.end,handle:function(t){if(e(t.target).is(this))return t.handleObj.handler.apply(this,arguments)}})})}(jQuery),function(e){"use strict";var t='[data-dismiss="alert"]',n=function(n){e(n).on("click",t,this.close)};n.VERSION="3.3.7",n.TRANSITION_DURATION=150,n.prototype.close=function(t){var i=e(this),r=i.attr("data-target");r||(r=(r=i.attr("href"))&&r.replace(/.*(?=#[^\s]*$)/,""));var s=e("#"===r?[]:r);function o(){s.detach().trigger("closed.bs.alert").remove()}t&&t.preventDefault(),s.length||(s=i.closest(".alert")),s.trigger(t=e.Event("close.bs.alert")),t.isDefaultPrevented()||(s.removeClass("in"),e.support.transition&&s.hasClass("fade")?s.one("bsTransitionEnd",o).emulateTransitionEnd(n.TRANSITION_DURATION):o())};var i=e.fn.alert;e.fn.alert=function(t){return this.each(function(){var i=e(this),r=i.data("bs.alert");r||i.data("bs.alert",r=new n(this)),"string"==typeof t&&r[t].call(i)})},e.fn.alert.Constructor=n,e.fn.alert.noConflict=function(){return e.fn.alert=i,this},e(document).on("click.bs.alert.data-api",t,n.prototype.close)}(jQuery),function(e){"use strict";var t=function(n,i){this.$element=e(n),this.options=e.extend({},t.DEFAULTS,i),this.isLoading=!1};function n(n){return this.each(function(){var i=e(this),r=i.data("bs.button"),s="object"==typeof n&&n;r||i.data("bs.button",r=new t(this,s)),"toggle"==n?r.toggle():n&&r.setState(n)})}t.VERSION="3.3.7",t.DEFAULTS={loadingText:"loading..."},t.prototype.setState=function(t){var n="disabled",i=this.$element,r=i.is("input")?"val":"html",s=i.data();t+="Text",null==s.resetText&&i.data("resetText",i[r]()),setTimeout(e.proxy(function(){i[r](null==s[t]?this.options[t]:s[t]),"loadingText"==t?(this.isLoading=!0,i.addClass(n).attr(n,n).prop(n,!0)):this.isLoading&&(this.isLoading=!1,i.removeClass(n).removeAttr(n).prop(n,!1))},this),0)},t.prototype.toggle=function(){var e=!0,t=this.$element.closest('[data-toggle="buttons"]');if(t.length){var n=this.$element.find("input");"radio"==n.prop("type")?(n.prop("checked")&&(e=!1),t.find(".active").removeClass("active"),this.$element.addClass("active")):"checkbox"==n.prop("type")&&(n.prop("checked")!==this.$element.hasClass("active")&&(e=!1),this.$element.toggleClass("active")),n.prop("checked",this.$element.hasClass("active")),e&&n.trigger("change")}else this.$element.attr("aria-pressed",!this.$element.hasClass("active")),this.$element.toggleClass("active")};var i=e.fn.button;e.fn.button=n,e.fn.button.Constructor=t,e.fn.button.noConflict=function(){return e.fn.button=i,this},e(document).on("click.bs.button.data-api",'[data-toggle^="button"]',function(t){var i=e(t.target).closest(".btn");n.call(i,"toggle"),e(t.target).is('input[type="radio"], input[type="checkbox"]')||(t.preventDefault(),i.is("input,button")?i.trigger("focus"):i.find("input:visible,button:visible").first().trigger("focus"))}).on("focus.bs.button.data-api blur.bs.button.data-api",'[data-toggle^="button"]',function(t){e(t.target).closest(".btn").toggleClass("focus",/^focus(in)?$/.test(t.type))})}(jQuery),function(e){"use strict";var t=function(t,n){this.$element=e(t),this.$indicators=this.$element.find(".carousel-indicators"),this.options=n,this.paused=null,this.sliding=null,this.interval=null,this.$active=null,this.$items=null,this.options.keyboard&&this.$element.on("keydown.bs.carousel",e.proxy(this.keydown,this)),"hover"==this.options.pause&&!("ontouchstart"in document.documentElement)&&this.$element.on("mouseenter.bs.carousel",e.proxy(this.pause,this)).on("mouseleave.bs.carousel",e.proxy(this.cycle,this))};function n(n){return this.each(function(){var i=e(this),r=i.data("bs.carousel"),s=e.extend({},t.DEFAULTS,i.data(),"object"==typeof n&&n),o="string"==typeof n?n:s.slide;r||i.data("bs.carousel",r=new t(this,s)),"number"==typeof n?r.to(n):o?r[o]():s.interval&&r.pause().cycle()})}t.VERSION="3.3.7",t.TRANSITION_DURATION=600,t.DEFAULTS={interval:5e3,pause:"hover",wrap:!0,keyboard:!0},t.prototype.keydown=function(e){if(!/input|textarea/i.test(e.target.tagName)){switch(e.which){case 37:this.prev();break;case 39:this.next();break;default:return}e.preventDefault()}},t.prototype.cycle=function(t){return t||(this.paused=!1),this.interval&&clearInterval(this.interval),this.options.interval&&!this.paused&&(this.interval=setInterval(e.proxy(this.next,this),this.options.interval)),this},t.prototype.getItemIndex=function(e){return this.$items=e.parent().children(".item"),this.$items.index(e||this.$active)},t.prototype.getItemForDirection=function(e,t){var n=this.getItemIndex(t);if(("prev"==e&&0===n||"next"==e&&n==this.$items.length-1)&&!this.options.wrap)return t;var i=(n+("prev"==e?-1:1))%this.$items.length;return this.$items.eq(i)},t.prototype.to=function(e){var t=this,n=this.getItemIndex(this.$active=this.$element.find(".item.active"));if(!(e>this.$items.length-1||e<0))return this.sliding?this.$element.one("slid.bs.carousel",function(){t.to(e)}):n==e?this.pause().cycle():this.slide(e>n?"next":"prev",this.$items.eq(e))},t.prototype.pause=function(t){return t||(this.paused=!0),this.$element.find(".next, .prev").length&&e.support.transition&&(this.$element.trigger(e.support.transition.end),this.cycle(!0)),this.interval=clearInterval(this.interval),this},t.prototype.next=function(){if(!this.sliding)return this.slide("next")},t.prototype.prev=function(){if(!this.sliding)return this.slide("prev")},t.prototype.slide=function(n,i){var r=this.$element.find(".item.active"),s=i||this.getItemForDirection(n,r),o=this.interval,a="next"==n?"left":"right",l=this;if(s.hasClass("active"))return this.sliding=!1;var d=s[0],c=e.Event("slide.bs.carousel",{relatedTarget:d,direction:a});if(this.$element.trigger(c),!c.isDefaultPrevented()){if(this.sliding=!0,o&&this.pause(),this.$indicators.length){this.$indicators.find(".active").removeClass("active");var u=e(this.$indicators.children()[this.getItemIndex(s)]);u&&u.addClass("active")}var p=e.Event("slid.bs.carousel",{relatedTarget:d,direction:a});return e.support.transition&&this.$element.hasClass("slide")?(s.addClass(n),s[0].offsetWidth,r.addClass(a),s.addClass(a),r.one("bsTransitionEnd",function(){s.removeClass([n,a].join(" ")).addClass("active"),r.removeClass(["active",a].join(" ")),l.sliding=!1,setTimeout(function(){l.$element.trigger(p)},0)}).emulateTransitionEnd(t.TRANSITION_DURATION)):(r.removeClass("active"),s.addClass("active"),this.sliding=!1,this.$element.trigger(p)),o&&this.cycle(),this}};var i=e.fn.carousel;e.fn.carousel=n,e.fn.carousel.Constructor=t,e.fn.carousel.noConflict=function(){return e.fn.carousel=i,this};var r=function(t){var i,r=e(this),s=e(r.attr("data-target")||(i=r.attr("href"))&&i.replace(/.*(?=#[^\s]+$)/,""));if(s.hasClass("carousel")){var o=e.extend({},s.data(),r.data()),a=r.attr("data-slide-to");a&&(o.interval=!1),n.call(s,o),a&&s.data("bs.carousel").to(a),t.preventDefault()}};e(document).on("click.bs.carousel.data-api","[data-slide]",r).on("click.bs.carousel.data-api","[data-slide-to]",r),e(window).on("load",function(){e('[data-ride="carousel"]').each(function(){var t=e(this);n.call(t,t.data())})})}(jQuery),function(e){"use strict";var t=function(n,i){this.$element=e(n),this.options=e.extend({},t.DEFAULTS,i),this.$trigger=e('[data-toggle="collapse"][href="#'+n.id+'"],[data-toggle="collapse"][data-target="#'+n.id+'"]'),this.transitioning=null,this.options.parent?this.$parent=this.getParent():this.addAriaAndCollapsedClass(this.$element,this.$trigger),this.options.toggle&&this.toggle()};function n(t){var n,i=t.attr("data-target")||(n=t.attr("href"))&&n.replace(/.*(?=#[^\s]+$)/,"");return e(i)}function i(n){return this.each(function(){var i=e(this),r=i.data("bs.collapse"),s=e.extend({},t.DEFAULTS,i.data(),"object"==typeof n&&n);!r&&s.toggle&&/show|hide/.test(n)&&(s.toggle=!1),r||i.data("bs.collapse",r=new t(this,s)),"string"==typeof n&&r[n]()})}t.VERSION="3.3.7",t.TRANSITION_DURATION=350,t.DEFAULTS={toggle:!0},t.prototype.dimension=function(){return this.$element.hasClass("width")?"width":"height"},t.prototype.show=function(){if(!this.transitioning&&!this.$element.hasClass("in")){var n,r=this.$parent&&this.$parent.children(".panel").children(".in, .collapsing");if(!(r&&r.length&&(n=r.data("bs.collapse"))&&n.transitioning)){var s=e.Event("show.bs.collapse");if(this.$element.trigger(s),!s.isDefaultPrevented()){r&&r.length&&(i.call(r,"hide"),n||r.data("bs.collapse",null));var o=this.dimension();this.$element.removeClass("collapse").addClass("collapsing")[o](0).attr("aria-expanded",!0),this.$trigger.removeClass("collapsed").attr("aria-expanded",!0),this.transitioning=1;var a=function(){this.$element.removeClass("collapsing").addClass("collapse in")[o](""),this.transitioning=0,this.$element.trigger("shown.bs.collapse")};if(!e.support.transition)return a.call(this);var l=e.camelCase(["scroll",o].join("-"));this.$element.one("bsTransitionEnd",e.proxy(a,this)).emulateTransitionEnd(t.TRANSITION_DURATION)[o](this.$element[0][l])}}}},t.prototype.hide=function(){if(!this.transitioning&&this.$element.hasClass("in")){var n=e.Event("hide.bs.collapse");if(this.$element.trigger(n),!n.isDefaultPrevented()){var i=this.dimension();this.$element[i](this.$element[i]())[0].offsetHeight,this.$element.addClass("collapsing").removeClass("collapse in").attr("aria-expanded",!1),this.$trigger.addClass("collapsed").attr("aria-expanded",!1),this.transitioning=1;var r=function(){this.transitioning=0,this.$element.removeClass("collapsing").addClass("collapse").trigger("hidden.bs.collapse")};if(!e.support.transition)return r.call(this);this.$element[i](0).one("bsTransitionEnd",e.proxy(r,this)).emulateTransitionEnd(t.TRANSITION_DURATION)}}},t.prototype.toggle=function(){this[this.$element.hasClass("in")?"hide":"show"]()},t.prototype.getParent=function(){return e(this.options.parent).find('[data-toggle="collapse"][data-parent="'+this.options.parent+'"]').each(e.proxy(function(t,i){var r=e(i);this.addAriaAndCollapsedClass(n(r),r)},this)).end()},t.prototype.addAriaAndCollapsedClass=function(e,t){var n=e.hasClass("in");e.attr("aria-expanded",n),t.toggleClass("collapsed",!n).attr("aria-expanded",n)};var r=e.fn.collapse;e.fn.collapse=i,e.fn.collapse.Constructor=t,e.fn.collapse.noConflict=function(){return e.fn.collapse=r,this},e(document).on("click.bs.collapse.data-api",'[data-toggle="collapse"]',function(t){var r=e(this);r.attr("data-target")||t.preventDefault();var s=n(r),o=s.data("bs.collapse")?"toggle":r.data();i.call(s,o)})}(jQuery),function(e){"use strict";var t=".dropdown-backdrop",n='[data-toggle="dropdown"]',i=function(t){e(t).on("click.bs.dropdown",this.toggle)};function r(t){var n=t.attr("data-target");n||(n=(n=t.attr("href"))&&/#[A-Za-z]/.test(n)&&n.replace(/.*(?=#[^\s]*$)/,""));var i=n&&e(n);return i&&i.length?i:t.parent()}function s(i){i&&3===i.which||(e(t).remove(),e(n).each(function(){var t=e(this),n=r(t),s={relatedTarget:this};n.hasClass("open")&&(i&&"click"==i.type&&/input|textarea/i.test(i.target.tagName)&&e.contains(n[0],i.target)||(n.trigger(i=e.Event("hide.bs.dropdown",s)),i.isDefaultPrevented()||(t.attr("aria-expanded","false"),n.removeClass("open").trigger(e.Event("hidden.bs.dropdown",s)))))}))}i.VERSION="3.3.7",i.prototype.toggle=function(t){var n=e(this);if(!n.is(".disabled, :disabled")){var i=r(n),o=i.hasClass("open");if(s(),!o){"ontouchstart"in document.documentElement&&!i.closest(".navbar-nav").length&&e(document.createElement("div")).addClass("dropdown-backdrop").insertAfter(e(this)).on("click",s);var a={relatedTarget:this};if(i.trigger(t=e.Event("show.bs.dropdown",a)),t.isDefaultPrevented())return;n.trigger("focus").attr("aria-expanded","true"),i.toggleClass("open").trigger(e.Event("shown.bs.dropdown",a))}return!1}},i.prototype.keydown=function(t){if(/(38|40|27|32)/.test(t.which)&&!/input|textarea/i.test(t.target.tagName)){var i=e(this);if(t.preventDefault(),t.stopPropagation(),!i.is(".disabled, :disabled")){var s=r(i),o=s.hasClass("open");if(!o&&27!=t.which||o&&27==t.which)return 27==t.which&&s.find(n).trigger("focus"),i.trigger("click");var a=s.find(".dropdown-menu li:not(.disabled):visible a");if(a.length){var l=a.index(t.target);38==t.which&&l>0&&l--,40==t.which&&l<a.length-1&&l++,~l||(l=0),a.eq(l).trigger("focus")}}}};var o=e.fn.dropdown;e.fn.dropdown=function(t){return this.each(function(){var n=e(this),r=n.data("bs.dropdown");r||n.data("bs.dropdown",r=new i(this)),"string"==typeof t&&r[t].call(n)})},e.fn.dropdown.Constructor=i,e.fn.dropdown.noConflict=function(){return e.fn.dropdown=o,this},e(document).on("click.bs.dropdown.data-api",s).on("click.bs.dropdown.data-api",".dropdown form",function(e){e.stopPropagation()}).on("click.bs.dropdown.data-api",n,i.prototype.toggle).on("keydown.bs.dropdown.data-api",n,i.prototype.keydown).on("keydown.bs.dropdown.data-api",".dropdown-menu",i.prototype.keydown)}(jQuery),function(e){"use strict";var t=function(t,n){this.options=n,this.$body=e(document.body),this.$element=e(t),this.$dialog=this.$element.find(".modal-dialog"),this.$backdrop=null,this.isShown=null,this.originalBodyPad=null,this.scrollbarWidth=0,this.ignoreBackdropClick=!1,this.options.remote&&this.$element.find(".modal-content").load(this.options.remote,e.proxy(function(){this.$element.trigger("loaded.bs.modal")},this))};function n(n,i){return this.each(function(){var r=e(this),s=r.data("bs.modal"),o=e.extend({},t.DEFAULTS,r.data(),"object"==typeof n&&n);s||r.data("bs.modal",s=new t(this,o)),"string"==typeof n?s[n](i):o.show&&s.show(i)})}t.VERSION="3.3.7",t.TRANSITION_DURATION=300,t.BACKDROP_TRANSITION_DURATION=150,t.DEFAULTS={backdrop:!0,keyboard:!0,show:!0},t.prototype.toggle=function(e){return this.isShown?this.hide():this.show(e)},t.prototype.show=function(n){var i=this,r=e.Event("show.bs.modal",{relatedTarget:n});this.$element.trigger(r),this.isShown||r.isDefaultPrevented()||(this.isShown=!0,this.checkScrollbar(),this.setScrollbar(),this.$body.addClass("modal-open"),this.escape(),this.resize(),this.$element.on("click.dismiss.bs.modal",'[data-dismiss="modal"]',e.proxy(this.hide,this)),this.$dialog.on("mousedown.dismiss.bs.modal",function(){i.$element.one("mouseup.dismiss.bs.modal",function(t){e(t.target).is(i.$element)&&(i.ignoreBackdropClick=!0)})}),this.backdrop(function(){var r=e.support.transition&&i.$element.hasClass("fade");i.$element.parent().length||i.$element.appendTo(i.$body),i.$element.show().scrollTop(0),i.adjustDialog(),r&&i.$element[0].offsetWidth,i.$element.addClass("in"),i.enforceFocus();var s=e.Event("shown.bs.modal",{relatedTarget:n});r?i.$dialog.one("bsTransitionEnd",function(){i.$element.trigger("focus").trigger(s)}).emulateTransitionEnd(t.TRANSITION_DURATION):i.$element.trigger("focus").trigger(s)}))},t.prototype.hide=function(n){n&&n.preventDefault(),n=e.Event("hide.bs.modal"),this.$element.trigger(n),this.isShown&&!n.isDefaultPrevented()&&(this.isShown=!1,this.escape(),this.resize(),e(document).off("focusin.bs.modal"),this.$element.removeClass("in").off("click.dismiss.bs.modal").off("mouseup.dismiss.bs.modal"),this.$dialog.off("mousedown.dismiss.bs.modal"),e.support.transition&&this.$element.hasClass("fade")?this.$element.one("bsTransitionEnd",e.proxy(this.hideModal,this)).emulateTransitionEnd(t.TRANSITION_DURATION):this.hideModal())},t.prototype.enforceFocus=function(){e(document).off("focusin.bs.modal").on("focusin.bs.modal",e.proxy(function(e){document===e.target||this.$element[0]===e.target||this.$element.has(e.target).length||this.$element.trigger("focus")},this))},t.prototype.escape=function(){this.isShown&&this.options.keyboard?this.$element.on("keydown.dismiss.bs.modal",e.proxy(function(e){27==e.which&&this.hide()},this)):this.isShown||this.$element.off("keydown.dismiss.bs.modal")},t.prototype.resize=function(){this.isShown?e(window).on("resize.bs.modal",e.proxy(this.handleUpdate,this)):e(window).off("resize.bs.modal")},t.prototype.hideModal=function(){var e=this;this.$element.hide(),this.backdrop(function(){e.$body.removeClass("modal-open"),e.resetAdjustments(),e.resetScrollbar(),e.$element.trigger("hidden.bs.modal")})},t.prototype.removeBackdrop=function(){this.$backdrop&&this.$backdrop.remove(),this.$backdrop=null},t.prototype.backdrop=function(n){var i=this,r=this.$element.hasClass("fade")?"fade":"";if(this.isShown&&this.options.backdrop){var s=e.support.transition&&r;if(this.$backdrop=e(document.createElement("div")).addClass("modal-backdrop "+r).appendTo(this.$body),this.$element.on("click.dismiss.bs.modal",e.proxy(function(e){this.ignoreBackdropClick?this.ignoreBackdropClick=!1:e.target===e.currentTarget&&("static"==this.options.backdrop?this.$element[0].focus():this.hide())},this)),s&&this.$backdrop[0].offsetWidth,this.$backdrop.addClass("in"),!n)return;s?this.$backdrop.one("bsTransitionEnd",n).emulateTransitionEnd(t.BACKDROP_TRANSITION_DURATION):n()}else if(!this.isShown&&this.$backdrop){this.$backdrop.removeClass("in");var o=function(){i.removeBackdrop(),n&&n()};e.support.transition&&this.$element.hasClass("fade")?this.$backdrop.one("bsTransitionEnd",o).emulateTransitionEnd(t.BACKDROP_TRANSITION_DURATION):o()}else n&&n()},t.prototype.handleUpdate=function(){this.adjustDialog()},t.prototype.adjustDialog=function(){var e=this.$element[0].scrollHeight>document.documentElement.clientHeight;this.$element.css({paddingLeft:!this.bodyIsOverflowing&&e?this.scrollbarWidth:"",paddingRight:this.bodyIsOverflowing&&!e?this.scrollbarWidth:""})},t.prototype.resetAdjustments=function(){this.$element.css({paddingLeft:"",paddingRight:""})},t.prototype.checkScrollbar=function(){var e=window.innerWidth;if(!e){var t=document.documentElement.getBoundingClientRect();e=t.right-Math.abs(t.left)}this.bodyIsOverflowing=document.body.clientWidth<e,this.scrollbarWidth=this.measureScrollbar()},t.prototype.setScrollbar=function(){var e=parseInt(this.$body.css("padding-right")||0,10);this.originalBodyPad=document.body.style.paddingRight||"",this.bodyIsOverflowing&&this.$body.css("padding-right",e+this.scrollbarWidth)},t.prototype.resetScrollbar=function(){this.$body.css("padding-right",this.originalBodyPad)},t.prototype.measureScrollbar=function(){var e=document.createElement("div");e.className="modal-scrollbar-measure",this.$body.append(e);var t=e.offsetWidth-e.clientWidth;return this.$body[0].removeChild(e),t};var i=e.fn.modal;e.fn.modal=n,e.fn.modal.Constructor=t,e.fn.modal.noConflict=function(){return e.fn.modal=i,this},e(document).on("click.bs.modal.data-api",'[data-toggle="modal"]',function(t){var i=e(this),r=i.attr("href"),s=e(i.attr("data-target")||r&&r.replace(/.*(?=#[^\s]+$)/,"")),o=s.data("bs.modal")?"toggle":e.extend({remote:!/#/.test(r)&&r},s.data(),i.data());i.is("a")&&t.preventDefault(),s.one("show.bs.modal",function(e){e.isDefaultPrevented()||s.one("hidden.bs.modal",function(){i.is(":visible")&&i.trigger("focus")})}),n.call(s,o,this)})}(jQuery),function(e){"use strict";var t=function(e,t){this.type=null,this.options=null,this.enabled=null,this.timeout=null,this.hoverState=null,this.$element=null,this.inState=null,this.init("tooltip",e,t)};t.VERSION="3.3.7",t.TRANSITION_DURATION=150,t.DEFAULTS={animation:!0,placement:"top",selector:!1,template:'<div class="tooltip" role="tooltip"><div class="tooltip-arrow"></div><div class="tooltip-inner"></div></div>',trigger:"hover focus",title:"",delay:0,html:!1,container:!1,viewport:{selector:"body",padding:0}},t.prototype.init=function(t,n,i){if(this.enabled=!0,this.type=t,this.$element=e(n),this.options=this.getOptions(i),this.$viewport=this.options.viewport&&e(e.isFunction(this.options.viewport)?this.options.viewport.call(this,this.$element):this.options.viewport.selector||this.options.viewport),this.inState={click:!1,hover:!1,focus:!1},this.$element[0]instanceof document.constructor&&!this.options.selector)throw new Error("`selector` option must be specified when initializing "+this.type+" on the window.document object!");for(var r=this.options.trigger.split(" "),s=r.length;s--;){var o=r[s];if("click"==o)this.$element.on("click."+this.type,this.options.selector,e.proxy(this.toggle,this));else if("manual"!=o){var a="hover"==o?"mouseenter":"focusin",l="hover"==o?"mouseleave":"focusout";this.$element.on(a+"."+this.type,this.options.selector,e.proxy(this.enter,this)),this.$element.on(l+"."+this.type,this.options.selector,e.proxy(this.leave,this))}}this.options.selector?this._options=e.extend({},this.options,{trigger:"manual",selector:""}):this.fixTitle()},t.prototype.getDefaults=function(){return t.DEFAULTS},t.prototype.getOptions=function(t){return(t=e.extend({},this.getDefaults(),this.$element.data(),t)).delay&&"number"==typeof t.delay&&(t.delay={show:t.delay,hide:t.delay}),t},t.prototype.getDelegateOptions=function(){var t={},n=this.getDefaults();return this._options&&e.each(this._options,function(e,i){n[e]!=i&&(t[e]=i)}),t},t.prototype.enter=function(t){var n=t instanceof this.constructor?t:e(t.currentTarget).data("bs."+this.type);if(n||(n=new this.constructor(t.currentTarget,this.getDelegateOptions()),e(t.currentTarget).data("bs."+this.type,n)),t instanceof e.Event&&(n.inState["focusin"==t.type?"focus":"hover"]=!0),n.tip().hasClass("in")||"in"==n.hoverState)n.hoverState="in";else{if(clearTimeout(n.timeout),n.hoverState="in",!n.options.delay||!n.options.delay.show)return n.show();n.timeout=setTimeout(function(){"in"==n.hoverState&&n.show()},n.options.delay.show)}},t.prototype.isInStateTrue=function(){for(var e in this.inState)if(this.inState[e])return!0;return!1},t.prototype.leave=function(t){var n=t instanceof this.constructor?t:e(t.currentTarget).data("bs."+this.type);if(n||(n=new this.constructor(t.currentTarget,this.getDelegateOptions()),e(t.currentTarget).data("bs."+this.type,n)),t instanceof e.Event&&(n.inState["focusout"==t.type?"focus":"hover"]=!1),!n.isInStateTrue()){if(clearTimeout(n.timeout),n.hoverState="out",!n.options.delay||!n.options.delay.hide)return n.hide();n.timeout=setTimeout(function(){"out"==n.hoverState&&n.hide()},n.options.delay.hide)}},t.prototype.show=function(){var n=e.Event("show.bs."+this.type);if(this.hasContent()&&this.enabled){this.$element.trigger(n);var i=e.contains(this.$element[0].ownerDocument.documentElement,this.$element[0]);if(n.isDefaultPrevented()||!i)return;var r=this,s=this.tip(),o=this.getUID(this.type);this.setContent(),s.attr("id",o),this.$element.attr("aria-describedby",o),this.options.animation&&s.addClass("fade");var a="function"==typeof this.options.placement?this.options.placement.call(this,s[0],this.$element[0]):this.options.placement,l=/\s?auto?\s?/i,d=l.test(a);d&&(a=a.replace(l,"")||"top"),s.detach().css({top:0,left:0,display:"block"}).addClass(a).data("bs."+this.type,this),this.options.container?s.appendTo(this.options.container):s.insertAfter(this.$element),this.$element.trigger("inserted.bs."+this.type);var c=this.getPosition(),u=s[0].offsetWidth,p=s[0].offsetHeight;if(d){var h=a,f=this.getPosition(this.$viewport);a="bottom"==a&&c.bottom+p>f.bottom?"top":"top"==a&&c.top-p<f.top?"bottom":"right"==a&&c.right+u>f.width?"left":"left"==a&&c.left-u<f.left?"right":a,s.removeClass(h).addClass(a)}var m=this.getCalculatedOffset(a,c,u,p);this.applyPlacement(m,a);var g=function(){var e=r.hoverState;r.$element.trigger("shown.bs."+r.type),r.hoverState=null,"out"==e&&r.leave(r)};e.support.transition&&this.$tip.hasClass("fade")?s.one("bsTransitionEnd",g).emulateTransitionEnd(t.TRANSITION_DURATION):g()}},t.prototype.applyPlacement=function(t,n){var i=this.tip(),r=i[0].offsetWidth,s=i[0].offsetHeight,o=parseInt(i.css("margin-top"),10),a=parseInt(i.css("margin-left"),10);isNaN(o)&&(o=0),isNaN(a)&&(a=0),t.top+=o,t.left+=a,e.offset.setOffset(i[0],e.extend({using:function(e){i.css({top:Math.round(e.top),left:Math.round(e.left)})}},t),0),i.addClass("in");var l=i[0].offsetWidth,d=i[0].offsetHeight;"top"==n&&d!=s&&(t.top=t.top+s-d);var c=this.getViewportAdjustedDelta(n,t,l,d);c.left?t.left+=c.left:t.top+=c.top;var u=/top|bottom/.test(n),p=u?2*c.left-r+l:2*c.top-s+d,h=u?"offsetWidth":"offsetHeight";i.offset(t),this.replaceArrow(p,i[0][h],u)},t.prototype.replaceArrow=function(e,t,n){this.arrow().css(n?"left":"top",50*(1-e/t)+"%").css(n?"top":"left","")},t.prototype.setContent=function(){var e=this.tip(),t=this.getTitle();e.find(".tooltip-inner")[this.options.html?"html":"text"](t),e.removeClass("fade in top bottom left right")},t.prototype.hide=function(n){var i=this,r=e(this.$tip),s=e.Event("hide.bs."+this.type);function o(){"in"!=i.hoverState&&r.detach(),i.$element&&i.$element.removeAttr("aria-describedby").trigger("hidden.bs."+i.type),n&&n()}if(this.$element.trigger(s),!s.isDefaultPrevented())return r.removeClass("in"),e.support.transition&&r.hasClass("fade")?r.one("bsTransitionEnd",o).emulateTransitionEnd(t.TRANSITION_DURATION):o(),this.hoverState=null,this},t.prototype.fixTitle=function(){var e=this.$element;(e.attr("title")||"string"!=typeof e.attr("data-original-title"))&&e.attr("data-original-title",e.attr("title")||"").attr("title","")},t.prototype.hasContent=function(){return this.getTitle()},t.prototype.getPosition=function(t){var n=(t=t||this.$element)[0],i="BODY"==n.tagName,r=n.getBoundingClientRect();null==r.width&&(r=e.extend({},r,{width:r.right-r.left,height:r.bottom-r.top}));var s=window.SVGElement&&n instanceof window.SVGElement,o=i?{top:0,left:0}:s?null:t.offset(),a={scroll:i?document.documentElement.scrollTop||document.body.scrollTop:t.scrollTop()},l=i?{width:e(window).width(),height:e(window).height()}:null;return e.extend({},r,a,l,o)},t.prototype.getCalculatedOffset=function(e,t,n,i){return"bottom"==e?{top:t.top+t.height,left:t.left+t.width/2-n/2}:"top"==e?{top:t.top-i,left:t.left+t.width/2-n/2}:"left"==e?{top:t.top+t.height/2-i/2,left:t.left-n}:{top:t.top+t.height/2-i/2,left:t.left+t.width}},t.prototype.getViewportAdjustedDelta=function(e,t,n,i){var r={top:0,left:0};if(!this.$viewport)return r;var s=this.options.viewport&&this.options.viewport.padding||0,o=this.getPosition(this.$viewport);if(/right|left/.test(e)){var a=t.top-s-o.scroll,l=t.top+s-o.scroll+i;a<o.top?r.top=o.top-a:l>o.top+o.height&&(r.top=o.top+o.height-l)}else{var d=t.left-s,c=t.left+s+n;d<o.left?r.left=o.left-d:c>o.right&&(r.left=o.left+o.width-c)}return r},t.prototype.getTitle=function(){var e=this.$element,t=this.options;return e.attr("data-original-title")||("function"==typeof t.title?t.title.call(e[0]):t.title)},t.prototype.getUID=function(e){do{e+=~~(1e6*Math.random())}while(document.getElementById(e));return e},t.prototype.tip=function(){if(!this.$tip&&(this.$tip=e(this.options.template),1!=this.$tip.length))throw new Error(this.type+" `template` option must consist of exactly 1 top-level element!");return this.$tip},t.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".tooltip-arrow")},t.prototype.enable=function(){this.enabled=!0},t.prototype.disable=function(){this.enabled=!1},t.prototype.toggleEnabled=function(){this.enabled=!this.enabled},t.prototype.toggle=function(t){var n=this;t&&((n=e(t.currentTarget).data("bs."+this.type))||(n=new this.constructor(t.currentTarget,this.getDelegateOptions()),e(t.currentTarget).data("bs."+this.type,n))),t?(n.inState.click=!n.inState.click,n.isInStateTrue()?n.enter(n):n.leave(n)):n.tip().hasClass("in")?n.leave(n):n.enter(n)},t.prototype.destroy=function(){var e=this;clearTimeout(this.timeout),this.hide(function(){e.$element.off("."+e.type).removeData("bs."+e.type),e.$tip&&e.$tip.detach(),e.$tip=null,e.$arrow=null,e.$viewport=null,e.$element=null})};var n=e.fn.tooltip;e.fn.tooltip=function(n){return this.each(function(){var i=e(this),r=i.data("bs.tooltip"),s="object"==typeof n&&n;!r&&/destroy|hide/.test(n)||(r||i.data("bs.tooltip",r=new t(this,s)),"string"==typeof n&&r[n]())})},e.fn.tooltip.Constructor=t,e.fn.tooltip.noConflict=function(){return e.fn.tooltip=n,this}}(jQuery),function(e){"use strict";var t=function(e,t){this.init("popover",e,t)};if(!e.fn.tooltip)throw new Error("Popover requires tooltip.js");t.VERSION="3.3.7",t.DEFAULTS=e.extend({},e.fn.tooltip.Constructor.DEFAULTS,{placement:"right",trigger:"click",content:"",template:'<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-title"></h3><div class="popover-content"></div></div>'}),t.prototype=e.extend({},e.fn.tooltip.Constructor.prototype),t.prototype.constructor=t,t.prototype.getDefaults=function(){return t.DEFAULTS},t.prototype.setContent=function(){var e=this.tip(),t=this.getTitle(),n=this.getContent();e.find(".popover-title")[this.options.html?"html":"text"](t),e.find(".popover-content").children().detach().end()[this.options.html?"string"==typeof n?"html":"append":"text"](n),e.removeClass("fade top bottom left right in"),e.find(".popover-title").html()||e.find(".popover-title").hide()},t.prototype.hasContent=function(){return this.getTitle()||this.getContent()},t.prototype.getContent=function(){var e=this.$element,t=this.options;return e.attr("data-content")||("function"==typeof t.content?t.content.call(e[0]):t.content)},t.prototype.arrow=function(){return this.$arrow=this.$arrow||this.tip().find(".arrow")};var n=e.fn.popover;e.fn.popover=function(n){return this.each(function(){var i=e(this),r=i.data("bs.popover"),s="object"==typeof n&&n;!r&&/destroy|hide/.test(n)||(r||i.data("bs.popover",r=new t(this,s)),"string"==typeof n&&r[n]())})},e.fn.popover.Constructor=t,e.fn.popover.noConflict=function(){return e.fn.popover=n,this}}(jQuery),function(e){"use strict";function t(n,i){this.$body=e(document.body),this.$scrollElement=e(n).is(document.body)?e(window):e(n),this.options=e.extend({},t.DEFAULTS,i),this.selector=(this.options.target||"")+" .nav li > a",this.offsets=[],this.targets=[],this.activeTarget=null,this.scrollHeight=0,this.$scrollElement.on("scroll.bs.scrollspy",e.proxy(this.process,this)),this.refresh(),this.process()}function n(n){return this.each(function(){var i=e(this),r=i.data("bs.scrollspy"),s="object"==typeof n&&n;r||i.data("bs.scrollspy",r=new t(this,s)),"string"==typeof n&&r[n]()})}t.VERSION="3.3.7",t.DEFAULTS={offset:10},t.prototype.getScrollHeight=function(){return this.$scrollElement[0].scrollHeight||Math.max(this.$body[0].scrollHeight,document.documentElement.scrollHeight)},t.prototype.refresh=function(){var t=this,n="offset",i=0;this.offsets=[],this.targets=[],this.scrollHeight=this.getScrollHeight(),e.isWindow(this.$scrollElement[0])||(n="position",i=this.$scrollElement.scrollTop()),this.$body.find(this.selector).map(function(){var t=e(this),r=t.data("target")||t.attr("href"),s=/^#./.test(r)&&e(r);return s&&s.length&&s.is(":visible")&&[[s[n]().top+i,r]]||null}).sort(function(e,t){return e[0]-t[0]}).each(function(){t.offsets.push(this[0]),t.targets.push(this[1])})},t.prototype.process=function(){var e,t=this.$scrollElement.scrollTop()+this.options.offset,n=this.getScrollHeight(),i=this.options.offset+n-this.$scrollElement.height(),r=this.offsets,s=this.targets,o=this.activeTarget;if(this.scrollHeight!=n&&this.refresh(),t>=i)return o!=(e=s[s.length-1])&&this.activate(e);if(o&&t<r[0])return this.activeTarget=null,this.clear();for(e=r.length;e--;)o!=s[e]&&t>=r[e]&&(void 0===r[e+1]||t<r[e+1])&&this.activate(s[e])},t.prototype.activate=function(t){this.activeTarget=t,this.clear();var n=this.selector+'[data-target="'+t+'"],'+this.selector+'[href="'+t+'"]',i=e(n).parents("li").addClass("active");i.parent(".dropdown-menu").length&&(i=i.closest("li.dropdown").addClass("active")),i.trigger("activate.bs.scrollspy")},t.prototype.clear=function(){e(this.selector).parentsUntil(this.options.target,".active").removeClass("active")};var i=e.fn.scrollspy;e.fn.scrollspy=n,e.fn.scrollspy.Constructor=t,e.fn.scrollspy.noConflict=function(){return e.fn.scrollspy=i,this},e(window).on("load.bs.scrollspy.data-api",function(){e('[data-spy="scroll"]').each(function(){var t=e(this);n.call(t,t.data())})})}(jQuery),function(e){"use strict";var t=function(t){this.element=e(t)};function n(n){return this.each(function(){var i=e(this),r=i.data("bs.tab");r||i.data("bs.tab",r=new t(this)),"string"==typeof n&&r[n]()})}t.VERSION="3.3.7",t.TRANSITION_DURATION=150,t.prototype.show=function(){var t=this.element,n=t.closest("ul:not(.dropdown-menu)"),i=t.data("target");if(i||(i=(i=t.attr("href"))&&i.replace(/.*(?=#[^\s]*$)/,"")),!t.parent("li").hasClass("active")){var r=n.find(".active:last a"),s=e.Event("hide.bs.tab",{relatedTarget:t[0]}),o=e.Event("show.bs.tab",{relatedTarget:r[0]});if(r.trigger(s),t.trigger(o),!o.isDefaultPrevented()&&!s.isDefaultPrevented()){var a=e(i);this.activate(t.closest("li"),n),this.activate(a,a.parent(),function(){r.trigger({type:"hidden.bs.tab",relatedTarget:t[0]}),t.trigger({type:"shown.bs.tab",relatedTarget:r[0]})})}}},t.prototype.activate=function(n,i,r){var s=i.find("> .active"),o=r&&e.support.transition&&(s.length&&s.hasClass("fade")||!!i.find("> .fade").length);function a(){s.removeClass("active").find("> .dropdown-menu > .active").removeClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!1),n.addClass("active").find('[data-toggle="tab"]').attr("aria-expanded",!0),o?(n[0].offsetWidth,n.addClass("in")):n.removeClass("fade"),n.parent(".dropdown-menu").length&&n.closest("li.dropdown").addClass("active").end().find('[data-toggle="tab"]').attr("aria-expanded",!0),r&&r()}s.length&&o?s.one("bsTransitionEnd",a).emulateTransitionEnd(t.TRANSITION_DURATION):a(),s.removeClass("in")};var i=e.fn.tab;e.fn.tab=n,e.fn.tab.Constructor=t,e.fn.tab.noConflict=function(){return e.fn.tab=i,this};var r=function(t){t.preventDefault(),n.call(e(this),"show")};e(document).on("click.bs.tab.data-api",'[data-toggle="tab"]',r).on("click.bs.tab.data-api",'[data-toggle="pill"]',r)}(jQuery),function(e){"use strict";var t=function(n,i){this.options=e.extend({},t.DEFAULTS,i),this.$target=e(this.options.target).on("scroll.bs.affix.data-api",e.proxy(this.checkPosition,this)).on("click.bs.affix.data-api",e.proxy(this.checkPositionWithEventLoop,this)),this.$element=e(n),this.affixed=null,this.unpin=null,this.pinnedOffset=null,this.checkPosition()};function n(n){return this.each(function(){var i=e(this),r=i.data("bs.affix"),s="object"==typeof n&&n;r||i.data("bs.affix",r=new t(this,s)),"string"==typeof n&&r[n]()})}t.VERSION="3.3.7",t.RESET="affix affix-top affix-bottom",t.DEFAULTS={offset:0,target:window},t.prototype.getState=function(e,t,n,i){var r=this.$target.scrollTop(),s=this.$element.offset(),o=this.$target.height();if(null!=n&&"top"==this.affixed)return r<n&&"top";if("bottom"==this.affixed)return null!=n?!(r+this.unpin<=s.top)&&"bottom":!(r+o<=e-i)&&"bottom";var a=null==this.affixed,l=a?r:s.top;return null!=n&&r<=n?"top":null!=i&&l+(a?o:t)>=e-i&&"bottom"},t.prototype.getPinnedOffset=function(){if(this.pinnedOffset)return this.pinnedOffset;this.$element.removeClass(t.RESET).addClass("affix");var e=this.$target.scrollTop(),n=this.$element.offset();return this.pinnedOffset=n.top-e},t.prototype.checkPositionWithEventLoop=function(){setTimeout(e.proxy(this.checkPosition,this),1)},t.prototype.checkPosition=function(){if(this.$element.is(":visible")){var n=this.$element.height(),i=this.options.offset,r=i.top,s=i.bottom,o=Math.max(e(document).height(),e(document.body).height());"object"!=typeof i&&(s=r=i),"function"==typeof r&&(r=i.top(this.$element)),"function"==typeof s&&(s=i.bottom(this.$element));var a=this.getState(o,n,r,s);if(this.affixed!=a){null!=this.unpin&&this.$element.css("top","");var l="affix"+(a?"-"+a:""),d=e.Event(l+".bs.affix");if(this.$element.trigger(d),d.isDefaultPrevented())return;this.affixed=a,this.unpin="bottom"==a?this.getPinnedOffset():null,this.$element.removeClass(t.RESET).addClass(l).trigger(l.replace("affix","affixed")+".bs.affix")}"bottom"==a&&this.$element.offset({top:o-n-s})}};var i=e.fn.affix;e.fn.affix=n,e.fn.affix.Constructor=t,e.fn.affix.noConflict=function(){return e.fn.affix=i,this},e(window).on("load",function(){e('[data-spy="affix"]').each(function(){var t=e(this),i=t.data();i.offset=i.offset||{},null!=i.offsetBottom&&(i.offset.bottom=i.offsetBottom),null!=i.offsetTop&&(i.offset.top=i.offsetTop),n.call(t,i)})})}(jQuery)},function(e,t,n){var i,r,s;r=[n(1)],void 0===(s="function"==typeof(i=function(e){var t=function(){if(e&&e.fn&&e.fn.select2&&e.fn.select2.amd)var t=e.fn.select2.amd;return function(){
/**
 * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.
 * Released under MIT license, http://github.com/requirejs/almond/LICENSE
 */
var e,n,i;t&&t.requirejs||(t?n=t:t={},function(t){var r,s,o,a,l={},d={},c={},u={},p=Object.prototype.hasOwnProperty,h=[].slice,f=/\.js$/;function m(e,t){return p.call(e,t)}function g(e,t){var n,i,r,s,o,a,l,d,u,p,h,m,g=t&&t.split("/"),v=c.map,y=v&&v["*"]||{};if(e){for(e=e.split("/"),o=e.length-1,c.nodeIdCompat&&f.test(e[o])&&(e[o]=e[o].replace(f,"")),"."===e[0].charAt(0)&&g&&(m=g.slice(0,g.length-1),e=m.concat(e)),u=0;u<e.length;u++)if("."===(h=e[u]))e.splice(u,1),u-=1;else if(".."===h){if(0===u||1===u&&".."===e[2]||".."===e[u-1])continue;u>0&&(e.splice(u-1,2),u-=2)}e=e.join("/")}if((g||y)&&v){for(n=e.split("/"),u=n.length;u>0;u-=1){if(i=n.slice(0,u).join("/"),g)for(p=g.length;p>0;p-=1)if((r=v[g.slice(0,p).join("/")])&&(r=r[i])){s=r,a=u;break}if(s)break;!l&&y&&y[i]&&(l=y[i],d=u)}!s&&l&&(s=l,a=d),s&&(n.splice(0,a,s),e=n.join("/"))}return e}function v(e,n){return function(){var i=h.call(arguments,0);return"string"!=typeof i[0]&&1===i.length&&i.push(null),s.apply(t,i.concat([e,n]))}}function y(e){return function(t){l[e]=t}}function b(e){if(m(d,e)){var n=d[e];delete d[e],u[e]=!0,r.apply(t,n)}if(!m(l,e)&&!m(u,e))throw new Error("No "+e);return l[e]}function w(e){var t,n=e?e.indexOf("!"):-1;return n>-1&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function E(e){return e?w(e):[]}o=function(e,t){var n,i=w(e),r=i[0],s=t[1];return e=i[1],r&&(r=g(r,s),n=b(r)),r?e=n&&n.normalize?n.normalize(e,function(e){return function(t){return g(t,e)}}(s)):g(e,s):(e=g(e,s),i=w(e),r=i[0],e=i[1],r&&(n=b(r))),{f:r?r+"!"+e:e,n:e,pr:r,p:n}},a={require:function(e){return v(e)},exports:function(e){var t=l[e];return void 0!==t?t:l[e]={}},module:function(e){return{id:e,uri:"",exports:l[e],config:function(e){return function(){return c&&c.config&&c.config[e]||{}}}(e)}}},r=function(e,n,i,r){var s,c,p,h,f,g,w,x=[],T=typeof i;if(g=E(r=r||e),"undefined"===T||"function"===T){for(n=!n.length&&i.length?["require","exports","module"]:n,f=0;f<n.length;f+=1)if(h=o(n[f],g),"require"===(c=h.f))x[f]=a.require(e);else if("exports"===c)x[f]=a.exports(e),w=!0;else if("module"===c)s=x[f]=a.module(e);else if(m(l,c)||m(d,c)||m(u,c))x[f]=b(c);else{if(!h.p)throw new Error(e+" missing "+c);h.p.load(h.n,v(r,!0),y(c),{}),x[f]=l[c]}p=i?i.apply(l[e],x):void 0,e&&(s&&s.exports!==t&&s.exports!==l[e]?l[e]=s.exports:p===t&&w||(l[e]=p))}else e&&(l[e]=i)},e=n=s=function(e,n,i,l,d){if("string"==typeof e)return a[e]?a[e](n):b(o(e,E(n)).f);if(!e.splice){if((c=e).deps&&s(c.deps,c.callback),!n)return;n.splice?(e=n,n=i,i=null):e=t}return n=n||function(){},"function"==typeof i&&(i=l,l=d),l?r(t,e,n,i):setTimeout(function(){r(t,e,n,i)},4),s},s.config=function(e){return s(e)},e._defined=l,(i=function(e,t,n){if("string"!=typeof e)throw new Error("See almond README: incorrect module build, no module name");t.splice||(n=t,t=[]),m(l,e)||m(d,e)||(d[e]=[e,t,n])}).amd={jQuery:!0}}(),t.requirejs=e,t.require=n,t.define=i)}(),t.define("almond",function(){}),t.define("jquery",[],function(){var t=e||$;return null==t&&console&&console.error&&console.error("Select2: An instance of jQuery or a jQuery-compatible library was not found. Make sure that you are including jQuery before Select2 on your web page."),t}),t.define("select2/utils",["jquery"],function(e){var t={};function n(e){var t=e.prototype,n=[];for(var i in t){var r=t[i];"function"==typeof r&&"constructor"!==i&&n.push(i)}return n}t.Extend=function(e,t){var n={}.hasOwnProperty;function i(){this.constructor=e}for(var r in t)n.call(t,r)&&(e[r]=t[r]);return i.prototype=t.prototype,e.prototype=new i,e.__super__=t.prototype,e},t.Decorate=function(e,t){var i=n(t),r=n(e);function s(){var n=Array.prototype.unshift,i=t.prototype.constructor.length,r=e.prototype.constructor;i>0&&(n.call(arguments,e.prototype.constructor),r=t.prototype.constructor),r.apply(this,arguments)}t.displayName=e.displayName,s.prototype=new function(){this.constructor=s};for(var o=0;o<r.length;o++){var a=r[o];s.prototype[a]=e.prototype[a]}for(var l=function(e){var n=function(){};e in s.prototype&&(n=s.prototype[e]);var i=t.prototype[e];return function(){var e=Array.prototype.unshift;return e.call(arguments,n),i.apply(this,arguments)}},d=0;d<i.length;d++){var c=i[d];s.prototype[c]=l(c)}return s};var i=function(){this.listeners={}};i.prototype.on=function(e,t){this.listeners=this.listeners||{},e in this.listeners?this.listeners[e].push(t):this.listeners[e]=[t]},i.prototype.trigger=function(e){var t=Array.prototype.slice,n=t.call(arguments,1);this.listeners=this.listeners||{},null==n&&(n=[]),0===n.length&&n.push({}),n[0]._type=e,e in this.listeners&&this.invoke(this.listeners[e],t.call(arguments,1)),"*"in this.listeners&&this.invoke(this.listeners["*"],arguments)},i.prototype.invoke=function(e,t){for(var n=0,i=e.length;n<i;n++)e[n].apply(this,t)},t.Observable=i,t.generateChars=function(e){for(var t="",n=0;n<e;n++){var i=Math.floor(36*Math.random());t+=i.toString(36)}return t},t.bind=function(e,t){return function(){e.apply(t,arguments)}},t._convertData=function(e){for(var t in e){var n=t.split("-"),i=e;if(1!==n.length){for(var r=0;r<n.length;r++){var s=n[r];(s=s.substring(0,1).toLowerCase()+s.substring(1))in i||(i[s]={}),r==n.length-1&&(i[s]=e[t]),i=i[s]}delete e[t]}}return e},t.hasScroll=function(t,n){var i=e(n),r=n.style.overflowX,s=n.style.overflowY;return(r!==s||"hidden"!==s&&"visible"!==s)&&("scroll"===r||"scroll"===s||i.innerHeight()<n.scrollHeight||i.innerWidth()<n.scrollWidth)},t.escapeMarkup=function(e){var t={"\\":"&#92;","&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#47;"};return"string"!=typeof e?e:String(e).replace(/[&<>"'\/\\]/g,function(e){return t[e]})},t.appendMany=function(t,n){if("1.7"===e.fn.jquery.substr(0,3)){var i=e();e.map(n,function(e){i=i.add(e)}),n=i}t.append(n)},t.__cache={};var r=0;return t.GetUniqueElementId=function(e){var t=e.getAttribute("data-select2-id");return null==t&&(e.id?(t=e.id,e.setAttribute("data-select2-id",t)):(e.setAttribute("data-select2-id",++r),t=r.toString())),t},t.StoreData=function(e,n,i){var r=t.GetUniqueElementId(e);t.__cache[r]||(t.__cache[r]={}),t.__cache[r][n]=i},t.GetData=function(n,i){var r=t.GetUniqueElementId(n);return i?t.__cache[r]&&null!=t.__cache[r][i]?t.__cache[r][i]:e(n).data(i):t.__cache[r]},t.RemoveData=function(e){var n=t.GetUniqueElementId(e);null!=t.__cache[n]&&delete t.__cache[n]},t}),t.define("select2/results",["jquery","./utils"],function(e,t){function n(e,t,i){this.$element=e,this.data=i,this.options=t,n.__super__.constructor.call(this)}return t.Extend(n,t.Observable),n.prototype.render=function(){var t=e('<ul class="select2-results__options" role="tree"></ul>');return this.options.get("multiple")&&t.attr("aria-multiselectable","true"),this.$results=t,t},n.prototype.clear=function(){this.$results.empty()},n.prototype.displayMessage=function(t){var n=this.options.get("escapeMarkup");this.clear(),this.hideLoading();var i=e('<li role="treeitem" aria-live="assertive" class="select2-results__option"></li>'),r=this.options.get("translations").get(t.message);i.append(n(r(t.args))),i[0].className+=" select2-results__message",this.$results.append(i)},n.prototype.hideMessages=function(){this.$results.find(".select2-results__message").remove()},n.prototype.append=function(e){this.hideLoading();var t=[];if(null!=e.results&&0!==e.results.length){e.results=this.sort(e.results);for(var n=0;n<e.results.length;n++){var i=e.results[n],r=this.option(i);t.push(r)}this.$results.append(t)}else 0===this.$results.children().length&&this.trigger("results:message",{message:"noResults"})},n.prototype.position=function(e,t){var n=t.find(".select2-results");n.append(e)},n.prototype.sort=function(e){var t=this.options.get("sorter");return t(e)},n.prototype.highlightFirstItem=function(){var e=this.$results.find(".select2-results__option[aria-selected]"),t=e.filter("[aria-selected=true]");t.length>0?t.first().trigger("mouseenter"):e.first().trigger("mouseenter"),this.ensureHighlightVisible()},n.prototype.setClasses=function(){var n=this;this.data.current(function(i){var r=e.map(i,function(e){return e.id.toString()}),s=n.$results.find(".select2-results__option[aria-selected]");s.each(function(){var n=e(this),i=t.GetData(this,"data"),s=""+i.id;null!=i.element&&i.element.selected||null==i.element&&e.inArray(s,r)>-1?n.attr("aria-selected","true"):n.attr("aria-selected","false")})})},n.prototype.showLoading=function(e){this.hideLoading();var t=this.options.get("translations").get("searching"),n={disabled:!0,loading:!0,text:t(e)},i=this.option(n);i.className+=" loading-results",this.$results.prepend(i)},n.prototype.hideLoading=function(){this.$results.find(".loading-results").remove()},n.prototype.option=function(n){var i=document.createElement("li");i.className="select2-results__option";var r={role:"treeitem","aria-selected":"false"};for(var s in n.disabled&&(delete r["aria-selected"],r["aria-disabled"]="true"),null==n.id&&delete r["aria-selected"],null!=n._resultId&&(i.id=n._resultId),n.title&&(i.title=n.title),n.children&&(r.role="group",r["aria-label"]=n.text,delete r["aria-selected"]),r){var o=r[s];i.setAttribute(s,o)}if(n.children){var a=e(i),l=document.createElement("strong");l.className="select2-results__group",e(l),this.template(n,l);for(var d=[],c=0;c<n.children.length;c++){var u=n.children[c],p=this.option(u);d.push(p)}var h=e("<ul></ul>",{class:"select2-results__options select2-results__options--nested"});h.append(d),a.append(l),a.append(h)}else this.template(n,i);return t.StoreData(i,"data",n),i},n.prototype.bind=function(n,i){var r=this,s=n.id+"-results";this.$results.attr("id",s),n.on("results:all",function(e){r.clear(),r.append(e.data),n.isOpen()&&(r.setClasses(),r.highlightFirstItem())}),n.on("results:append",function(e){r.append(e.data),n.isOpen()&&r.setClasses()}),n.on("query",function(e){r.hideMessages(),r.showLoading(e)}),n.on("select",function(){n.isOpen()&&(r.setClasses(),r.highlightFirstItem())}),n.on("unselect",function(){n.isOpen()&&(r.setClasses(),r.highlightFirstItem())}),n.on("open",function(){r.$results.attr("aria-expanded","true"),r.$results.attr("aria-hidden","false"),r.setClasses(),r.ensureHighlightVisible()}),n.on("close",function(){r.$results.attr("aria-expanded","false"),r.$results.attr("aria-hidden","true"),r.$results.removeAttr("aria-activedescendant")}),n.on("results:toggle",function(){var e=r.getHighlightedResults();0!==e.length&&e.trigger("mouseup")}),n.on("results:select",function(){var e=r.getHighlightedResults();if(0!==e.length){var n=t.GetData(e[0],"data");"true"==e.attr("aria-selected")?r.trigger("close",{}):r.trigger("select",{data:n})}}),n.on("results:previous",function(){var e=r.getHighlightedResults(),t=r.$results.find("[aria-selected]"),n=t.index(e);if(!(n<=0)){var i=n-1;0===e.length&&(i=0);var s=t.eq(i);s.trigger("mouseenter");var o=r.$results.offset().top,a=s.offset().top,l=r.$results.scrollTop()+(a-o);0===i?r.$results.scrollTop(0):a-o<0&&r.$results.scrollTop(l)}}),n.on("results:next",function(){var e=r.getHighlightedResults(),t=r.$results.find("[aria-selected]"),n=t.index(e),i=n+1;if(!(i>=t.length)){var s=t.eq(i);s.trigger("mouseenter");var o=r.$results.offset().top+r.$results.outerHeight(!1),a=s.offset().top+s.outerHeight(!1),l=r.$results.scrollTop()+a-o;0===i?r.$results.scrollTop(0):a>o&&r.$results.scrollTop(l)}}),n.on("results:focus",function(e){e.element.addClass("select2-results__option--highlighted")}),n.on("results:message",function(e){r.displayMessage(e)}),e.fn.mousewheel&&this.$results.on("mousewheel",function(e){var t=r.$results.scrollTop(),n=r.$results.get(0).scrollHeight-t+e.deltaY,i=e.deltaY>0&&t-e.deltaY<=0,s=e.deltaY<0&&n<=r.$results.height();i?(r.$results.scrollTop(0),e.preventDefault(),e.stopPropagation()):s&&(r.$results.scrollTop(r.$results.get(0).scrollHeight-r.$results.height()),e.preventDefault(),e.stopPropagation())}),this.$results.on("mouseup",".select2-results__option[aria-selected]",function(n){var i=e(this),s=t.GetData(this,"data");"true"!==i.attr("aria-selected")?r.trigger("select",{originalEvent:n,data:s}):r.options.get("multiple")?r.trigger("unselect",{originalEvent:n,data:s}):r.trigger("close",{})}),this.$results.on("mouseenter",".select2-results__option[aria-selected]",function(n){var i=t.GetData(this,"data");r.getHighlightedResults().removeClass("select2-results__option--highlighted"),r.trigger("results:focus",{data:i,element:e(this)})})},n.prototype.getHighlightedResults=function(){var e=this.$results.find(".select2-results__option--highlighted");return e},n.prototype.destroy=function(){this.$results.remove()},n.prototype.ensureHighlightVisible=function(){var e=this.getHighlightedResults();if(0!==e.length){var t=this.$results.find("[aria-selected]"),n=t.index(e),i=this.$results.offset().top,r=e.offset().top,s=this.$results.scrollTop()+(r-i),o=r-i;s-=2*e.outerHeight(!1),n<=2?this.$results.scrollTop(0):(o>this.$results.outerHeight()||o<0)&&this.$results.scrollTop(s)}},n.prototype.template=function(t,n){var i=this.options.get("templateResult"),r=this.options.get("escapeMarkup"),s=i(t,n);null==s?n.style.display="none":"string"==typeof s?n.innerHTML=r(s):e(n).append(s)},n}),t.define("select2/keys",[],function(){return{BACKSPACE:8,TAB:9,ENTER:13,SHIFT:16,CTRL:17,ALT:18,ESC:27,SPACE:32,PAGE_UP:33,PAGE_DOWN:34,END:35,HOME:36,LEFT:37,UP:38,RIGHT:39,DOWN:40,DELETE:46}}),t.define("select2/selection/base",["jquery","../utils","../keys"],function(e,t,n){function i(e,t){this.$element=e,this.options=t,i.__super__.constructor.call(this)}return t.Extend(i,t.Observable),i.prototype.render=function(){var n=e('<span class="select2-selection" role="combobox"  aria-haspopup="true" aria-expanded="false"></span>');return this._tabindex=0,null!=t.GetData(this.$element[0],"old-tabindex")?this._tabindex=t.GetData(this.$element[0],"old-tabindex"):null!=this.$element.attr("tabindex")&&(this._tabindex=this.$element.attr("tabindex")),n.attr("title",this.$element.attr("title")),n.attr("tabindex",this._tabindex),this.$selection=n,n},i.prototype.bind=function(e,t){var i=this,r=(e.id,e.id+"-results");this.container=e,this.$selection.on("focus",function(e){i.trigger("focus",e)}),this.$selection.on("blur",function(e){i._handleBlur(e)}),this.$selection.on("keydown",function(e){i.trigger("keypress",e),e.which===n.SPACE&&e.preventDefault()}),e.on("results:focus",function(e){i.$selection.attr("aria-activedescendant",e.data._resultId)}),e.on("selection:update",function(e){i.update(e.data)}),e.on("open",function(){i.$selection.attr("aria-expanded","true"),i.$selection.attr("aria-owns",r),i._attachCloseHandler(e)}),e.on("close",function(){i.$selection.attr("aria-expanded","false"),i.$selection.removeAttr("aria-activedescendant"),i.$selection.removeAttr("aria-owns"),i.$selection.focus(),window.setTimeout(function(){i.$selection.focus()},0),i._detachCloseHandler(e)}),e.on("enable",function(){i.$selection.attr("tabindex",i._tabindex)}),e.on("disable",function(){i.$selection.attr("tabindex","-1")})},i.prototype._handleBlur=function(t){var n=this;window.setTimeout(function(){document.activeElement==n.$selection[0]||e.contains(n.$selection[0],document.activeElement)||n.trigger("blur",t)},1)},i.prototype._attachCloseHandler=function(n){e(document.body).on("mousedown.select2."+n.id,function(n){var i=e(n.target),r=i.closest(".select2"),s=e(".select2.select2-container--open");s.each(function(){if(e(this),this!=r[0]){var n=t.GetData(this,"element");n.select2("close")}})})},i.prototype._detachCloseHandler=function(t){e(document.body).off("mousedown.select2."+t.id)},i.prototype.position=function(e,t){var n=t.find(".selection");n.append(e)},i.prototype.destroy=function(){this._detachCloseHandler(this.container)},i.prototype.update=function(e){throw new Error("The `update` method must be defined in child classes.")},i}),t.define("select2/selection/single",["jquery","./base","../utils","../keys"],function(e,t,n,i){function r(){r.__super__.constructor.apply(this,arguments)}return n.Extend(r,t),r.prototype.render=function(){var e=r.__super__.render.call(this);return e.addClass("select2-selection--single"),e.html('<span class="select2-selection__rendered"></span><span class="select2-selection__arrow" role="presentation"><b role="presentation"></b></span>'),e},r.prototype.bind=function(e,t){var n=this;r.__super__.bind.apply(this,arguments);var i=e.id+"-container";this.$selection.find(".select2-selection__rendered").attr("id",i).attr("role","textbox").attr("aria-readonly","true"),this.$selection.attr("aria-labelledby",i),this.$selection.on("mousedown",function(e){1===e.which&&n.trigger("toggle",{originalEvent:e})}),this.$selection.on("focus",function(e){}),this.$selection.on("blur",function(e){}),e.on("focus",function(t){e.isOpen()||n.$selection.focus()})},r.prototype.clear=function(){var e=this.$selection.find(".select2-selection__rendered");e.empty(),e.removeAttr("title")},r.prototype.display=function(e,t){var n=this.options.get("templateSelection"),i=this.options.get("escapeMarkup");return i(n(e,t))},r.prototype.selectionContainer=function(){return e("<span></span>")},r.prototype.update=function(e){if(0!==e.length){var t=e[0],n=this.$selection.find(".select2-selection__rendered"),i=this.display(t,n);n.empty().append(i),n.attr("title",t.title||t.text)}else this.clear()},r}),t.define("select2/selection/multiple",["jquery","./base","../utils"],function(e,t,n){function i(e,t){i.__super__.constructor.apply(this,arguments)}return n.Extend(i,t),i.prototype.render=function(){var e=i.__super__.render.call(this);return e.addClass("select2-selection--multiple"),e.html('<ul class="select2-selection__rendered"></ul>'),e},i.prototype.bind=function(t,r){var s=this;i.__super__.bind.apply(this,arguments),this.$selection.on("click",function(e){s.trigger("toggle",{originalEvent:e})}),this.$selection.on("click",".select2-selection__choice__remove",function(t){if(!s.options.get("disabled")){var i=e(this),r=i.parent(),o=n.GetData(r[0],"data");s.trigger("unselect",{originalEvent:t,data:o})}})},i.prototype.clear=function(){var e=this.$selection.find(".select2-selection__rendered");e.empty(),e.removeAttr("title")},i.prototype.display=function(e,t){var n=this.options.get("templateSelection"),i=this.options.get("escapeMarkup");return i(n(e,t))},i.prototype.selectionContainer=function(){var t=e('<li class="select2-selection__choice"><span class="select2-selection__choice__remove" role="presentation">&times;</span></li>');return t},i.prototype.update=function(e){if(this.clear(),0!==e.length){for(var t=[],i=0;i<e.length;i++){var r=e[i],s=this.selectionContainer(),o=this.display(r,s);s.append(o),s.attr("title",r.title||r.text),n.StoreData(s[0],"data",r),t.push(s)}var a=this.$selection.find(".select2-selection__rendered");n.appendMany(a,t)}},i}),t.define("select2/selection/placeholder",["../utils"],function(e){function t(e,t,n){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),e.call(this,t,n)}return t.prototype.normalizePlaceholder=function(e,t){return"string"==typeof t&&(t={id:"",text:t}),t},t.prototype.createPlaceholder=function(e,t){var n=this.selectionContainer();return n.html(this.display(t)),n.addClass("select2-selection__placeholder").removeClass("select2-selection__choice"),n},t.prototype.update=function(e,t){var n=1==t.length&&t[0].id!=this.placeholder.id,i=t.length>1;if(i||n)return e.call(this,t);this.clear();var r=this.createPlaceholder(this.placeholder);this.$selection.find(".select2-selection__rendered").append(r)},t}),t.define("select2/selection/allowClear",["jquery","../keys","../utils"],function(e,t,n){function i(){}return i.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),null==this.placeholder&&this.options.get("debug")&&window.console&&console.error&&console.error("Select2: The `allowClear` option should be used in combination with the `placeholder` option."),this.$selection.on("mousedown",".select2-selection__clear",function(e){i._handleClear(e)}),t.on("keypress",function(e){i._handleKeyboardClear(e,t)})},i.prototype._handleClear=function(e,t){if(!this.options.get("disabled")){var i=this.$selection.find(".select2-selection__clear");if(0!==i.length){t.stopPropagation();var r=n.GetData(i[0],"data"),s=this.$element.val();this.$element.val(this.placeholder.id);var o={data:r};if(this.trigger("clear",o),o.prevented)this.$element.val(s);else{for(var a=0;a<r.length;a++)if(o={data:r[a]},this.trigger("unselect",o),o.prevented)return void this.$element.val(s);this.$element.trigger("change"),this.trigger("toggle",{})}}}},i.prototype._handleKeyboardClear=function(e,n,i){i.isOpen()||n.which!=t.DELETE&&n.which!=t.BACKSPACE||this._handleClear(n)},i.prototype.update=function(t,i){if(t.call(this,i),!(this.$selection.find(".select2-selection__placeholder").length>0||0===i.length)){var r=e('<span class="select2-selection__clear">&times;</span>');n.StoreData(r[0],"data",i),this.$selection.find(".select2-selection__rendered").prepend(r)}},i}),t.define("select2/selection/search",["jquery","../utils","../keys"],function(e,t,n){function i(e,t,n){e.call(this,t,n)}return i.prototype.render=function(t){var n=e('<li class="select2-search select2-search--inline"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="textbox" aria-autocomplete="list" /></li>');this.$searchContainer=n,this.$search=n.find("input");var i=t.call(this);return this._transferTabIndex(),i},i.prototype.bind=function(e,i,r){var s=this;e.call(this,i,r),i.on("open",function(){s.$search.trigger("focus")}),i.on("close",function(){s.$search.val(""),s.$search.removeAttr("aria-activedescendant"),s.$search.trigger("focus")}),i.on("enable",function(){s.$search.prop("disabled",!1),s._transferTabIndex()}),i.on("disable",function(){s.$search.prop("disabled",!0)}),i.on("focus",function(e){s.$search.trigger("focus")}),i.on("results:focus",function(e){s.$search.attr("aria-activedescendant",e.id)}),this.$selection.on("focusin",".select2-search--inline",function(e){s.trigger("focus",e)}),this.$selection.on("focusout",".select2-search--inline",function(e){s._handleBlur(e)}),this.$selection.on("keydown",".select2-search--inline",function(e){e.stopPropagation(),s.trigger("keypress",e),s._keyUpPrevented=e.isDefaultPrevented();var i=e.which;if(i===n.BACKSPACE&&""===s.$search.val()){var r=s.$searchContainer.prev(".select2-selection__choice");if(r.length>0){var o=t.GetData(r[0],"data");s.searchRemoveChoice(o),e.preventDefault()}}});var o=document.documentMode,a=o&&o<=11;this.$selection.on("input.searchcheck",".select2-search--inline",function(e){a?s.$selection.off("input.search input.searchcheck"):s.$selection.off("keyup.search")}),this.$selection.on("keyup.search input.search",".select2-search--inline",function(e){if(a&&"input"===e.type)s.$selection.off("input.search input.searchcheck");else{var t=e.which;t!=n.SHIFT&&t!=n.CTRL&&t!=n.ALT&&t!=n.TAB&&s.handleSearch(e)}})},i.prototype._transferTabIndex=function(e){this.$search.attr("tabindex",this.$selection.attr("tabindex")),this.$selection.attr("tabindex","-1")},i.prototype.createPlaceholder=function(e,t){this.$search.attr("placeholder",t.text)},i.prototype.update=function(e,t){var n=this.$search[0]==document.activeElement;if(this.$search.attr("placeholder",""),e.call(this,t),this.$selection.find(".select2-selection__rendered").append(this.$searchContainer),this.resizeSearch(),n){var i=this.$element.find("[data-select2-tag]").length;i?this.$element.focus():this.$search.focus()}},i.prototype.handleSearch=function(){if(this.resizeSearch(),!this._keyUpPrevented){var e=this.$search.val();this.trigger("query",{term:e})}this._keyUpPrevented=!1},i.prototype.searchRemoveChoice=function(e,t){this.trigger("unselect",{data:t}),this.$search.val(t.text),this.handleSearch()},i.prototype.resizeSearch=function(){this.$search.css("width","25px");var e="";if(""!==this.$search.attr("placeholder"))e=this.$selection.find(".select2-selection__rendered").innerWidth();else{var t=this.$search.val().length+1;e=.75*t+"em"}this.$search.css("width",e)},i}),t.define("select2/selection/eventRelay",["jquery"],function(e){function t(){}return t.prototype.bind=function(t,n,i){var r=this,s=["open","opening","close","closing","select","selecting","unselect","unselecting","clear","clearing"],o=["opening","closing","selecting","unselecting","clearing"];t.call(this,n,i),n.on("*",function(t,n){if(-1!==e.inArray(t,s)){n=n||{};var i=e.Event("select2:"+t,{params:n});r.$element.trigger(i),-1!==e.inArray(t,o)&&(n.prevented=i.isDefaultPrevented())}})},t}),t.define("select2/translation",["jquery","require"],function(e,t){function n(e){this.dict=e||{}}return n.prototype.all=function(){return this.dict},n.prototype.get=function(e){return this.dict[e]},n.prototype.extend=function(t){this.dict=e.extend({},t.all(),this.dict)},n._cache={},n.loadPath=function(e){if(!(e in n._cache)){var i=t(e);n._cache[e]=i}return new n(n._cache[e])},n}),t.define("select2/diacritics",[],function(){return{"â¶":"A","ï¼¡":"A","Ã":"A","Ã":"A","Ã":"A","áº¦":"A","áº¤":"A","áºª":"A","áº¨":"A","Ã":"A","Ä":"A","Ä":"A","áº°":"A","áº®":"A","áº´":"A","áº²":"A","È¦":"A","Ç ":"A","Ã":"A","Ç":"A","áº¢":"A","Ã":"A","Çº":"A","Ç":"A","È":"A","È":"A","áº ":"A","áº¬":"A","áº¶":"A","á¸":"A","Ä":"A","Èº":"A","â±¯":"A","ê²":"AA","Ã":"AE","Ç¼":"AE","Ç¢":"AE","ê´":"AO","ê¶":"AU","ê¸":"AV","êº":"AV","ê¼":"AY","â·":"B","ï¼¢":"B","á¸":"B","á¸":"B","á¸":"B","É":"B","Æ":"B","Æ":"B","â¸":"C","ï¼£":"C","Ä":"C","Ä":"C","Ä":"C","Ä":"C","Ã":"C","á¸":"C","Æ":"C","È»":"C","ê¾":"C","â¹":"D","ï¼¤":"D","á¸":"D","Ä":"D","á¸":"D","á¸":"D","á¸":"D","á¸":"D","Ä":"D","Æ":"D","Æ":"D","Æ":"D","ê¹":"D","Ç±":"DZ","Ç":"DZ","Ç²":"Dz","Ç":"Dz","âº":"E","ï¼¥":"E","Ã":"E","Ã":"E","Ã":"E","á»":"E","áº¾":"E","á»":"E","á»":"E","áº¼":"E","Ä":"E","á¸":"E","á¸":"E","Ä":"E","Ä":"E","Ã":"E","áºº":"E","Ä":"E","È":"E","È":"E","áº¸":"E","á»":"E","È¨":"E","á¸":"E","Ä":"E","á¸":"E","á¸":"E","Æ":"E","Æ":"E","â»":"F","ï¼¦":"F","á¸":"F","Æ":"F","ê»":"F","â¼":"G","ï¼§":"G","Ç´":"G","Ä":"G","á¸ ":"G","Ä":"G","Ä ":"G","Ç¦":"G","Ä¢":"G","Ç¤":"G","Æ":"G","ê ":"G","ê½":"G","ê¾":"G","â½":"H","ï¼¨":"H","Ä¤":"H","á¸¢":"H","á¸¦":"H","È":"H","á¸¤":"H","á¸¨":"H","á¸ª":"H","Ä¦":"H","â±§":"H","â±µ":"H","ê":"H","â¾":"I","ï¼©":"I","Ã":"I","Ã":"I","Ã":"I","Ä¨":"I","Äª":"I","Ä¬":"I","Ä°":"I","Ã":"I","á¸®":"I","á»":"I","Ç":"I","È":"I","È":"I","á»":"I","Ä®":"I","á¸¬":"I","Æ":"I","â¿":"J","ï¼ª":"J","Ä´":"J","É":"J","â":"K","ï¼«":"K","á¸°":"K","Ç¨":"K","á¸²":"K","Ä¶":"K","á¸´":"K","Æ":"K","â±©":"K","ê":"K","ê":"K","ê":"K","ê¢":"K","â":"L","ï¼¬":"L","Ä¿":"L","Ä¹":"L","Ä½":"L","á¸¶":"L","á¸¸":"L","Ä»":"L","á¸¼":"L","á¸º":"L","Å":"L","È½":"L","â±¢":"L","â± ":"L","ê":"L","ê":"L","ê":"L","Ç":"LJ","Ç":"Lj","â":"M","ï¼­":"M","á¸¾":"M","á¹":"M","á¹":"M","â±®":"M","Æ":"M","â":"N","ï¼®":"N","Ç¸":"N","Å":"N","Ã":"N","á¹":"N","Å":"N","á¹":"N","Å":"N","á¹":"N","á¹":"N","È ":"N","Æ":"N","ê":"N","ê¤":"N","Ç":"NJ","Ç":"Nj","â":"O","ï¼¯":"O","Ã":"O","Ã":"O","Ã":"O","á»":"O","á»":"O","á»":"O","á»":"O","Ã":"O","á¹":"O","È¬":"O","á¹":"O","Å":"O","á¹":"O","á¹":"O","Å":"O","È®":"O","È°":"O","Ã":"O","Èª":"O","á»":"O","Å":"O","Ç":"O","È":"O","È":"O","Æ ":"O","á»":"O","á»":"O","á» ":"O","á»":"O","á»¢":"O","á»":"O","á»":"O","Çª":"O","Ç¬":"O","Ã":"O","Ç¾":"O","Æ":"O","Æ":"O","ê":"O","ê":"O","Æ¢":"OI","ê":"OO","È¢":"OU","â":"P","ï¼°":"P","á¹":"P","á¹":"P","Æ¤":"P","â±£":"P","ê":"P","ê":"P","ê":"P","â":"Q","ï¼±":"Q","ê":"Q","ê":"Q","É":"Q","â":"R","ï¼²":"R","Å":"R","á¹":"R","Å":"R","È":"R","È":"R","á¹":"R","á¹":"R","Å":"R","á¹":"R","É":"R","â±¤":"R","ê":"R","ê¦":"R","ê":"R","â":"S","ï¼³":"S","áº":"S","Å":"S","á¹¤":"S","Å":"S","á¹ ":"S","Å ":"S","á¹¦":"S","á¹¢":"S","á¹¨":"S","È":"S","Å":"S","â±¾":"S","ê¨":"S","ê":"S","â":"T","ï¼´":"T","á¹ª":"T","Å¤":"T","á¹¬":"T","È":"T","Å¢":"T","á¹°":"T","á¹®":"T","Å¦":"T","Æ¬":"T","Æ®":"T","È¾":"T","ê":"T","ê¨":"TZ","â":"U","ï¼µ":"U","Ã":"U","Ã":"U","Ã":"U","Å¨":"U","á¹¸":"U","Åª":"U","á¹º":"U","Å¬":"U","Ã":"U","Ç":"U","Ç":"U","Ç":"U","Ç":"U","á»¦":"U","Å®":"U","Å°":"U","Ç":"U","È":"U","È":"U","Æ¯":"U","á»ª":"U","á»¨":"U","á»®":"U","á»¬":"U","á»°":"U","á»¤":"U","á¹²":"U","Å²":"U","á¹¶":"U","á¹´":"U","É":"U","â":"V","ï¼¶":"V","á¹¼":"V","á¹¾":"V","Æ²":"V","ê":"V","É":"V","ê ":"VY","â":"W","ï¼·":"W","áº":"W","áº":"W","Å´":"W","áº":"W","áº":"W","áº":"W","â±²":"W","â":"X","ï¼¸":"X","áº":"X","áº":"X","â":"Y","ï¼¹":"Y","á»²":"Y","Ã":"Y","Å¶":"Y","á»¸":"Y","È²":"Y","áº":"Y","Å¸":"Y","á»¶":"Y","á»´":"Y","Æ³":"Y","É":"Y","á»¾":"Y","â":"Z","ï¼º":"Z","Å¹":"Z","áº":"Z","Å»":"Z","Å½":"Z","áº":"Z","áº":"Z","Æµ":"Z","È¤":"Z","â±¿":"Z","â±«":"Z","ê¢":"Z","â":"a","ï½":"a","áº":"a","Ã ":"a","Ã¡":"a","Ã¢":"a","áº§":"a","áº¥":"a","áº«":"a","áº©":"a","Ã£":"a","Ä":"a","Ä":"a","áº±":"a","áº¯":"a","áºµ":"a","áº³":"a","È§":"a","Ç¡":"a","Ã¤":"a","Ç":"a","áº£":"a","Ã¥":"a","Ç»":"a","Ç":"a","È":"a","È":"a","áº¡":"a","áº­":"a","áº·":"a","á¸":"a","Ä":"a","â±¥":"a","É":"a","ê³":"aa","Ã¦":"ae","Ç½":"ae","Ç£":"ae","êµ":"ao","ê·":"au","ê¹":"av","ê»":"av","ê½":"ay","â":"b","ï½":"b","á¸":"b","á¸":"b","á¸":"b","Æ":"b","Æ":"b","É":"b","â":"c","ï½":"c","Ä":"c","Ä":"c","Ä":"c","Ä":"c","Ã§":"c","á¸":"c","Æ":"c","È¼":"c","ê¿":"c","â":"c","â":"d","ï½":"d","á¸":"d","Ä":"d","á¸":"d","á¸":"d","á¸":"d","á¸":"d","Ä":"d","Æ":"d","É":"d","É":"d","êº":"d","Ç³":"dz","Ç":"dz","â":"e","ï½":"e","Ã¨":"e","Ã©":"e","Ãª":"e","á»":"e","áº¿":"e","á»":"e","á»":"e","áº½":"e","Ä":"e","á¸":"e","á¸":"e","Ä":"e","Ä":"e","Ã«":"e","áº»":"e","Ä":"e","È":"e","È":"e","áº¹":"e","á»":"e","È©":"e","á¸":"e","Ä":"e","á¸":"e","á¸":"e","É":"e","É":"e","Ç":"e","â":"f","ï½":"f","á¸":"f","Æ":"f","ê¼":"f","â":"g","ï½":"g","Çµ":"g","Ä":"g","á¸¡":"g","Ä":"g","Ä¡":"g","Ç§":"g","Ä£":"g","Ç¥":"g","É ":"g","ê¡":"g","áµ¹":"g","ê¿":"g","â":"h","ï½":"h","Ä¥":"h","á¸£":"h","á¸§":"h","È":"h","á¸¥":"h","á¸©":"h","á¸«":"h","áº":"h","Ä§":"h","â±¨":"h","â±¶":"h","É¥":"h","Æ":"hv","â":"i","ï½":"i","Ã¬":"i","Ã­":"i","Ã®":"i","Ä©":"i","Ä«":"i","Ä­":"i","Ã¯":"i","á¸¯":"i","á»":"i","Ç":"i","È":"i","È":"i","á»":"i","Ä¯":"i","á¸­":"i","É¨":"i","Ä±":"i","â":"j","ï½":"j","Äµ":"j","Ç°":"j","É":"j","â":"k","ï½":"k","á¸±":"k","Ç©":"k","á¸³":"k","Ä·":"k","á¸µ":"k","Æ":"k","â±ª":"k","ê":"k","ê":"k","ê":"k","ê£":"k","â":"l","ï½":"l","Å":"l","Äº":"l","Ä¾":"l","á¸·":"l","á¸¹":"l","Ä¼":"l","á¸½":"l","á¸»":"l","Å¿":"l","Å":"l","Æ":"l","É«":"l","â±¡":"l","ê":"l","ê":"l","ê":"l","Ç":"lj","â":"m","ï½":"m","á¸¿":"m","á¹":"m","á¹":"m","É±":"m","É¯":"m","â":"n","ï½":"n","Ç¹":"n","Å":"n","Ã±":"n","á¹":"n","Å":"n","á¹":"n","Å":"n","á¹":"n","á¹":"n","Æ":"n","É²":"n","Å":"n","ê":"n","ê¥":"n","Ç":"nj","â":"o","ï½":"o","Ã²":"o","Ã³":"o","Ã´":"o","á»":"o","á»":"o","á»":"o","á»":"o","Ãµ":"o","á¹":"o","È­":"o","á¹":"o","Å":"o","á¹":"o","á¹":"o","Å":"o","È¯":"o","È±":"o","Ã¶":"o","È«":"o","á»":"o","Å":"o","Ç":"o","È":"o","È":"o","Æ¡":"o","á»":"o","á»":"o","á»¡":"o","á»":"o","á»£":"o","á»":"o","á»":"o","Ç«":"o","Ç­":"o","Ã¸":"o","Ç¿":"o","É":"o","ê":"o","ê":"o","Éµ":"o","Æ£":"oi","È£":"ou","ê":"oo","â":"p","ï½":"p","á¹":"p","á¹":"p","Æ¥":"p","áµ½":"p","ê":"p","ê":"p","ê":"p","â ":"q","ï½":"q","É":"q","ê":"q","ê":"q","â¡":"r","ï½":"r","Å":"r","á¹":"r","Å":"r","È":"r","È":"r","á¹":"r","á¹":"r","Å":"r","á¹":"r","É":"r","É½":"r","ê":"r","ê§":"r","ê":"r","â¢":"s","ï½":"s","Ã":"s","Å":"s","á¹¥":"s","Å":"s","á¹¡":"s","Å¡":"s","á¹§":"s","á¹£":"s","á¹©":"s","È":"s","Å":"s","È¿":"s","ê©":"s","ê":"s","áº":"s","â£":"t","ï½":"t","á¹«":"t","áº":"t","Å¥":"t","á¹­":"t","È":"t","Å£":"t","á¹±":"t","á¹¯":"t","Å§":"t","Æ­":"t","Ê":"t","â±¦":"t","ê":"t","ê©":"tz","â¤":"u","ï½":"u","Ã¹":"u","Ãº":"u","Ã»":"u","Å©":"u","á¹¹":"u","Å«":"u","á¹»":"u","Å­":"u","Ã¼":"u","Ç":"u","Ç":"u","Ç":"u","Ç":"u","á»§":"u","Å¯":"u","Å±":"u","Ç":"u","È":"u","È":"u","Æ°":"u","á»«":"u","á»©":"u","á»¯":"u","á»­":"u","á»±":"u","á»¥":"u","á¹³":"u","Å³":"u","á¹·":"u","á¹µ":"u","Ê":"u","â¥":"v","ï½":"v","á¹½":"v","á¹¿":"v","Ê":"v","ê":"v","Ê":"v","ê¡":"vy","â¦":"w","ï½":"w","áº":"w","áº":"w","Åµ":"w","áº":"w","áº":"w","áº":"w","áº":"w","â±³":"w","â§":"x","ï½":"x","áº":"x","áº":"x","â¨":"y","ï½":"y","á»³":"y","Ã½":"y","Å·":"y","á»¹":"y","È³":"y","áº":"y","Ã¿":"y","á»·":"y","áº":"y","á»µ":"y","Æ´":"y","É":"y","á»¿":"y","â©":"z","ï½":"z","Åº":"z","áº":"z","Å¼":"z","Å¾":"z","áº":"z","áº":"z","Æ¶":"z","È¥":"z","É":"z","â±¬":"z","ê£":"z","Î":"Î","Î":"Î","Î":"Î","Î":"Î","Îª":"Î","Î":"Î","Î":"Î¥","Î«":"Î¥","Î":"Î©","Î¬":"Î±","Î­":"Îµ","Î®":"Î·","Î¯":"Î¹","Ï":"Î¹","Î":"Î¹","Ï":"Î¿","Ï":"Ï","Ï":"Ï","Î°":"Ï","Ï":"Ï","Ï":"Ï"}}),t.define("select2/data/base",["../utils"],function(e){function t(e,n){t.__super__.constructor.call(this)}return e.Extend(t,e.Observable),t.prototype.current=function(e){throw new Error("The `current` method must be defined in child classes.")},t.prototype.query=function(e,t){throw new Error("The `query` method must be defined in child classes.")},t.prototype.bind=function(e,t){},t.prototype.destroy=function(){},t.prototype.generateResultId=function(t,n){var i=t.id+"-result-";return i+=e.generateChars(4),null!=n.id?i+="-"+n.id.toString():i+="-"+e.generateChars(4),i},t}),t.define("select2/data/select",["./base","../utils","jquery"],function(e,t,n){function i(e,t){this.$element=e,this.options=t,i.__super__.constructor.call(this)}return t.Extend(i,e),i.prototype.current=function(e){var t=[],i=this;this.$element.find(":selected").each(function(){var e=n(this),r=i.item(e);t.push(r)}),e(t)},i.prototype.select=function(e){var t=this;if(e.selected=!0,n(e.element).is("option"))return e.element.selected=!0,void this.$element.trigger("change");if(this.$element.prop("multiple"))this.current(function(i){var r=[];(e=[e]).push.apply(e,i);for(var s=0;s<e.length;s++){var o=e[s].id;-1===n.inArray(o,r)&&r.push(o)}t.$element.val(r),t.$element.trigger("change")});else{var i=e.id;this.$element.val(i),this.$element.trigger("change")}},i.prototype.unselect=function(e){var t=this;if(this.$element.prop("multiple")){if(e.selected=!1,n(e.element).is("option"))return e.element.selected=!1,void this.$element.trigger("change");this.current(function(i){for(var r=[],s=0;s<i.length;s++){var o=i[s].id;o!==e.id&&-1===n.inArray(o,r)&&r.push(o)}t.$element.val(r),t.$element.trigger("change")})}},i.prototype.bind=function(e,t){var n=this;this.container=e,e.on("select",function(e){n.select(e.data)}),e.on("unselect",function(e){n.unselect(e.data)})},i.prototype.destroy=function(){this.$element.find("*").each(function(){t.RemoveData(this)})},i.prototype.query=function(e,t){var i=[],r=this,s=this.$element.children();s.each(function(){var t=n(this);if(t.is("option")||t.is("optgroup")){var s=r.item(t),o=r.matches(e,s);null!==o&&i.push(o)}}),t({results:i})},i.prototype.addOptions=function(e){t.appendMany(this.$element,e)},i.prototype.option=function(e){var i;e.children?(i=document.createElement("optgroup")).label=e.text:void 0!==(i=document.createElement("option")).textContent?i.textContent=e.text:i.innerText=e.text,void 0!==e.id&&(i.value=e.id),e.disabled&&(i.disabled=!0),e.selected&&(i.selected=!0),e.title&&(i.title=e.title);var r=n(i),s=this._normalizeItem(e);return s.element=i,t.StoreData(i,"data",s),r},i.prototype.item=function(e){var i={};if(null!=(i=t.GetData(e[0],"data")))return i;if(e.is("option"))i={id:e.val(),text:e.text(),disabled:e.prop("disabled"),selected:e.prop("selected"),title:e.prop("title")};else if(e.is("optgroup")){i={text:e.prop("label"),children:[],title:e.prop("title")};for(var r=e.children("option"),s=[],o=0;o<r.length;o++){var a=n(r[o]),l=this.item(a);s.push(l)}i.children=s}return(i=this._normalizeItem(i)).element=e[0],t.StoreData(e[0],"data",i),i},i.prototype._normalizeItem=function(e){return e!==Object(e)&&(e={id:e,text:e}),null!=(e=n.extend({},{text:""},e)).id&&(e.id=e.id.toString()),null!=e.text&&(e.text=e.text.toString()),null==e._resultId&&e.id&&null!=this.container&&(e._resultId=this.generateResultId(this.container,e)),n.extend({},{selected:!1,disabled:!1},e)},i.prototype.matches=function(e,t){var n=this.options.get("matcher");return n(e,t)},i}),t.define("select2/data/array",["./select","../utils","jquery"],function(e,t,n){function i(e,t){var n=t.get("data")||[];i.__super__.constructor.call(this,e,t),this.addOptions(this.convertToOptions(n))}return t.Extend(i,e),i.prototype.select=function(e){var t=this.$element.find("option").filter(function(t,n){return n.value==e.id.toString()});0===t.length&&(t=this.option(e),this.addOptions(t)),i.__super__.select.call(this,e)},i.prototype.convertToOptions=function(e){var i=this,r=this.$element.find("option"),s=r.map(function(){return i.item(n(this)).id}).get(),o=[];function a(e){return function(){return n(this).val()==e.id}}for(var l=0;l<e.length;l++){var d=this._normalizeItem(e[l]);if(n.inArray(d.id,s)>=0){var c=r.filter(a(d)),u=this.item(c),p=n.extend(!0,{},d,u),h=this.option(p);c.replaceWith(h)}else{var f=this.option(d);if(d.children){var m=this.convertToOptions(d.children);t.appendMany(f,m)}o.push(f)}}return o},i}),t.define("select2/data/ajax",["./array","../utils","jquery"],function(e,t,n){function i(e,t){this.ajaxOptions=this._applyDefaults(t.get("ajax")),null!=this.ajaxOptions.processResults&&(this.processResults=this.ajaxOptions.processResults),i.__super__.constructor.call(this,e,t)}return t.Extend(i,e),i.prototype._applyDefaults=function(e){var t={data:function(e){return n.extend({},e,{q:e.term})},transport:function(e,t,i){var r=n.ajax(e);return r.then(t),r.fail(i),r}};return n.extend({},t,e,!0)},i.prototype.processResults=function(e){return e},i.prototype.query=function(e,t){var i=this;null!=this._request&&(n.isFunction(this._request.abort)&&this._request.abort(),this._request=null);var r=n.extend({type:"GET"},this.ajaxOptions);function s(){var s=r.transport(r,function(r){var s=i.processResults(r,e);i.options.get("debug")&&window.console&&console.error&&(s&&s.results&&n.isArray(s.results)||console.error("Select2: The AJAX results did not return an array in the `results` key of the response.")),t(s)},function(){"status"in s&&(0===s.status||"0"===s.status)||i.trigger("results:message",{message:"errorLoading"})});i._request=s}"function"==typeof r.url&&(r.url=r.url.call(this.$element,e)),"function"==typeof r.data&&(r.data=r.data.call(this.$element,e)),this.ajaxOptions.delay&&null!=e.term?(this._queryTimeout&&window.clearTimeout(this._queryTimeout),this._queryTimeout=window.setTimeout(s,this.ajaxOptions.delay)):s()},i}),t.define("select2/data/tags",["jquery"],function(e){function t(t,n,i){var r=i.get("tags"),s=i.get("createTag");void 0!==s&&(this.createTag=s);var o=i.get("insertTag");if(void 0!==o&&(this.insertTag=o),t.call(this,n,i),e.isArray(r))for(var a=0;a<r.length;a++){var l=r[a],d=this._normalizeItem(l),c=this.option(d);this.$element.append(c)}}return t.prototype.query=function(e,t,n){var i=this;this._removeOldTags(),null!=t.term&&null==t.page?e.call(this,t,function e(r,s){for(var o=r.results,a=0;a<o.length;a++){var l=o[a],d=null!=l.children&&!e({results:l.children},!0),c=(l.text||"").toUpperCase(),u=(t.term||"").toUpperCase(),p=c===u;if(p||d)return!s&&(r.data=o,void n(r))}if(s)return!0;var h=i.createTag(t);if(null!=h){var f=i.option(h);f.attr("data-select2-tag",!0),i.addOptions([f]),i.insertTag(o,h)}r.results=o,n(r)}):e.call(this,t,n)},t.prototype.createTag=function(t,n){var i=e.trim(n.term);return""===i?null:{id:i,text:i}},t.prototype.insertTag=function(e,t,n){t.unshift(n)},t.prototype._removeOldTags=function(t){this._lastTag;var n=this.$element.find("option[data-select2-tag]");n.each(function(){this.selected||e(this).remove()})},t}),t.define("select2/data/tokenizer",["jquery"],function(e){function t(e,t,n){var i=n.get("tokenizer");void 0!==i&&(this.tokenizer=i),e.call(this,t,n)}return t.prototype.bind=function(e,t,n){e.call(this,t,n),this.$search=t.dropdown.$search||t.selection.$search||n.find(".select2-search__field")},t.prototype.query=function(t,n,i){var r=this;n.term=n.term||"";var s=this.tokenizer(n,this.options,function(t){var n=r._normalizeItem(t);if(!r.$element.find("option").filter(function(){return e(this).val()===n.id}).length){var i=r.option(n);i.attr("data-select2-tag",!0),r._removeOldTags(),r.addOptions([i])}!function(e){r.trigger("select",{data:e})}(n)});s.term!==n.term&&(this.$search.length&&(this.$search.val(s.term),this.$search.focus()),n.term=s.term),t.call(this,n,i)},t.prototype.tokenizer=function(t,n,i,r){for(var s=i.get("tokenSeparators")||[],o=n.term,a=0,l=this.createTag||function(e){return{id:e.term,text:e.term}};a<o.length;){var d=o[a];if(-1!==e.inArray(d,s)){var c=o.substr(0,a),u=e.extend({},n,{term:c}),p=l(u);null!=p?(r(p),o=o.substr(a+1)||"",a=0):a++}else a++}return{term:o}},t}),t.define("select2/data/minimumInputLength",[],function(){function e(e,t,n){this.minimumInputLength=n.get("minimumInputLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){t.term=t.term||"",t.term.length<this.minimumInputLength?this.trigger("results:message",{message:"inputTooShort",args:{minimum:this.minimumInputLength,input:t.term,params:t}}):e.call(this,t,n)},e}),t.define("select2/data/maximumInputLength",[],function(){function e(e,t,n){this.maximumInputLength=n.get("maximumInputLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){t.term=t.term||"",this.maximumInputLength>0&&t.term.length>this.maximumInputLength?this.trigger("results:message",{message:"inputTooLong",args:{maximum:this.maximumInputLength,input:t.term,params:t}}):e.call(this,t,n)},e}),t.define("select2/data/maximumSelectionLength",[],function(){function e(e,t,n){this.maximumSelectionLength=n.get("maximumSelectionLength"),e.call(this,t,n)}return e.prototype.query=function(e,t,n){var i=this;this.current(function(r){var s=null!=r?r.length:0;i.maximumSelectionLength>0&&s>=i.maximumSelectionLength?i.trigger("results:message",{message:"maximumSelected",args:{maximum:i.maximumSelectionLength}}):e.call(i,t,n)})},e}),t.define("select2/dropdown",["jquery","./utils"],function(e,t){function n(e,t){this.$element=e,this.options=t,n.__super__.constructor.call(this)}return t.Extend(n,t.Observable),n.prototype.render=function(){var t=e('<span class="select2-dropdown"><span class="select2-results"></span></span>');return t.attr("dir",this.options.get("dir")),this.$dropdown=t,t},n.prototype.bind=function(){},n.prototype.position=function(e,t){},n.prototype.destroy=function(){this.$dropdown.remove()},n}),t.define("select2/dropdown/search",["jquery","../utils"],function(e,t){function n(){}return n.prototype.render=function(t){var n=t.call(this),i=e('<span class="select2-search select2-search--dropdown"><input class="select2-search__field" type="search" tabindex="-1" autocomplete="off" autocorrect="off" autocapitalize="none" spellcheck="false" role="textbox" /></span>');return this.$searchContainer=i,this.$search=i.find("input"),n.prepend(i),n},n.prototype.bind=function(t,n,i){var r=this;t.call(this,n,i),this.$search.on("keydown",function(e){r.trigger("keypress",e),r._keyUpPrevented=e.isDefaultPrevented()}),this.$search.on("input",function(t){e(this).off("keyup")}),this.$search.on("keyup input",function(e){r.handleSearch(e)}),n.on("open",function(){r.$search.attr("tabindex",0),r.$search.focus(),window.setTimeout(function(){r.$search.focus()},0)}),n.on("close",function(){r.$search.attr("tabindex",-1),r.$search.val(""),r.$search.blur()}),n.on("focus",function(){n.isOpen()||r.$search.focus()}),n.on("results:all",function(e){if(null==e.query.term||""===e.query.term){var t=r.showSearch(e);t?r.$searchContainer.removeClass("select2-search--hide"):r.$searchContainer.addClass("select2-search--hide")}})},n.prototype.handleSearch=function(e){if(!this._keyUpPrevented){var t=this.$search.val();this.trigger("query",{term:t})}this._keyUpPrevented=!1},n.prototype.showSearch=function(e,t){return!0},n}),t.define("select2/dropdown/hidePlaceholder",[],function(){function e(e,t,n,i){this.placeholder=this.normalizePlaceholder(n.get("placeholder")),e.call(this,t,n,i)}return e.prototype.append=function(e,t){t.results=this.removePlaceholder(t.results),e.call(this,t)},e.prototype.normalizePlaceholder=function(e,t){return"string"==typeof t&&(t={id:"",text:t}),t},e.prototype.removePlaceholder=function(e,t){for(var n=t.slice(0),i=t.length-1;i>=0;i--){var r=t[i];this.placeholder.id===r.id&&n.splice(i,1)}return n},e}),t.define("select2/dropdown/infiniteScroll",["jquery"],function(e){function t(e,t,n,i){this.lastParams={},e.call(this,t,n,i),this.$loadingMore=this.createLoadingMore(),this.loading=!1}return t.prototype.append=function(e,t){this.$loadingMore.remove(),this.loading=!1,e.call(this,t),this.showLoadingMore(t)&&this.$results.append(this.$loadingMore)},t.prototype.bind=function(t,n,i){var r=this;t.call(this,n,i),n.on("query",function(e){r.lastParams=e,r.loading=!0}),n.on("query:append",function(e){r.lastParams=e,r.loading=!0}),this.$results.on("scroll",function(){var t=e.contains(document.documentElement,r.$loadingMore[0]);if(!r.loading&&t){var n=r.$results.offset().top+r.$results.outerHeight(!1),i=r.$loadingMore.offset().top+r.$loadingMore.outerHeight(!1);n+50>=i&&r.loadMore()}})},t.prototype.loadMore=function(){this.loading=!0;var t=e.extend({},{page:1},this.lastParams);t.page++,this.trigger("query:append",t)},t.prototype.showLoadingMore=function(e,t){return t.pagination&&t.pagination.more},t.prototype.createLoadingMore=function(){var t=e('<li class="select2-results__option select2-results__option--load-more"role="treeitem" aria-disabled="true"></li>'),n=this.options.get("translations").get("loadingMore");return t.html(n(this.lastParams)),t},t}),t.define("select2/dropdown/attachBody",["jquery","../utils"],function(e,t){function n(t,n,i){this.$dropdownParent=i.get("dropdownParent")||e(document.body),t.call(this,n,i)}return n.prototype.bind=function(e,t,n){var i=this,r=!1;e.call(this,t,n),t.on("open",function(){i._showDropdown(),i._attachPositioningHandler(t),r||(r=!0,t.on("results:all",function(){i._positionDropdown(),i._resizeDropdown()}),t.on("results:append",function(){i._positionDropdown(),i._resizeDropdown()}))}),t.on("close",function(){i._hideDropdown(),i._detachPositioningHandler(t)}),this.$dropdownContainer.on("mousedown",function(e){e.stopPropagation()})},n.prototype.destroy=function(e){e.call(this),this.$dropdownContainer.remove()},n.prototype.position=function(e,t,n){t.attr("class",n.attr("class")),t.removeClass("select2"),t.addClass("select2-container--open"),t.css({position:"absolute",top:-999999}),this.$container=n},n.prototype.render=function(t){var n=e("<span></span>"),i=t.call(this);return n.append(i),this.$dropdownContainer=n,n},n.prototype._hideDropdown=function(e){this.$dropdownContainer.detach()},n.prototype._attachPositioningHandler=function(n,i){var r=this,s="scroll.select2."+i.id,o="resize.select2."+i.id,a="orientationchange.select2."+i.id,l=this.$container.parents().filter(t.hasScroll);l.each(function(){t.StoreData(this,"select2-scroll-position",{x:e(this).scrollLeft(),y:e(this).scrollTop()})}),l.on(s,function(n){var i=t.GetData(this,"select2-scroll-position");e(this).scrollTop(i.y)}),e(window).on(s+" "+o+" "+a,function(e){r._positionDropdown(),r._resizeDropdown()})},n.prototype._detachPositioningHandler=function(n,i){var r="scroll.select2."+i.id,s="resize.select2."+i.id,o="orientationchange.select2."+i.id,a=this.$container.parents().filter(t.hasScroll);a.off(r),e(window).off(r+" "+s+" "+o)},n.prototype._positionDropdown=function(){var t=e(window),n=this.$dropdown.hasClass("select2-dropdown--above"),i=this.$dropdown.hasClass("select2-dropdown--below"),r=null,s=this.$container.offset();s.bottom=s.top+this.$container.outerHeight(!1);var o={height:this.$container.outerHeight(!1)};o.top=s.top,o.bottom=s.top+o.height;var a={height:this.$dropdown.outerHeight(!1)},l={top:t.scrollTop(),bottom:t.scrollTop()+t.height()},d=l.top<s.top-a.height,c=l.bottom>s.bottom+a.height,u={left:s.left,top:o.bottom},p=this.$dropdownParent;"static"===p.css("position")&&(p=p.offsetParent());var h=p.offset();u.top-=h.top,u.left-=h.left,n||i||(r="below"),c||!d||n?!d&&c&&n&&(r="below"):r="above",("above"==r||n&&"below"!==r)&&(u.top=o.top-h.top-a.height),null!=r&&(this.$dropdown.removeClass("select2-dropdown--below select2-dropdown--above").addClass("select2-dropdown--"+r),this.$container.removeClass("select2-container--below select2-container--above").addClass("select2-container--"+r)),this.$dropdownContainer.css(u)},n.prototype._resizeDropdown=function(){var e={width:this.$container.outerWidth(!1)+"px"};this.options.get("dropdownAutoWidth")&&(e.minWidth=e.width,e.position="relative",e.width="auto"),this.$dropdown.css(e)},n.prototype._showDropdown=function(e){this.$dropdownContainer.appendTo(this.$dropdownParent),this._positionDropdown(),this._resizeDropdown()},n}),t.define("select2/dropdown/minimumResultsForSearch",[],function(){function e(e,t,n,i){this.minimumResultsForSearch=n.get("minimumResultsForSearch"),this.minimumResultsForSearch<0&&(this.minimumResultsForSearch=1/0),e.call(this,t,n,i)}return e.prototype.showSearch=function(e,t){return!(function e(t){for(var n=0,i=0;i<t.length;i++){var r=t[i];r.children?n+=e(r.children):n++}return n}(t.data.results)<this.minimumResultsForSearch)&&e.call(this,t)},e}),t.define("select2/dropdown/selectOnClose",["../utils"],function(e){function t(){}return t.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("close",function(e){i._handleSelectOnClose(e)})},t.prototype._handleSelectOnClose=function(t,n){if(n&&null!=n.originalSelect2Event){var i=n.originalSelect2Event;if("select"===i._type||"unselect"===i._type)return}var r=this.getHighlightedResults();if(!(r.length<1)){var s=e.GetData(r[0],"data");null!=s.element&&s.element.selected||null==s.element&&s.selected||this.trigger("select",{data:s})}},t}),t.define("select2/dropdown/closeOnSelect",[],function(){function e(){}return e.prototype.bind=function(e,t,n){var i=this;e.call(this,t,n),t.on("select",function(e){i._selectTriggered(e)}),t.on("unselect",function(e){i._selectTriggered(e)})},e.prototype._selectTriggered=function(e,t){var n=t.originalEvent;n&&n.ctrlKey||this.trigger("close",{originalEvent:n,originalSelect2Event:t})},e}),t.define("select2/i18n/en",[],function(){return{errorLoading:function(){return"The results could not be loaded."},inputTooLong:function(e){var t=e.input.length-e.maximum,n="Please delete "+t+" character";return 1!=t&&(n+="s"),n},inputTooShort:function(e){var t=e.minimum-e.input.length,n="Please enter "+t+" or more characters";return n},loadingMore:function(){return"Loading more resultsâ¦"},maximumSelected:function(e){var t="You can only select "+e.maximum+" item";return 1!=e.maximum&&(t+="s"),t},noResults:function(){return"No results found"},searching:function(){return"Searchingâ¦"}}}),t.define("select2/defaults",["jquery","require","./results","./selection/single","./selection/multiple","./selection/placeholder","./selection/allowClear","./selection/search","./selection/eventRelay","./utils","./translation","./diacritics","./data/select","./data/array","./data/ajax","./data/tags","./data/tokenizer","./data/minimumInputLength","./data/maximumInputLength","./data/maximumSelectionLength","./dropdown","./dropdown/search","./dropdown/hidePlaceholder","./dropdown/infiniteScroll","./dropdown/attachBody","./dropdown/minimumResultsForSearch","./dropdown/selectOnClose","./dropdown/closeOnSelect","./i18n/en"],function(e,t,n,i,r,s,o,a,l,d,c,u,p,h,f,m,g,v,y,b,w,E,x,T,S,C,k,P,$){function A(){this.reset()}A.prototype.apply=function(u){if(null==(u=e.extend(!0,{},this.defaults,u)).dataAdapter){if(null!=u.ajax?u.dataAdapter=f:null!=u.data?u.dataAdapter=h:u.dataAdapter=p,u.minimumInputLength>0&&(u.dataAdapter=d.Decorate(u.dataAdapter,v)),u.maximumInputLength>0&&(u.dataAdapter=d.Decorate(u.dataAdapter,y)),u.maximumSelectionLength>0&&(u.dataAdapter=d.Decorate(u.dataAdapter,b)),u.tags&&(u.dataAdapter=d.Decorate(u.dataAdapter,m)),null==u.tokenSeparators&&null==u.tokenizer||(u.dataAdapter=d.Decorate(u.dataAdapter,g)),null!=u.query){var $=t(u.amdBase+"compat/query");u.dataAdapter=d.Decorate(u.dataAdapter,$)}if(null!=u.initSelection){var A=t(u.amdBase+"compat/initSelection");u.dataAdapter=d.Decorate(u.dataAdapter,A)}}if(null==u.resultsAdapter&&(u.resultsAdapter=n,null!=u.ajax&&(u.resultsAdapter=d.Decorate(u.resultsAdapter,T)),null!=u.placeholder&&(u.resultsAdapter=d.Decorate(u.resultsAdapter,x)),u.selectOnClose&&(u.resultsAdapter=d.Decorate(u.resultsAdapter,k))),null==u.dropdownAdapter){if(u.multiple)u.dropdownAdapter=w;else{var _=d.Decorate(w,E);u.dropdownAdapter=_}if(0!==u.minimumResultsForSearch&&(u.dropdownAdapter=d.Decorate(u.dropdownAdapter,C)),u.closeOnSelect&&(u.dropdownAdapter=d.Decorate(u.dropdownAdapter,P)),null!=u.dropdownCssClass||null!=u.dropdownCss||null!=u.adaptDropdownCssClass){var L=t(u.amdBase+"compat/dropdownCss");u.dropdownAdapter=d.Decorate(u.dropdownAdapter,L)}u.dropdownAdapter=d.Decorate(u.dropdownAdapter,S)}if(null==u.selectionAdapter){if(u.multiple?u.selectionAdapter=r:u.selectionAdapter=i,null!=u.placeholder&&(u.selectionAdapter=d.Decorate(u.selectionAdapter,s)),u.allowClear&&(u.selectionAdapter=d.Decorate(u.selectionAdapter,o)),u.multiple&&(u.selectionAdapter=d.Decorate(u.selectionAdapter,a)),null!=u.containerCssClass||null!=u.containerCss||null!=u.adaptContainerCssClass){var M=t(u.amdBase+"compat/containerCss");u.selectionAdapter=d.Decorate(u.selectionAdapter,M)}u.selectionAdapter=d.Decorate(u.selectionAdapter,l)}if("string"==typeof u.language)if(u.language.indexOf("-")>0){var N=u.language.split("-"),D=N[0];u.language=[u.language,D]}else u.language=[u.language];if(e.isArray(u.language)){var I=new c;u.language.push("en");for(var O=u.language,j=0;j<O.length;j++){var F=O[j],z={};try{z=c.loadPath(F)}catch(e){try{F=this.defaults.amdLanguageBase+F,z=c.loadPath(F)}catch(e){u.debug&&window.console&&console.warn&&console.warn('Select2: The language file for "'+F+'" could not be automatically loaded. A fallback will be used instead.');continue}}I.extend(z)}u.translations=I}else{var H=c.loadPath(this.defaults.amdLanguageBase+"en"),R=new c(u.language);R.extend(H),u.translations=R}return u},A.prototype.reset=function(){function t(e){return e.replace(/[^\u0000-\u007E]/g,function(e){return u[e]||e})}this.defaults={amdBase:"./",amdLanguageBase:"./i18n/",closeOnSelect:!0,debug:!1,dropdownAutoWidth:!1,escapeMarkup:d.escapeMarkup,language:$,matcher:function n(i,r){if(""===e.trim(i.term))return r;if(r.children&&r.children.length>0){for(var s=e.extend(!0,{},r),o=r.children.length-1;o>=0;o--){var a=r.children[o],l=n(i,a);null==l&&s.children.splice(o,1)}return s.children.length>0?s:n(i,s)}var d=t(r.text).toUpperCase(),c=t(i.term).toUpperCase();return d.indexOf(c)>-1?r:null},minimumInputLength:0,maximumInputLength:0,maximumSelectionLength:0,minimumResultsForSearch:0,selectOnClose:!1,sorter:function(e){return e},templateResult:function(e){return e.text},templateSelection:function(e){return e.text},theme:"default",width:"resolve"}},A.prototype.set=function(t,n){var i=e.camelCase(t),r={};r[i]=n;var s=d._convertData(r);e.extend(!0,this.defaults,s)};var _=new A;return _}),t.define("select2/options",["require","jquery","./defaults","./utils"],function(e,t,n,i){function r(t,r){if(this.options=t,null!=r&&this.fromElement(r),this.options=n.apply(this.options),r&&r.is("input")){var s=e(this.get("amdBase")+"compat/inputData");this.options.dataAdapter=i.Decorate(this.options.dataAdapter,s)}}return r.prototype.fromElement=function(e){var n=["select2"];null==this.options.multiple&&(this.options.multiple=e.prop("multiple")),null==this.options.disabled&&(this.options.disabled=e.prop("disabled")),null==this.options.language&&(e.prop("lang")?this.options.language=e.prop("lang").toLowerCase():e.closest("[lang]").prop("lang")&&(this.options.language=e.closest("[lang]").prop("lang"))),null==this.options.dir&&(e.prop("dir")?this.options.dir=e.prop("dir"):e.closest("[dir]").prop("dir")?this.options.dir=e.closest("[dir]").prop("dir"):this.options.dir="ltr"),e.prop("disabled",this.options.disabled),e.prop("multiple",this.options.multiple),i.GetData(e[0],"select2Tags")&&(this.options.debug&&window.console&&console.warn&&console.warn('Select2: The `data-select2-tags` attribute has been changed to use the `data-data` and `data-tags="true"` attributes and will be removed in future versions of Select2.'),i.StoreData(e[0],"data",i.GetData(e[0],"select2Tags")),i.StoreData(e[0],"tags",!0)),i.GetData(e[0],"ajaxUrl")&&(this.options.debug&&window.console&&console.warn&&console.warn("Select2: The `data-ajax-url` attribute has been changed to `data-ajax--url` and support for the old attribute will be removed in future versions of Select2."),e.attr("ajax--url",i.GetData(e[0],"ajaxUrl")),i.StoreData(e[0],"ajax-Url",i.GetData(e[0],"ajaxUrl")));var r={};r=t.fn.jquery&&"1."==t.fn.jquery.substr(0,2)&&e[0].dataset?t.extend(!0,{},e[0].dataset,i.GetData(e[0])):i.GetData(e[0]);var s=t.extend(!0,{},r);for(var o in s=i._convertData(s))t.inArray(o,n)>-1||(t.isPlainObject(this.options[o])?t.extend(this.options[o],s[o]):this.options[o]=s[o]);return this},r.prototype.get=function(e){return this.options[e]},r.prototype.set=function(e,t){this.options[e]=t},r}),t.define("select2/core",["jquery","./options","./utils","./keys"],function(e,t,n,i){var r=function(e,i){null!=n.GetData(e[0],"select2")&&n.GetData(e[0],"select2").destroy(),this.$element=e,this.id=this._generateId(e),i=i||{},this.options=new t(i,e),r.__super__.constructor.call(this);var s=e.attr("tabindex")||0;n.StoreData(e[0],"old-tabindex",s),e.attr("tabindex","-1");var o=this.options.get("dataAdapter");this.dataAdapter=new o(e,this.options);var a=this.render();this._placeContainer(a);var l=this.options.get("selectionAdapter");this.selection=new l(e,this.options),this.$selection=this.selection.render(),this.selection.position(this.$selection,a);var d=this.options.get("dropdownAdapter");this.dropdown=new d(e,this.options),this.$dropdown=this.dropdown.render(),this.dropdown.position(this.$dropdown,a);var c=this.options.get("resultsAdapter");this.results=new c(e,this.options,this.dataAdapter),this.$results=this.results.render(),this.results.position(this.$results,this.$dropdown);var u=this;this._bindAdapters(),this._registerDomEvents(),this._registerDataEvents(),this._registerSelectionEvents(),this._registerDropdownEvents(),this._registerResultsEvents(),this._registerEvents(),this.dataAdapter.current(function(e){u.trigger("selection:update",{data:e})}),e.addClass("select2-hidden-accessible"),e.attr("aria-hidden","true"),this._syncAttributes(),n.StoreData(e[0],"select2",this),e.data("select2",this)};return n.Extend(r,n.Observable),r.prototype._generateId=function(e){return"select2-"+(null!=e.attr("id")?e.attr("id"):null!=e.attr("name")?e.attr("name")+"-"+n.generateChars(2):n.generateChars(4)).replace(/(:|\.|\[|\]|,)/g,"")},r.prototype._placeContainer=function(e){e.insertAfter(this.$element);var t=this._resolveWidth(this.$element,this.options.get("width"));null!=t&&e.css("width",t)},r.prototype._resolveWidth=function(e,t){var n=/^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;if("resolve"==t){var i=this._resolveWidth(e,"style");return null!=i?i:this._resolveWidth(e,"element")}if("element"==t){var r=e.outerWidth(!1);return r<=0?"auto":r+"px"}if("style"==t){var s=e.attr("style");if("string"!=typeof s)return null;for(var o=s.split(";"),a=0,l=o.length;a<l;a+=1){var d=o[a].replace(/\s/g,""),c=d.match(n);if(null!==c&&c.length>=1)return c[1]}return null}return t},r.prototype._bindAdapters=function(){this.dataAdapter.bind(this,this.$container),this.selection.bind(this,this.$container),this.dropdown.bind(this,this.$container),this.results.bind(this,this.$container)},r.prototype._registerDomEvents=function(){var t=this;this.$element.on("change.select2",function(){t.dataAdapter.current(function(e){t.trigger("selection:update",{data:e})})}),this.$element.on("focus.select2",function(e){t.trigger("focus",e)}),this._syncA=n.bind(this._syncAttributes,this),this._syncS=n.bind(this._syncSubtree,this),this.$element[0].attachEvent&&this.$element[0].attachEvent("onpropertychange",this._syncA);var i=window.MutationObserver||window.WebKitMutationObserver||window.MozMutationObserver;null!=i?(this._observer=new i(function(n){e.each(n,t._syncA),e.each(n,t._syncS)}),this._observer.observe(this.$element[0],{attributes:!0,childList:!0,subtree:!1})):this.$element[0].addEventListener&&(this.$element[0].addEventListener("DOMAttrModified",t._syncA,!1),this.$element[0].addEventListener("DOMNodeInserted",t._syncS,!1),this.$element[0].addEventListener("DOMNodeRemoved",t._syncS,!1))},r.prototype._registerDataEvents=function(){var e=this;this.dataAdapter.on("*",function(t,n){e.trigger(t,n)})},r.prototype._registerSelectionEvents=function(){var t=this,n=["toggle","focus"];this.selection.on("toggle",function(){t.toggleDropdown()}),this.selection.on("focus",function(e){t.focus(e)}),this.selection.on("*",function(i,r){-1===e.inArray(i,n)&&t.trigger(i,r)})},r.prototype._registerDropdownEvents=function(){var e=this;this.dropdown.on("*",function(t,n){e.trigger(t,n)})},r.prototype._registerResultsEvents=function(){var e=this;this.results.on("*",function(t,n){e.trigger(t,n)})},r.prototype._registerEvents=function(){var e=this;this.on("open",function(){e.$container.addClass("select2-container--open")}),this.on("close",function(){e.$container.removeClass("select2-container--open")}),this.on("enable",function(){e.$container.removeClass("select2-container--disabled")}),this.on("disable",function(){e.$container.addClass("select2-container--disabled")}),this.on("blur",function(){e.$container.removeClass("select2-container--focus")}),this.on("query",function(t){e.isOpen()||e.trigger("open",{}),this.dataAdapter.query(t,function(n){e.trigger("results:all",{data:n,query:t})})}),this.on("query:append",function(t){this.dataAdapter.query(t,function(n){e.trigger("results:append",{data:n,query:t})})}),this.on("keypress",function(t){var n=t.which;e.isOpen()?n===i.ESC||n===i.TAB||n===i.UP&&t.altKey?(e.close(),t.preventDefault()):n===i.ENTER?(e.trigger("results:select",{}),t.preventDefault()):n===i.SPACE&&t.ctrlKey?(e.trigger("results:toggle",{}),t.preventDefault()):n===i.UP?(e.trigger("results:previous",{}),t.preventDefault()):n===i.DOWN&&(e.trigger("results:next",{}),t.preventDefault()):(n===i.ENTER||n===i.SPACE||n===i.DOWN&&t.altKey)&&(e.open(),t.preventDefault())})},r.prototype._syncAttributes=function(){this.options.set("disabled",this.$element.prop("disabled")),this.options.get("disabled")?(this.isOpen()&&this.close(),this.trigger("disable",{})):this.trigger("enable",{})},r.prototype._syncSubtree=function(e,t){var n=!1,i=this;if(!e||!e.target||"OPTION"===e.target.nodeName||"OPTGROUP"===e.target.nodeName){if(t)if(t.addedNodes&&t.addedNodes.length>0)for(var r=0;r<t.addedNodes.length;r++){var s=t.addedNodes[r];s.selected&&(n=!0)}else t.removedNodes&&t.removedNodes.length>0&&(n=!0);else n=!0;n&&this.dataAdapter.current(function(e){i.trigger("selection:update",{data:e})})}},r.prototype.trigger=function(e,t){var n=r.__super__.trigger,i={open:"opening",close:"closing",select:"selecting",unselect:"unselecting",clear:"clearing"};if(void 0===t&&(t={}),e in i){var s=i[e],o={prevented:!1,name:e,args:t};if(n.call(this,s,o),o.prevented)return void(t.prevented=!0)}n.call(this,e,t)},r.prototype.toggleDropdown=function(){this.options.get("disabled")||(this.isOpen()?this.close():this.open())},r.prototype.open=function(){this.isOpen()||this.trigger("query",{})},r.prototype.close=function(){this.isOpen()&&this.trigger("close",{})},r.prototype.isOpen=function(){return this.$container.hasClass("select2-container--open")},r.prototype.hasFocus=function(){return this.$container.hasClass("select2-container--focus")},r.prototype.focus=function(e){this.hasFocus()||(this.$container.addClass("select2-container--focus"),this.trigger("focus",{}))},r.prototype.enable=function(e){this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("enable")` method has been deprecated and will be removed in later Select2 versions. Use $element.prop("disabled") instead.'),null!=e&&0!==e.length||(e=[!0]);var t=!e[0];this.$element.prop("disabled",t)},r.prototype.data=function(){this.options.get("debug")&&arguments.length>0&&window.console&&console.warn&&console.warn('Select2: Data can no longer be set using `select2("data")`. You should consider setting the value instead using `$element.val()`.');var e=[];return this.dataAdapter.current(function(t){e=t}),e},r.prototype.val=function(t){if(this.options.get("debug")&&window.console&&console.warn&&console.warn('Select2: The `select2("val")` method has been deprecated and will be removed in later Select2 versions. Use $element.val() instead.'),null==t||0===t.length)return this.$element.val();var n=t[0];e.isArray(n)&&(n=e.map(n,function(e){return e.toString()})),this.$element.val(n).trigger("change")},r.prototype.destroy=function(){this.$container.remove(),this.$element[0].detachEvent&&this.$element[0].detachEvent("onpropertychange",this._syncA),null!=this._observer?(this._observer.disconnect(),this._observer=null):this.$element[0].removeEventListener&&(this.$element[0].removeEventListener("DOMAttrModified",this._syncA,!1),this.$element[0].removeEventListener("DOMNodeInserted",this._syncS,!1),this.$element[0].removeEventListener("DOMNodeRemoved",this._syncS,!1)),this._syncA=null,this._syncS=null,this.$element.off(".select2"),this.$element.attr("tabindex",n.GetData(this.$element[0],"old-tabindex")),this.$element.removeClass("select2-hidden-accessible"),this.$element.attr("aria-hidden","false"),n.RemoveData(this.$element[0]),this.$element.removeData("select2"),this.dataAdapter.destroy(),this.selection.destroy(),this.dropdown.destroy(),this.results.destroy(),this.dataAdapter=null,this.selection=null,this.dropdown=null,this.results=null},r.prototype.render=function(){var t=e('<span class="select2 select2-container"><span class="selection"></span><span class="dropdown-wrapper" aria-hidden="true"></span></span>');return t.attr("dir",this.options.get("dir")),this.$container=t,this.$container.addClass("select2-container--"+this.options.get("theme")),n.StoreData(t[0],"element",this.$element),t},r}),t.define("jquery-mousewheel",["jquery"],function(e){return e}),t.define("jquery.select2",["jquery","jquery-mousewheel","./select2/core","./select2/defaults","./select2/utils"],function(e,t,n,i,r){if(null==e.fn.select2){var s=["open","close","destroy"];e.fn.select2=function(t){if("object"==typeof(t=t||{}))return this.each(function(){var i=e.extend(!0,{},t);new n(e(this),i)}),this;if("string"==typeof t){var i,o=Array.prototype.slice.call(arguments,1);return this.each(function(){var e=r.GetData(this,"select2");null==e&&window.console&&console.error&&console.error("The select2('"+t+"') method was called on an element that is not using Select2."),i=e[t].apply(e,o)}),e.inArray(t,s)>-1?this:i}throw new Error("Invalid arguments for Select2: "+t)}}return null==e.fn.select2.defaults&&(e.fn.select2.defaults=i),n}),{define:t.define,require:t.require}}(),n=t.require("jquery.select2");return e.fn.select2.amd=t,n})?i.apply(t,r):i)||(e.exports=s)},function(e,t,n){e.exports=n(7)},function(e,t,n){(function(e,t){var n;
/*!
 * MediaElement.js
 * http://www.mediaelementjs.com/
 *
 * Wrapper that mimics native HTML5 MediaElement (audio and video)
 * using a variety of technologies (pure JavaScript, Flash, iframe)
 *
 * Copyright 2010-2017, John Dyer (http://j.hn/)
 * License: MIT
 *
 */
!function e(t,i,r){function s(a,l){if(!i[a]){if(!t[a]){if(!l&&("function"==typeof n&&n))return n(a,!0);if(o)return o(a,!0);var d=new Error("Cannot find module '"+a+"'");throw d.code="MODULE_NOT_FOUND",d}var c=i[a]={exports:{}};t[a][0].call(c.exports,function(e){var n=t[a][1][e];return s(n||e)},c,c.exports,e,t,i,r)}return i[a].exports}for(var o="function"==typeof n&&n,a=0;a<r.length;a++)s(r[a]);return s}({1:[function(e,t,n){},{}],2:[function(t,n,i){(function(e){var i,r=void 0!==e?e:"undefined"!=typeof window?window:{},s=t(1);"undefined"!=typeof document?i=document:(i=r["__GLOBAL_DOCUMENT_CACHE@4"])||(i=r["__GLOBAL_DOCUMENT_CACHE@4"]=s),n.exports=i}).call(this,void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{1:1}],3:[function(t,n,i){(function(e){var t;t="undefined"!=typeof window?window:void 0!==e?e:"undefined"!=typeof self?self:{},n.exports=t}).call(this,void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],4:[function(e,n,i){!function(e){var i=setTimeout;function r(){}function s(e){if("object"!=typeof this)throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],c(e,this)}function o(e,t){for(;3===e._state;)e=e._value;0!==e._state?(e._handled=!0,s._immediateFn(function(){var n=1===e._state?t.onFulfilled:t.onRejected;if(null!==n){var i;try{i=n(e._value)}catch(e){return void l(t.promise,e)}a(t.promise,i)}else(1===e._state?a:l)(t.promise,e._value)})):e._deferreds.push(t)}function a(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var n=t.then;if(t instanceof s)return e._state=3,e._value=t,void d(e);if("function"==typeof n)return void c(function(e,t){return function(){e.apply(t,arguments)}}(n,t),e)}e._state=1,e._value=t,d(e)}catch(t){l(e,t)}}function l(e,t){e._state=2,e._value=t,d(e)}function d(e){2===e._state&&0===e._deferreds.length&&s._immediateFn(function(){e._handled||s._unhandledRejectionFn(e._value)});for(var t=0,n=e._deferreds.length;t<n;t++)o(e,e._deferreds[t]);e._deferreds=null}function c(e,t){var n=!1;try{e(function(e){n||(n=!0,a(t,e))},function(e){n||(n=!0,l(t,e))})}catch(e){if(n)return;n=!0,l(t,e)}}s.prototype.catch=function(e){return this.then(null,e)},s.prototype.then=function(e,t){var n=new this.constructor(r);return o(this,new function(e,t,n){this.onFulfilled="function"==typeof e?e:null,this.onRejected="function"==typeof t?t:null,this.promise=n}(e,t,n)),n},s.all=function(e){var t=Array.prototype.slice.call(e);return new s(function(e,n){if(0===t.length)return e([]);var i=t.length;function r(s,o){try{if(o&&("object"==typeof o||"function"==typeof o)){var a=o.then;if("function"==typeof a)return void a.call(o,function(e){r(s,e)},n)}t[s]=o,0==--i&&e(t)}catch(e){n(e)}}for(var s=0;s<t.length;s++)r(s,t[s])})},s.resolve=function(e){return e&&"object"==typeof e&&e.constructor===s?e:new s(function(t){t(e)})},s.reject=function(e){return new s(function(t,n){n(e)})},s.race=function(e){return new s(function(t,n){for(var i=0,r=e.length;i<r;i++)e[i].then(t,n)})},s._immediateFn="function"==typeof t&&function(e){t(e)}||function(e){i(e,0)},s._unhandledRejectionFn=function(e){"undefined"!=typeof console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)},s._setImmediateFn=function(e){s._immediateFn=e},s._setUnhandledRejectionFn=function(e){s._unhandledRejectionFn=e},void 0!==n&&n.exports?n.exports=s:e.Promise||(e.Promise=s)}(this)},{}],5:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=function(e){return e&&e.__esModule?e:{default:e}}(e(7)),s=e(15),o=e(27);var a={lang:"en",en:s.EN,language:function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];if(null!==t&&void 0!==t&&t.length){if("string"!=typeof t[0])throw new TypeError("Language code must be a string value");if(!/^[a-z]{2,3}((\-|_)[a-z]{2})?$/i.test(t[0]))throw new TypeError("Language code must have format 2-3 letters and. optionally, hyphen, underscore followed by 2 more letters");a.lang=t[0],void 0===a[t[0]]?(t[1]=null!==t[1]&&void 0!==t[1]&&"object"===i(t[1])?t[1]:{},a[t[0]]=(0,o.isObjectEmpty)(t[1])?s.EN:t[1]):null!==t[1]&&void 0!==t[1]&&"object"===i(t[1])&&(a[t[0]]=t[1])}return a.lang},t:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null;if("string"==typeof e&&e.length){var n=void 0,r=void 0,s=a.language(),l=function(e,t,n){return"object"!==(void 0===e?"undefined":i(e))||"number"!=typeof t||"number"!=typeof n?e:[function(){return arguments.length<=1?void 0:arguments[1]},function(){return 1===(arguments.length<=0?void 0:arguments[0])?arguments.length<=1?void 0:arguments[1]:arguments.length<=2?void 0:arguments[2]},function(){return 0===(arguments.length<=0?void 0:arguments[0])||1===(arguments.length<=0?void 0:arguments[0])?arguments.length<=1?void 0:arguments[1]:arguments.length<=2?void 0:arguments[2]},function(){return(arguments.length<=0?void 0:arguments[0])%10==1&&(arguments.length<=0?void 0:arguments[0])%100!=11?arguments.length<=1?void 0:arguments[1]:0!==(arguments.length<=0?void 0:arguments[0])?arguments.length<=2?void 0:arguments[2]:arguments.length<=3?void 0:arguments[3]},function(){return 1===(arguments.length<=0?void 0:arguments[0])||11===(arguments.length<=0?void 0:arguments[0])?arguments.length<=1?void 0:arguments[1]:2===(arguments.length<=0?void 0:arguments[0])||12===(arguments.length<=0?void 0:arguments[0])?arguments.length<=2?void 0:arguments[2]:(arguments.length<=0?void 0:arguments[0])>2&&(arguments.length<=0?void 0:arguments[0])<20?arguments.length<=3?void 0:arguments[3]:arguments.length<=4?void 0:arguments[4]},function(){return 1===(arguments.length<=0?void 0:arguments[0])?arguments.length<=1?void 0:arguments[1]:0===(arguments.length<=0?void 0:arguments[0])||(arguments.length<=0?void 0:arguments[0])%100>0&&(arguments.length<=0?void 0:arguments[0])%100<20?arguments.length<=2?void 0:arguments[2]:arguments.length<=3?void 0:arguments[3]},function(){return(arguments.length<=0?void 0:arguments[0])%10==1&&(arguments.length<=0?void 0:arguments[0])%100!=11?arguments.length<=1?void 0:arguments[1]:(arguments.length<=0?void 0:arguments[0])%10>=2&&((arguments.length<=0?void 0:arguments[0])%100<10||(arguments.length<=0?void 0:arguments[0])%100>=20)?arguments.length<=2?void 0:arguments[2]:[3]},function(){return(arguments.length<=0?void 0:arguments[0])%10==1&&(arguments.length<=0?void 0:arguments[0])%100!=11?arguments.length<=1?void 0:arguments[1]:(arguments.length<=0?void 0:arguments[0])%10>=2&&(arguments.length<=0?void 0:arguments[0])%10<=4&&((arguments.length<=0?void 0:arguments[0])%100<10||(arguments.length<=0?void 0:arguments[0])%100>=20)?arguments.length<=2?void 0:arguments[2]:arguments.length<=3?void 0:arguments[3]},function(){return 1===(arguments.length<=0?void 0:arguments[0])?arguments.length<=1?void 0:arguments[1]:(arguments.length<=0?void 0:arguments[0])>=2&&(arguments.length<=0?void 0:arguments[0])<=4?arguments.length<=2?void 0:arguments[2]:arguments.length<=3?void 0:arguments[3]},function(){return 1===(arguments.length<=0?void 0:arguments[0])?arguments.length<=1?void 0:arguments[1]:(arguments.length<=0?void 0:arguments[0])%10>=2&&(arguments.length<=0?void 0:arguments[0])%10<=4&&((arguments.length<=0?void 0:arguments[0])%100<10||(arguments.length<=0?void 0:arguments[0])%100>=20)?arguments.length<=2?void 0:arguments[2]:arguments.length<=3?void 0:arguments[3]},function(){return(arguments.length<=0?void 0:arguments[0])%100==1?arguments.length<=2?void 0:arguments[2]:(arguments.length<=0?void 0:arguments[0])%100==2?arguments.length<=3?void 0:arguments[3]:(arguments.length<=0?void 0:arguments[0])%100==3||(arguments.length<=0?void 0:arguments[0])%100==4?arguments.length<=4?void 0:arguments[4]:arguments.length<=1?void 0:arguments[1]},function(){return 1===(arguments.length<=0?void 0:arguments[0])?arguments.length<=1?void 0:arguments[1]:2===(arguments.length<=0?void 0:arguments[0])?arguments.length<=2?void 0:arguments[2]:(arguments.length<=0?void 0:arguments[0])>2&&(arguments.length<=0?void 0:arguments[0])<7?arguments.length<=3?void 0:arguments[3]:(arguments.length<=0?void 0:arguments[0])>6&&(arguments.length<=0?void 0:arguments[0])<11?arguments.length<=4?void 0:arguments[4]:arguments.length<=5?void 0:arguments[5]},function(){return 0===(arguments.length<=0?void 0:arguments[0])?arguments.length<=1?void 0:arguments[1]:1===(arguments.length<=0?void 0:arguments[0])?arguments.length<=2?void 0:arguments[2]:2===(arguments.length<=0?void 0:arguments[0])?arguments.length<=3?void 0:arguments[3]:(arguments.length<=0?void 0:arguments[0])%100>=3&&(arguments.length<=0?void 0:arguments[0])%100<=10?arguments.length<=4?void 0:arguments[4]:(arguments.length<=0?void 0:arguments[0])%100>=11?arguments.length<=5?void 0:arguments[5]:arguments.length<=6?void 0:arguments[6]},function(){return 1===(arguments.length<=0?void 0:arguments[0])?arguments.length<=1?void 0:arguments[1]:0===(arguments.length<=0?void 0:arguments[0])||(arguments.length<=0?void 0:arguments[0])%100>1&&(arguments.length<=0?void 0:arguments[0])%100<11?arguments.length<=2?void 0:arguments[2]:(arguments.length<=0?void 0:arguments[0])%100>10&&(arguments.length<=0?void 0:arguments[0])%100<20?arguments.length<=3?void 0:arguments[3]:arguments.length<=4?void 0:arguments[4]},function(){return(arguments.length<=0?void 0:arguments[0])%10==1?arguments.length<=1?void 0:arguments[1]:(arguments.length<=0?void 0:arguments[0])%10==2?arguments.length<=2?void 0:arguments[2]:arguments.length<=3?void 0:arguments[3]},function(){return 11!==(arguments.length<=0?void 0:arguments[0])&&(arguments.length<=0?void 0:arguments[0])%10==1?arguments.length<=1?void 0:arguments[1]:arguments.length<=2?void 0:arguments[2]},function(){return 1===(arguments.length<=0?void 0:arguments[0])?arguments.length<=1?void 0:arguments[1]:(arguments.length<=0?void 0:arguments[0])%10>=2&&(arguments.length<=0?void 0:arguments[0])%10<=4&&((arguments.length<=0?void 0:arguments[0])%100<10||(arguments.length<=0?void 0:arguments[0])%100>=20)?arguments.length<=2?void 0:arguments[2]:arguments.length<=3?void 0:arguments[3]},function(){return 1===(arguments.length<=0?void 0:arguments[0])?arguments.length<=1?void 0:arguments[1]:2===(arguments.length<=0?void 0:arguments[0])?arguments.length<=2?void 0:arguments[2]:8!==(arguments.length<=0?void 0:arguments[0])&&11!==(arguments.length<=0?void 0:arguments[0])?arguments.length<=3?void 0:arguments[3]:arguments.length<=4?void 0:arguments[4]},function(){return 0===(arguments.length<=0?void 0:arguments[0])?arguments.length<=1?void 0:arguments[1]:arguments.length<=2?void 0:arguments[2]},function(){return 1===(arguments.length<=0?void 0:arguments[0])?arguments.length<=1?void 0:arguments[1]:2===(arguments.length<=0?void 0:arguments[0])?arguments.length<=2?void 0:arguments[2]:3===(arguments.length<=0?void 0:arguments[0])?arguments.length<=3?void 0:arguments[3]:arguments.length<=4?void 0:arguments[4]},function(){return 0===(arguments.length<=0?void 0:arguments[0])?arguments.length<=1?void 0:arguments[1]:1===(arguments.length<=0?void 0:arguments[0])?arguments.length<=2?void 0:arguments[2]:arguments.length<=3?void 0:arguments[3]}][n].apply(null,[t].concat(e))};return void 0!==a[s]&&(n=a[s][e],null!==t&&"number"==typeof t&&(r=a[s]["mejs.plural-form"],n=l.apply(null,[n,t,r]))),!n&&a.en&&(n=a.en[e],null!==t&&"number"==typeof t&&(r=a.en["mejs.plural-form"],n=l.apply(null,[n,t,r]))),n=n||e,null!==t&&"number"==typeof t&&(n=n.replace("%1",t)),(0,o.escapeHTML)(n)}return e}};r.default.i18n=a,"undefined"!=typeof mejsL10n&&r.default.i18n.language(mejsL10n.language,mejsL10n.strings),n.default=a},{15:15,27:27,7:7}],6:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=u(e(3)),s=u(e(2)),o=u(e(7)),a=e(27),l=e(28),d=e(8),c=e(25);function u(e){return e&&e.__esModule?e:{default:e}}var p=function e(t,n,u){var p=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var h=this;u=Array.isArray(u)?u:null,h.defaults={renderers:[],fakeNodeName:"mediaelementwrapper",pluginPath:"build/",shimScriptAccess:"sameDomain"},n=Object.assign(h.defaults,n),h.mediaElement=s.default.createElement(n.fakeNodeName);var f=t,m=!1;if("string"==typeof t?h.mediaElement.originalNode=s.default.getElementById(t):(h.mediaElement.originalNode=t,f=t.id),void 0===h.mediaElement.originalNode||null===h.mediaElement.originalNode)return null;h.mediaElement.options=n,f=f||"mejs_"+Math.random().toString().slice(2),h.mediaElement.originalNode.setAttribute("id",f+"_from_mejs");var g=h.mediaElement.originalNode.tagName.toLowerCase();["video","audio"].indexOf(g)>-1&&!h.mediaElement.originalNode.getAttribute("preload")&&h.mediaElement.originalNode.setAttribute("preload","none"),h.mediaElement.originalNode.parentNode.insertBefore(h.mediaElement,h.mediaElement.originalNode),h.mediaElement.appendChild(h.mediaElement.originalNode);var v=function(e,t){if("https:"===r.default.location.protocol&&0===e.indexOf("http:")&&c.IS_IOS&&o.default.html5media.mediaTypes.indexOf(t)>-1){var n=new XMLHttpRequest;n.onreadystatechange=function(){if(4===this.readyState&&200===this.status){var t=(r.default.URL||r.default.webkitURL).createObjectURL(this.response);return h.mediaElement.originalNode.setAttribute("src",t),t}return e},n.open("GET",e),n.responseType="blob",n.send()}return e},y=void 0;if(null!==u)y=u;else if(null!==h.mediaElement.originalNode)switch(y=[],h.mediaElement.originalNode.nodeName.toLowerCase()){case"iframe":y.push({type:"",src:h.mediaElement.originalNode.getAttribute("src")});break;case"audio":case"video":var b=h.mediaElement.originalNode.children.length,w=h.mediaElement.originalNode.getAttribute("src");if(w){var E=h.mediaElement.originalNode,x=(0,l.formatType)(w,E.getAttribute("type"));y.push({type:x,src:v(w,x)})}for(var T=0;T<b;T++){var S=h.mediaElement.originalNode.children[T];if("source"===S.tagName.toLowerCase()){var C=S.getAttribute("src"),k=(0,l.formatType)(C,S.getAttribute("type"));y.push({type:k,src:v(C,k)})}}}h.mediaElement.id=f,h.mediaElement.renderers={},h.mediaElement.events={},h.mediaElement.promises=[],h.mediaElement.renderer=null,h.mediaElement.rendererName=null,h.mediaElement.changeRenderer=function(e,t){var n=p,i=Object.keys(t[0]).length>2?t[0]:t[0].src;if(void 0!==n.mediaElement.renderer&&null!==n.mediaElement.renderer&&n.mediaElement.renderer.name===e)return n.mediaElement.renderer.pause(),n.mediaElement.renderer.stop&&n.mediaElement.renderer.stop(),n.mediaElement.renderer.show(),n.mediaElement.renderer.setSrc(i),!0;void 0!==n.mediaElement.renderer&&null!==n.mediaElement.renderer&&(n.mediaElement.renderer.pause(),n.mediaElement.renderer.stop&&n.mediaElement.renderer.stop(),n.mediaElement.renderer.hide());var r=n.mediaElement.renderers[e],s=null;if(void 0!==r&&null!==r)return r.show(),r.setSrc(i),n.mediaElement.renderer=r,n.mediaElement.rendererName=e,!0;for(var o=n.mediaElement.options.renderers.length?n.mediaElement.options.renderers:d.renderer.order,a=0,l=o.length;a<l;a++){var c=o[a];if(c===e){s=d.renderer.renderers[c];var u=Object.assign(s.options,n.mediaElement.options);return(r=s.create(n.mediaElement,u,t)).name=e,n.mediaElement.renderers[s.name]=r,n.mediaElement.renderer=r,n.mediaElement.rendererName=e,r.show(),!0}}return!1},h.mediaElement.setSize=function(e,t){void 0!==h.mediaElement.renderer&&null!==h.mediaElement.renderer&&h.mediaElement.renderer.setSize(e,t)},h.mediaElement.generateError=function(e,t){e=e||"",t=Array.isArray(t)?t:[];var n=(0,a.createEvent)("error",h.mediaElement);n.message=e,n.urls=t,h.mediaElement.dispatchEvent(n),m=!0};var P=o.default.html5media.properties,$=o.default.html5media.methods,A=function(e,t,n,i){var r=e[t];Object.defineProperty(e,t,{get:function(){return n.apply(e,[r])},set:function(t){return r=i.apply(e,[t])}})},_=function(e){if("src"!==e){var t=""+e.substring(0,1).toUpperCase()+e.substring(1),n=function(){return void 0!==h.mediaElement.renderer&&null!==h.mediaElement.renderer&&"function"==typeof h.mediaElement.renderer["get"+t]?h.mediaElement.renderer["get"+t]():null},i=function(e){void 0!==h.mediaElement.renderer&&null!==h.mediaElement.renderer&&"function"==typeof h.mediaElement.renderer["set"+t]&&h.mediaElement.renderer["set"+t](e)};A(h.mediaElement,e,n,i),h.mediaElement["get"+t]=n,h.mediaElement["set"+t]=i}},L=function(){return void 0!==h.mediaElement.renderer&&null!==h.mediaElement.renderer?h.mediaElement.renderer.getSrc():null},M=function(e){var t=[];if("string"==typeof e)t.push({src:e,type:e?(0,l.getTypeFromFile)(e):""});else if("object"===(void 0===e?"undefined":i(e))&&void 0!==e.src){var n=(0,l.absolutizeUrl)(e.src),r=e.type,s=Object.assign(e,{src:n,type:""!==r&&null!==r&&void 0!==r||!n?r:(0,l.getTypeFromFile)(n)});t.push(s)}else if(Array.isArray(e))for(var o=0,c=e.length;o<c;o++){var u=(0,l.absolutizeUrl)(e[o].src),p=e[o].type,f=Object.assign(e[o],{src:u,type:""!==p&&null!==p&&void 0!==p||!u?p:(0,l.getTypeFromFile)(u)});t.push(f)}var m=d.renderer.select(t,h.mediaElement.options.renderers.length?h.mediaElement.options.renderers:[]),g=void 0;if(h.mediaElement.paused||(h.mediaElement.pause(),g=(0,a.createEvent)("pause",h.mediaElement),h.mediaElement.dispatchEvent(g)),h.mediaElement.originalNode.src=t[0].src||"",null!==m||!t[0].src)return t[0].src?h.mediaElement.changeRenderer(m.rendererName,t):null;h.mediaElement.generateError("No renderer found",t)},N=function(e,t){try{if("play"===e&&"native_dash"===h.mediaElement.rendererName){var n=h.mediaElement.renderer[e](t);n&&"function"==typeof n.then&&n.catch(function(){h.mediaElement.paused&&setTimeout(function(){var e=h.mediaElement.renderer.play();void 0!==e&&e.catch(function(){h.mediaElement.renderer.paused||h.mediaElement.renderer.pause()})},150)})}else h.mediaElement.renderer[e](t)}catch(e){h.mediaElement.generateError(e,y)}},D=function(e){h.mediaElement[e]=function(){for(var t=arguments.length,n=Array(t),i=0;i<t;i++)n[i]=arguments[i];return void 0!==h.mediaElement.renderer&&null!==h.mediaElement.renderer&&"function"==typeof h.mediaElement.renderer[e]&&(h.mediaElement.promises.length?Promise.all(h.mediaElement.promises).then(function(){N(e,n)}).catch(function(e){h.mediaElement.generateError(e,y)}):N(e,n)),null}};A(h.mediaElement,"src",L,M),h.mediaElement.getSrc=L,h.mediaElement.setSrc=M;for(var I=0,O=P.length;I<O;I++)_(P[I]);for(var j=0,F=$.length;j<F;j++)D($[j]);return h.mediaElement.addEventListener=function(e,t){h.mediaElement.events[e]=h.mediaElement.events[e]||[],h.mediaElement.events[e].push(t)},h.mediaElement.removeEventListener=function(e,t){if(!e)return h.mediaElement.events={},!0;var n=h.mediaElement.events[e];if(!n)return!0;if(!t)return h.mediaElement.events[e]=[],!0;for(var i=0;i<n.length;i++)if(n[i]===t)return h.mediaElement.events[e].splice(i,1),!0;return!1},h.mediaElement.dispatchEvent=function(e){var t=h.mediaElement.events[e.type];if(t)for(var n=0;n<t.length;n++)t[n].apply(null,[e])},h.mediaElement.destroy=function(){var e=h.mediaElement.originalNode.cloneNode(!0),t=h.mediaElement.parentElement;e.removeAttribute("id"),e.remove(),h.mediaElement.remove(),t.append(e)},y.length&&(h.mediaElement.src=y),h.mediaElement.promises.length?Promise.all(h.mediaElement.promises).then(function(){h.mediaElement.options.success&&h.mediaElement.options.success(h.mediaElement,h.mediaElement.originalNode)}).catch(function(){m&&h.mediaElement.options.error&&h.mediaElement.options.error(h.mediaElement,h.mediaElement.originalNode)}):(h.mediaElement.options.success&&h.mediaElement.options.success(h.mediaElement,h.mediaElement.originalNode),m&&h.mediaElement.options.error&&h.mediaElement.options.error(h.mediaElement,h.mediaElement.originalNode)),h.mediaElement};r.default.MediaElement=p,o.default.MediaElement=p,n.default=p},{2:2,25:25,27:27,28:28,3:3,7:7,8:8}],7:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i={version:"4.2.9",html5media:{properties:["volume","src","currentTime","muted","duration","paused","ended","buffered","error","networkState","readyState","seeking","seekable","currentSrc","preload","bufferedBytes","bufferedTime","initialTime","startOffsetTime","defaultPlaybackRate","playbackRate","played","autoplay","loop","controls"],readOnlyProperties:["duration","paused","ended","buffered","error","networkState","readyState","seeking","seekable"],methods:["load","play","pause","canPlayType"],events:["loadstart","durationchange","loadedmetadata","loadeddata","progress","canplay","canplaythrough","suspend","abort","error","emptied","stalled","play","playing","pause","waiting","seeking","seeked","timeupdate","ended","ratechange","volumechange"],mediaTypes:["audio/mp3","audio/ogg","audio/oga","audio/wav","audio/x-wav","audio/wave","audio/x-pn-wav","audio/mpeg","audio/mp4","video/mp4","video/webm","video/ogg","video/ogv"]}};(function(e){return e&&e.__esModule?e:{default:e}})(e(3)).default.mejs=i,n.default=i},{3:3}],8:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.renderer=void 0;var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=function(e){return e&&e.__esModule?e:{default:e}}(e(7));var o=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.renderers={},this.order=[]}return r(e,[{key:"add",value:function(e){if(void 0===e.name)throw new TypeError("renderer must contain at least `name` property");this.renderers[e.name]=e,this.order.push(e.name)}},{key:"select",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:[],n=t.length;if(t=t.length?t:this.order,!n){var i=[/^(html5|native)/i,/^flash/i,/iframe$/i],r=function(e){for(var t=0,n=i.length;t<n;t++)if(i[t].test(e))return t;return i.length};t.sort(function(e,t){return r(e)-r(t)})}for(var s=0,o=t.length;s<o;s++){var a=t[s],l=this.renderers[a];if(null!==l&&void 0!==l)for(var d=0,c=e.length;d<c;d++)if("function"==typeof l.canPlayType&&"string"==typeof e[d].type&&l.canPlayType(e[d].type))return{rendererName:l.name,src:e[d].src}}return null}},{key:"order",set:function(e){if(!Array.isArray(e))throw new TypeError("order must be an array of strings.");this._order=e},get:function(){return this._order}},{key:"renderers",set:function(e){if(null!==e&&"object"!==(void 0===e?"undefined":i(e)))throw new TypeError("renderers must be an array of objects.");this._renderers=e},get:function(){return this._renderers}}]),e}(),a=n.renderer=new o;s.default.Renderers=a},{7:7}],9:[function(e,t,n){"use strict";var i=p(e(3)),r=p(e(2)),s=p(e(5)),o=e(16),a=p(o),l=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(e(25)),d=e(27),c=e(26),u=e(28);function p(e){return e&&e.__esModule?e:{default:e}}Object.assign(o.config,{usePluginFullScreen:!0,fullscreenText:null,useFakeFullscreen:!1}),Object.assign(a.default.prototype,{isFullScreen:!1,isNativeFullScreen:!1,isInIframe:!1,isPluginClickThroughCreated:!1,fullscreenMode:"",containerSizeTimeout:null,buildfullscreen:function(e){if(e.isVideo){e.isInIframe=i.default.location!==i.default.parent.location,e.detectFullscreenMode();var t=this,n=(0,d.isString)(t.options.fullscreenText)?t.options.fullscreenText:s.default.t("mejs.fullscreen"),o=r.default.createElement("div");if(o.className=t.options.classPrefix+"button "+t.options.classPrefix+"fullscreen-button",o.innerHTML='<button type="button" aria-controls="'+t.id+'" title="'+n+'" aria-label="'+n+'" tabindex="0"></button>',t.addControlElement(o,"fullscreen"),o.addEventListener("click",function(){l.HAS_TRUE_NATIVE_FULLSCREEN&&l.IS_FULLSCREEN||e.isFullScreen?e.exitFullScreen():e.enterFullScreen()}),e.fullscreenBtn=o,t.options.keyActions.push({keys:[70],action:function(e,t,n,i){i.ctrlKey||void 0!==e.enterFullScreen&&(e.isFullScreen?e.exitFullScreen():e.enterFullScreen())}}),t.exitFullscreenCallback=function(n){var i=n.which||n.keyCode||0;t.options.enableKeyboard&&27===i&&(l.HAS_TRUE_NATIVE_FULLSCREEN&&l.IS_FULLSCREEN||t.isFullScreen)&&e.exitFullScreen()},t.globalBind("keydown",t.exitFullscreenCallback),t.normalHeight=0,t.normalWidth=0,l.HAS_TRUE_NATIVE_FULLSCREEN){e.globalBind(l.FULLSCREEN_EVENT_NAME,function(){e.isFullScreen&&(l.isFullScreen()?(e.isNativeFullScreen=!0,e.setControlsSize()):(e.isNativeFullScreen=!1,e.exitFullScreen()))})}}},cleanfullscreen:function(e){e.exitFullScreen(),e.globalUnbind("keydown",e.exitFullscreenCallback)},detectFullscreenMode:function(){var e=this,t=null!==e.media.rendererName&&/(native|html5)/i.test(e.media.rendererName),n="";return l.HAS_TRUE_NATIVE_FULLSCREEN&&t?n="native-native":l.HAS_TRUE_NATIVE_FULLSCREEN&&!t?n="plugin-native":e.usePluginFullScreen&&l.SUPPORT_POINTER_EVENTS&&(n="plugin-click"),e.fullscreenMode=n,n},enterFullScreen:function(){var e=this,t=null!==e.media.rendererName&&/(html5|native)/i.test(e.media.rendererName),n=getComputedStyle(e.getElement(e.container));if(e.isVideo)if(!1===e.options.useFakeFullscreen&&l.IS_IOS&&l.HAS_IOS_FULLSCREEN&&"function"==typeof e.media.originalNode.webkitEnterFullscreen&&e.media.originalNode.canPlayType((0,u.getTypeFromFile)(e.media.getSrc())))e.media.originalNode.webkitEnterFullscreen();else{if((0,c.addClass)(r.default.documentElement,e.options.classPrefix+"fullscreen"),(0,c.addClass)(e.getElement(e.container),e.options.classPrefix+"container-fullscreen"),e.normalHeight=parseFloat(n.height),e.normalWidth=parseFloat(n.width),"native-native"!==e.fullscreenMode&&"plugin-native"!==e.fullscreenMode||(l.requestFullScreen(e.getElement(e.container)),e.isInIframe&&setTimeout(function t(){if(e.isNativeFullScreen){var n=i.default.innerWidth||r.default.documentElement.clientWidth||r.default.body.clientWidth,s=screen.width;Math.abs(s-n)>.002*s?e.exitFullScreen():setTimeout(t,500)}},1e3)),e.getElement(e.container).style.width="100%",e.getElement(e.container).style.height="100%",e.containerSizeTimeout=setTimeout(function(){e.getElement(e.container).style.width="100%",e.getElement(e.container).style.height="100%",e.setControlsSize()},500),t)e.node.style.width="100%",e.node.style.height="100%";else for(var s=e.getElement(e.container).querySelectorAll("embed, object, video"),o=s.length,a=0;a<o;a++)s[a].style.width="100%",s[a].style.height="100%";e.options.setDimensions&&"function"==typeof e.media.setSize&&e.media.setSize(screen.width,screen.height);for(var p=e.getElement(e.layers).children,h=p.length,f=0;f<h;f++)p[f].style.width="100%",p[f].style.height="100%";e.fullscreenBtn&&((0,c.removeClass)(e.fullscreenBtn,e.options.classPrefix+"fullscreen"),(0,c.addClass)(e.fullscreenBtn,e.options.classPrefix+"unfullscreen")),e.setControlsSize(),e.isFullScreen=!0;var m=Math.min(screen.width/e.width,screen.height/e.height),g=e.getElement(e.container).querySelector("."+e.options.classPrefix+"captions-text");g&&(g.style.fontSize=100*m+"%",g.style.lineHeight="normal",e.getElement(e.container).querySelector("."+e.options.classPrefix+"captions-position").style.bottom=(screen.height-e.normalHeight)/2-e.getElement(e.controls).offsetHeight/2+m+15+"px");var v=(0,d.createEvent)("enteredfullscreen",e.getElement(e.container));e.getElement(e.container).dispatchEvent(v)}},exitFullScreen:function(){var e=this,t=null!==e.media.rendererName&&/(native|html5)/i.test(e.media.rendererName);if(e.isVideo){if(clearTimeout(e.containerSizeTimeout),l.HAS_TRUE_NATIVE_FULLSCREEN&&(l.IS_FULLSCREEN||e.isFullScreen)&&l.cancelFullScreen(),(0,c.removeClass)(r.default.documentElement,e.options.classPrefix+"fullscreen"),(0,c.removeClass)(e.getElement(e.container),e.options.classPrefix+"container-fullscreen"),e.options.setDimensions){if(e.getElement(e.container).style.width=e.normalWidth+"px",e.getElement(e.container).style.height=e.normalHeight+"px",t)e.node.style.width=e.normalWidth+"px",e.node.style.height=e.normalHeight+"px";else for(var n=e.getElement(e.container).querySelectorAll("embed, object, video"),i=n.length,s=0;s<i;s++)n[s].style.width=e.normalWidth+"px",n[s].style.height=e.normalHeight+"px";"function"==typeof e.media.setSize&&e.media.setSize(e.normalWidth,e.normalHeight);for(var o=e.getElement(e.layers).children,a=o.length,u=0;u<a;u++)o[u].style.width=e.normalWidth+"px",o[u].style.height=e.normalHeight+"px"}e.fullscreenBtn&&((0,c.removeClass)(e.fullscreenBtn,e.options.classPrefix+"unfullscreen"),(0,c.addClass)(e.fullscreenBtn,e.options.classPrefix+"fullscreen")),e.setControlsSize(),e.isFullScreen=!1;var p=e.getElement(e.container).querySelector("."+e.options.classPrefix+"captions-text");p&&(p.style.fontSize="",p.style.lineHeight="",e.getElement(e.container).querySelector("."+e.options.classPrefix+"captions-position").style.bottom="");var h=(0,d.createEvent)("exitedfullscreen",e.getElement(e.container));e.getElement(e.container).dispatchEvent(h)}}})},{16:16,2:2,25:25,26:26,27:27,28:28,3:3,5:5}],10:[function(e,t,n){"use strict";var i=d(e(2)),r=e(16),s=d(r),o=d(e(5)),a=e(27),l=e(26);function d(e){return e&&e.__esModule?e:{default:e}}Object.assign(r.config,{playText:null,pauseText:null}),Object.assign(s.default.prototype,{buildplaypause:function(e,t,n,r){var s=this,d=s.options,c=(0,a.isString)(d.playText)?d.playText:o.default.t("mejs.play"),u=(0,a.isString)(d.pauseText)?d.pauseText:o.default.t("mejs.pause"),p=i.default.createElement("div");p.className=s.options.classPrefix+"button "+s.options.classPrefix+"playpause-button "+s.options.classPrefix+"play",p.innerHTML='<button type="button" aria-controls="'+s.id+'" title="'+c+'" aria-label="'+u+'" tabindex="0"></button>',p.addEventListener("click",function(){s.paused?s.play():s.pause()});var h=p.querySelector("button");function f(e){"play"===e?((0,l.removeClass)(p,s.options.classPrefix+"play"),(0,l.removeClass)(p,s.options.classPrefix+"replay"),(0,l.addClass)(p,s.options.classPrefix+"pause"),h.setAttribute("title",u),h.setAttribute("aria-label",u)):((0,l.removeClass)(p,s.options.classPrefix+"pause"),(0,l.removeClass)(p,s.options.classPrefix+"replay"),(0,l.addClass)(p,s.options.classPrefix+"play"),h.setAttribute("title",c),h.setAttribute("aria-label",c))}s.addControlElement(p,"playpause"),f("pse"),r.addEventListener("loadedmetadata",function(){-1===r.rendererName.indexOf("flash")&&f("pse")}),r.addEventListener("play",function(){f("play")}),r.addEventListener("playing",function(){f("play")}),r.addEventListener("pause",function(){f("pse")}),r.addEventListener("ended",function(){e.options.loop||((0,l.removeClass)(p,s.options.classPrefix+"pause"),(0,l.removeClass)(p,s.options.classPrefix+"play"),(0,l.addClass)(p,s.options.classPrefix+"replay"),h.setAttribute("title",c),h.setAttribute("aria-label",c))})}})},{16:16,2:2,26:26,27:27,5:5}],11:[function(e,t,n){"use strict";var i=c(e(2)),r=e(16),s=c(r),o=c(e(5)),a=e(25),l=e(30),d=e(26);function c(e){return e&&e.__esModule?e:{default:e}}Object.assign(r.config,{enableProgressTooltip:!0,useSmoothHover:!0,forceLive:!1}),Object.assign(s.default.prototype,{buildprogress:function(e,t,n,s){var c=0,u=!1,p=!1,h=this,f=e.options.autoRewind,m=e.options.enableProgressTooltip?'<span class="'+h.options.classPrefix+'time-float"><span class="'+h.options.classPrefix+'time-float-current">00:00</span><span class="'+h.options.classPrefix+'time-float-corner"></span></span>':"",g=i.default.createElement("div");g.className=h.options.classPrefix+"time-rail",g.innerHTML='<span class="'+h.options.classPrefix+"time-total "+h.options.classPrefix+'time-slider"><span class="'+h.options.classPrefix+'time-buffering"></span><span class="'+h.options.classPrefix+'time-loaded"></span><span class="'+h.options.classPrefix+'time-current"></span><span class="'+h.options.classPrefix+'time-hovered no-hover"></span><span class="'+h.options.classPrefix+'time-handle"><span class="'+h.options.classPrefix+'time-handle-content"></span></span>'+m+"</span>",h.addControlElement(g,"progress"),h.options.keyActions.push({keys:[37,227],action:function(e){if(!isNaN(e.duration)&&e.duration>0){e.isVideo&&(e.showControls(),e.startControlsTimer()),e.getElement(e.container).querySelector("."+r.config.classPrefix+"time-total").focus();var t=Math.max(e.currentTime-e.options.defaultSeekBackwardInterval(e),0);e.setCurrentTime(t)}}},{keys:[39,228],action:function(e){if(!isNaN(e.duration)&&e.duration>0){e.isVideo&&(e.showControls(),e.startControlsTimer()),e.getElement(e.container).querySelector("."+r.config.classPrefix+"time-total").focus();var t=Math.min(e.currentTime+e.options.defaultSeekForwardInterval(e),e.duration);e.setCurrentTime(t)}}}),h.rail=t.querySelector("."+h.options.classPrefix+"time-rail"),h.total=t.querySelector("."+h.options.classPrefix+"time-total"),h.loaded=t.querySelector("."+h.options.classPrefix+"time-loaded"),h.current=t.querySelector("."+h.options.classPrefix+"time-current"),h.handle=t.querySelector("."+h.options.classPrefix+"time-handle"),h.timefloat=t.querySelector("."+h.options.classPrefix+"time-float"),h.timefloatcurrent=t.querySelector("."+h.options.classPrefix+"time-float-current"),h.slider=t.querySelector("."+h.options.classPrefix+"time-slider"),h.hovered=t.querySelector("."+h.options.classPrefix+"time-hovered"),h.buffer=t.querySelector("."+h.options.classPrefix+"time-buffering"),h.newTime=0,h.forcedHandlePause=!1,h.setTransformStyle=function(e,t){e.style.transform=t,e.style.webkitTransform=t,e.style.MozTransform=t,e.style.msTransform=t,e.style.OTransform=t},h.buffer.style.display="none";var v=function(t){var n=getComputedStyle(h.total),i=(0,d.offset)(h.total),r=h.total.offsetWidth,s=void 0!==n.webkitTransform?"webkitTransform":void 0!==n.mozTransform?"mozTransform ":void 0!==n.oTransform?"oTransform":void 0!==n.msTransform?"msTransform":"transform",o="WebKitCSSMatrix"in window?"WebKitCSSMatrix":"MSCSSMatrix"in window?"MSCSSMatrix":"CSSMatrix"in window?"CSSMatrix":void 0,c=0,p=0,f=0,m=void 0;if(m=t.originalEvent&&t.originalEvent.changedTouches?t.originalEvent.changedTouches[0].pageX:t.changedTouches?t.changedTouches[0].pageX:t.pageX,h.getDuration()){if(m<i.left?m=i.left:m>r+i.left&&(m=r+i.left),c=(f=m-i.left)/r,h.newTime=c<=.02?0:c*h.getDuration(),u&&null!==h.getCurrentTime()&&h.newTime.toFixed(4)!==h.getCurrentTime().toFixed(4)&&(h.setCurrentRailHandle(h.newTime),h.updateCurrent(h.newTime)),!a.IS_IOS&&!a.IS_ANDROID){if(f<0&&(f=0),h.options.useSmoothHover&&null!==o&&void 0!==window[o]){var g=new window[o](getComputedStyle(h.handle)[s]).m41,v=f/parseFloat(getComputedStyle(h.total).width)-g/parseFloat(getComputedStyle(h.total).width);h.hovered.style.left=g+"px",h.setTransformStyle(h.hovered,"scaleX("+v+")"),h.hovered.setAttribute("pos",f),v>=0?(0,d.removeClass)(h.hovered,"negative"):(0,d.addClass)(h.hovered,"negative")}if(h.timefloat){var y=h.timefloat.offsetWidth/2,b=mejs.Utils.offset(h.getElement(h.container)),w=getComputedStyle(h.timefloat);p=m-b.left<h.timefloat.offsetWidth?y:m-b.left>=h.getElement(h.container).offsetWidth-y?h.total.offsetWidth-y:f,(0,d.hasClass)(h.getElement(h.container),h.options.classPrefix+"long-video")&&(p+=parseFloat(w.marginLeft)/2+h.timefloat.offsetWidth/2),h.timefloat.style.left=p+"px",h.timefloatcurrent.innerHTML=(0,l.secondsToTimeCode)(h.newTime,e.options.alwaysShowHours,e.options.showTimecodeFrameCount,e.options.framesPerSecond,e.options.secondsDecimalLength,e.options.timeFormat),h.timefloat.style.display="block"}}}else a.IS_IOS||a.IS_ANDROID||!h.timefloat||(p=h.timefloat.offsetWidth+r>=h.getElement(h.container).offsetWidth?h.timefloat.offsetWidth/2:0,h.timefloat.style.left=p+"px",h.timefloat.style.left=p+"px",h.timefloat.style.display="block")},y=function(){new Date-c>=1e3&&h.play()};h.slider.addEventListener("focus",function(){e.options.autoRewind=!1}),h.slider.addEventListener("blur",function(){e.options.autoRewind=f}),h.slider.addEventListener("keydown",function(t){if(new Date-c>=1e3&&(p=h.paused),h.options.enableKeyboard&&h.options.keyActions.length){var n=t.which||t.keyCode||0,i=h.getDuration(),r=e.options.defaultSeekForwardInterval(s),o=e.options.defaultSeekBackwardInterval(s),l=h.getCurrentTime(),d=h.getElement(h.container).querySelector("."+h.options.classPrefix+"volume-slider");if(38===n||40===n){d&&(d.style.display="block"),h.isVideo&&(h.showControls(),h.startControlsTimer());var u=38===n?Math.min(h.volume+.1,1):Math.max(h.volume-.1,0),f=u<=0;return h.setVolume(u),void h.setMuted(f)}switch(d&&(d.style.display="none"),n){case 37:h.getDuration()!==1/0&&(l-=o);break;case 39:h.getDuration()!==1/0&&(l+=r);break;case 36:l=0;break;case 35:l=i;break;case 13:case 32:return void(a.IS_FIREFOX&&(h.paused?h.play():h.pause()));default:return}l=l<0?0:l>=i?i:Math.floor(l),c=new Date,p||e.pause(),l<h.getDuration()&&!p&&setTimeout(y,1100),h.setCurrentTime(l),e.showControls(),t.preventDefault(),t.stopPropagation()}});var b=["mousedown","touchstart"];h.slider.addEventListener("dragstart",function(){return!1});for(var w=0,E=b.length;w<E;w++)h.slider.addEventListener(b[w],function(e){if(h.forcedHandlePause=!1,h.getDuration()!==1/0&&(1===e.which||0===e.which)){h.paused||(h.pause(),h.forcedHandlePause=!0),u=!0,v(e);for(var t=["mouseup","touchend"],n=0,i=t.length;n<i;n++)h.getElement(h.container).addEventListener(t[n],function(e){var t=e.target;(t===h.slider||t.closest("."+h.options.classPrefix+"time-slider"))&&v(e)});h.globalBind("mouseup.dur touchend.dur",function(){u&&null!==h.getCurrentTime()&&h.newTime.toFixed(4)!==h.getCurrentTime().toFixed(4)&&(h.setCurrentTime(h.newTime),h.setCurrentRailHandle(h.newTime),h.updateCurrent(h.newTime)),h.forcedHandlePause&&(h.slider.focus(),h.play()),h.forcedHandlePause=!1,u=!1,h.timefloat&&(h.timefloat.style.display="none")})}},!(!a.SUPPORT_PASSIVE_EVENT||"touchstart"!==b[w])&&{passive:!0});h.slider.addEventListener("mouseenter",function(e){e.target===h.slider&&h.getDuration()!==1/0&&(h.getElement(h.container).addEventListener("mousemove",function(e){var t=e.target;(t===h.slider||t.closest("."+h.options.classPrefix+"time-slider"))&&v(e)}),!h.timefloat||a.IS_IOS||a.IS_ANDROID||(h.timefloat.style.display="block"),h.hovered&&!a.IS_IOS&&!a.IS_ANDROID&&h.options.useSmoothHover&&(0,d.removeClass)(h.hovered,"no-hover"))}),h.slider.addEventListener("mouseleave",function(){h.getDuration()!==1/0&&(u||(h.timefloat&&(h.timefloat.style.display="none"),h.hovered&&h.options.useSmoothHover&&(0,d.addClass)(h.hovered,"no-hover")))}),h.broadcastCallback=function(n){var r=t.querySelector("."+h.options.classPrefix+"broadcast");if(h.options.forceLive||h.getDuration()===1/0){if(!r||h.options.forceLive){var a=i.default.createElement("span");a.className=h.options.classPrefix+"broadcast",a.innerText=o.default.t("mejs.live-broadcast"),h.slider.style.display="none",h.rail.appendChild(a)}}else r&&(h.slider.style.display="",r.remove()),e.setProgressRail(n),h.forcedHandlePause||e.setCurrentRail(n),function(){var t=h.getCurrentTime(),n=o.default.t("mejs.time-slider"),i=(0,l.secondsToTimeCode)(t,e.options.alwaysShowHours,e.options.showTimecodeFrameCount,e.options.framesPerSecond,e.options.secondsDecimalLength,e.options.timeFormat),r=h.getDuration();h.slider.setAttribute("role","slider"),h.slider.tabIndex=0,s.paused?(h.slider.setAttribute("aria-label",n),h.slider.setAttribute("aria-valuemin",0),h.slider.setAttribute("aria-valuemax",r),h.slider.setAttribute("aria-valuenow",t),h.slider.setAttribute("aria-valuetext",i)):(h.slider.removeAttribute("aria-label"),h.slider.removeAttribute("aria-valuemin"),h.slider.removeAttribute("aria-valuemax"),h.slider.removeAttribute("aria-valuenow"),h.slider.removeAttribute("aria-valuetext"))}()},s.addEventListener("progress",h.broadcastCallback),s.addEventListener("timeupdate",h.broadcastCallback),s.addEventListener("play",function(){h.buffer.style.display="none"}),s.addEventListener("playing",function(){h.buffer.style.display="none"}),s.addEventListener("seeking",function(){h.buffer.style.display=""}),s.addEventListener("seeked",function(){h.buffer.style.display="none"}),s.addEventListener("pause",function(){h.buffer.style.display="none"}),s.addEventListener("waiting",function(){h.buffer.style.display=""}),s.addEventListener("loadeddata",function(){h.buffer.style.display=""}),s.addEventListener("canplay",function(){h.buffer.style.display="none"}),s.addEventListener("error",function(){h.buffer.style.display="none"}),h.getElement(h.container).addEventListener("controlsresize",function(t){h.getDuration()!==1/0&&(e.setProgressRail(t),h.forcedHandlePause||e.setCurrentRail(t))})},cleanprogress:function(e,t,n,i){i.removeEventListener("progress",e.broadcastCallback),i.removeEventListener("timeupdate",e.broadcastCallback),e.rail&&e.rail.remove()},setProgressRail:function(e){var t=this,n=void 0!==e?e.detail.target||e.target:t.media,i=null;n&&n.buffered&&n.buffered.length>0&&n.buffered.end&&t.getDuration()?i=n.buffered.end(n.buffered.length-1)/t.getDuration():n&&void 0!==n.bytesTotal&&n.bytesTotal>0&&void 0!==n.bufferedBytes?i=n.bufferedBytes/n.bytesTotal:e&&e.lengthComputable&&0!==e.total&&(i=e.loaded/e.total),null!==i&&(i=Math.min(1,Math.max(0,i)),t.loaded&&t.setTransformStyle(t.loaded,"scaleX("+i+")"))},setCurrentRailHandle:function(e){this.setCurrentRailMain(this,e)},setCurrentRail:function(){this.setCurrentRailMain(this)},setCurrentRailMain:function(e,t){if(void 0!==e.getCurrentTime()&&e.getDuration()){var n=void 0===t?e.getCurrentTime():t;if(e.total&&e.handle){var i=parseFloat(getComputedStyle(e.total).width),r=Math.round(i*n/e.getDuration()),s=r-Math.round(e.handle.offsetWidth/2);if(s=s<0?0:s,e.setTransformStyle(e.current,"scaleX("+r/i+")"),e.setTransformStyle(e.handle,"translateX("+s+"px)"),e.options.useSmoothHover&&!(0,d.hasClass)(e.hovered,"no-hover")){var o=parseInt(e.hovered.getAttribute("pos"),10),a=(o=isNaN(o)?0:o)/i-s/i;e.hovered.style.left=s+"px",e.setTransformStyle(e.hovered,"scaleX("+a+")"),a>=0?(0,d.removeClass)(e.hovered,"negative"):(0,d.addClass)(e.hovered,"negative")}}}}})},{16:16,2:2,25:25,26:26,30:30,5:5}],12:[function(e,t,n){"use strict";var i=l(e(2)),r=e(16),s=l(r),o=e(30),a=e(26);function l(e){return e&&e.__esModule?e:{default:e}}Object.assign(r.config,{duration:0,timeAndDurationSeparator:"<span> | </span>"}),Object.assign(s.default.prototype,{buildcurrent:function(e,t,n,r){var s=this,a=i.default.createElement("div");a.className=s.options.classPrefix+"time",a.setAttribute("role","timer"),a.setAttribute("aria-live","off"),a.innerHTML='<span class="'+s.options.classPrefix+'currenttime">'+(0,o.secondsToTimeCode)(0,e.options.alwaysShowHours,e.options.showTimecodeFrameCount,e.options.framesPerSecond,e.options.secondsDecimalLength,e.options.timeFormat)+"</span>",s.addControlElement(a,"current"),e.updateCurrent(),s.updateTimeCallback=function(){s.controlsAreVisible&&e.updateCurrent()},r.addEventListener("timeupdate",s.updateTimeCallback)},cleancurrent:function(e,t,n,i){i.removeEventListener("timeupdate",e.updateTimeCallback)},buildduration:function(e,t,n,r){var s=this;if(t.lastChild.querySelector("."+s.options.classPrefix+"currenttime"))t.querySelector("."+s.options.classPrefix+"time").innerHTML+=s.options.timeAndDurationSeparator+'<span class="'+s.options.classPrefix+'duration">'+(0,o.secondsToTimeCode)(s.options.duration,s.options.alwaysShowHours,s.options.showTimecodeFrameCount,s.options.framesPerSecond,s.options.secondsDecimalLength,s.options.timeFormat)+"</span>";else{t.querySelector("."+s.options.classPrefix+"currenttime")&&(0,a.addClass)(t.querySelector("."+s.options.classPrefix+"currenttime").parentNode,s.options.classPrefix+"currenttime-container");var l=i.default.createElement("div");l.className=s.options.classPrefix+"time "+s.options.classPrefix+"duration-container",l.innerHTML='<span class="'+s.options.classPrefix+'duration">'+(0,o.secondsToTimeCode)(s.options.duration,s.options.alwaysShowHours,s.options.showTimecodeFrameCount,s.options.framesPerSecond,s.options.secondsDecimalLength,s.options.timeFormat)+"</span>",s.addControlElement(l,"duration")}s.updateDurationCallback=function(){s.controlsAreVisible&&e.updateDuration()},r.addEventListener("timeupdate",s.updateDurationCallback)},cleanduration:function(e,t,n,i){i.removeEventListener("timeupdate",e.updateDurationCallback)},updateCurrent:function(){var e=this,t=e.getCurrentTime();isNaN(t)&&(t=0);var n=(0,o.secondsToTimeCode)(t,e.options.alwaysShowHours,e.options.showTimecodeFrameCount,e.options.framesPerSecond,e.options.secondsDecimalLength,e.options.timeFormat);n.length>5?(0,a.addClass)(e.getElement(e.container),e.options.classPrefix+"long-video"):(0,a.removeClass)(e.getElement(e.container),e.options.classPrefix+"long-video"),e.getElement(e.controls).querySelector("."+e.options.classPrefix+"currenttime")&&(e.getElement(e.controls).querySelector("."+e.options.classPrefix+"currenttime").innerText=n)},updateDuration:function(){var e=this,t=e.getDuration();void 0!==e.media&&(isNaN(t)||t===1/0||t<0)&&(e.media.duration=e.options.duration=t=0),e.options.duration>0&&(t=e.options.duration);var n=(0,o.secondsToTimeCode)(t,e.options.alwaysShowHours,e.options.showTimecodeFrameCount,e.options.framesPerSecond,e.options.secondsDecimalLength,e.options.timeFormat);n.length>5?(0,a.addClass)(e.getElement(e.container),e.options.classPrefix+"long-video"):(0,a.removeClass)(e.getElement(e.container),e.options.classPrefix+"long-video"),e.getElement(e.controls).querySelector("."+e.options.classPrefix+"duration")&&t>0&&(e.getElement(e.controls).querySelector("."+e.options.classPrefix+"duration").innerHTML=n)}})},{16:16,2:2,26:26,30:30}],13:[function(e,t,n){"use strict";var i=u(e(2)),r=u(e(7)),s=u(e(5)),o=e(16),a=u(o),l=e(30),d=e(27),c=e(26);function u(e){return e&&e.__esModule?e:{default:e}}Object.assign(o.config,{startLanguage:"",tracksText:null,chaptersText:null,tracksAriaLive:!1,hideCaptionsButtonWhenEmpty:!0,toggleCaptionsButtonWhenOnlyOne:!1,slidesSelector:""}),Object.assign(a.default.prototype,{hasChapters:!1,buildtracks:function(e,t,n,r){if(this.findTracks(),e.tracks.length||e.trackFiles&&0!==!e.trackFiles.length){var o=this,a=o.options.tracksAriaLive?' role="log" aria-live="assertive" aria-atomic="false"':"",l=(0,d.isString)(o.options.tracksText)?o.options.tracksText:s.default.t("mejs.captions-subtitles"),u=(0,d.isString)(o.options.chaptersText)?o.options.chaptersText:s.default.t("mejs.captions-chapters"),p=null===e.trackFiles?e.tracks.length:e.trackFiles.length;if(o.domNode.textTracks)for(var h=o.domNode.textTracks.length-1;h>=0;h--)o.domNode.textTracks[h].mode="hidden";o.cleartracks(e),e.captions=i.default.createElement("div"),e.captions.className=o.options.classPrefix+"captions-layer "+o.options.classPrefix+"layer",e.captions.innerHTML='<div class="'+o.options.classPrefix+"captions-position "+o.options.classPrefix+'captions-position-hover"'+a+'><span class="'+o.options.classPrefix+'captions-text"></span></div>',e.captions.style.display="none",n.insertBefore(e.captions,n.firstChild),e.captionsText=e.captions.querySelector("."+o.options.classPrefix+"captions-text"),e.captionsButton=i.default.createElement("div"),e.captionsButton.className=o.options.classPrefix+"button "+o.options.classPrefix+"captions-button",e.captionsButton.innerHTML='<button type="button" aria-controls="'+o.id+'" title="'+l+'" aria-label="'+l+'" tabindex="0"></button><div class="'+o.options.classPrefix+"captions-selector "+o.options.classPrefix+'offscreen"><ul class="'+o.options.classPrefix+'captions-selector-list"><li class="'+o.options.classPrefix+'captions-selector-list-item"><input type="radio" class="'+o.options.classPrefix+'captions-selector-input" name="'+e.id+'_captions" id="'+e.id+'_captions_none" value="none" checked disabled><label class="'+o.options.classPrefix+"captions-selector-label "+o.options.classPrefix+'captions-selected" for="'+e.id+'_captions_none">'+s.default.t("mejs.none")+"</label></li></ul></div>",o.addControlElement(e.captionsButton,"tracks"),e.captionsButton.querySelector("."+o.options.classPrefix+"captions-selector-input").disabled=!1,e.chaptersButton=i.default.createElement("div"),e.chaptersButton.className=o.options.classPrefix+"button "+o.options.classPrefix+"chapters-button",e.chaptersButton.innerHTML='<button type="button" aria-controls="'+o.id+'" title="'+u+'" aria-label="'+u+'" tabindex="0"></button><div class="'+o.options.classPrefix+"chapters-selector "+o.options.classPrefix+'offscreen"><ul class="'+o.options.classPrefix+'chapters-selector-list"></ul></div>';for(var f=0,m=0;m<p;m++){var g=e.tracks[m].kind;e.tracks[m].src.trim()&&("subtitles"===g||"captions"===g?f++:"chapters"!==g||t.querySelector("."+o.options.classPrefix+"chapter-selector")||e.captionsButton.parentNode.insertBefore(e.chaptersButton,e.captionsButton))}e.trackToLoad=-1,e.selectedTrack=null,e.isLoadingTrack=!1;for(var v=0;v<p;v++){var y=e.tracks[v].kind;!e.tracks[v].src.trim()||"subtitles"!==y&&"captions"!==y||e.addTrackButton(e.tracks[v].trackId,e.tracks[v].srclang,e.tracks[v].label)}e.loadNextTrack();var b=["mouseenter","focusin"],w=["mouseleave","focusout"];if(o.options.toggleCaptionsButtonWhenOnlyOne&&1===f)e.captionsButton.addEventListener("click",function(t){var n="none";null===e.selectedTrack&&(n=e.tracks[0].trackId);var i=t.keyCode||t.which;e.setTrack(n,void 0!==i)});else{for(var E=e.captionsButton.querySelectorAll("."+o.options.classPrefix+"captions-selector-label"),x=e.captionsButton.querySelectorAll("input[type=radio]"),T=0,S=b.length;T<S;T++)e.captionsButton.addEventListener(b[T],function(){(0,c.removeClass)(this.querySelector("."+o.options.classPrefix+"captions-selector"),o.options.classPrefix+"offscreen")});for(var C=0,k=w.length;C<k;C++)e.captionsButton.addEventListener(w[C],function(){(0,c.addClass)(this.querySelector("."+o.options.classPrefix+"captions-selector"),o.options.classPrefix+"offscreen")});for(var P=0,$=x.length;P<$;P++)x[P].addEventListener("click",function(t){var n=t.keyCode||t.which;e.setTrack(this.value,void 0!==n)});for(var A=0,_=E.length;A<_;A++)E[A].addEventListener("click",function(e){var t=(0,c.siblings)(this,function(e){return"INPUT"===e.tagName})[0],n=(0,d.createEvent)("click",t);t.dispatchEvent(n),e.preventDefault()});e.captionsButton.addEventListener("keydown",function(e){e.stopPropagation()})}for(var L=0,M=b.length;L<M;L++)e.chaptersButton.addEventListener(b[L],function(){this.querySelector("."+o.options.classPrefix+"chapters-selector-list").children.length&&(0,c.removeClass)(this.querySelector("."+o.options.classPrefix+"chapters-selector"),o.options.classPrefix+"offscreen")});for(var N=0,D=w.length;N<D;N++)e.chaptersButton.addEventListener(w[N],function(){(0,c.addClass)(this.querySelector("."+o.options.classPrefix+"chapters-selector"),o.options.classPrefix+"offscreen")});e.chaptersButton.addEventListener("keydown",function(e){e.stopPropagation()}),e.options.alwaysShowControls?(0,c.addClass)(e.getElement(e.container).querySelector("."+o.options.classPrefix+"captions-position"),o.options.classPrefix+"captions-position-hover"):(e.getElement(e.container).addEventListener("controlsshown",function(){(0,c.addClass)(e.getElement(e.container).querySelector("."+o.options.classPrefix+"captions-position"),o.options.classPrefix+"captions-position-hover")}),e.getElement(e.container).addEventListener("controlshidden",function(){r.paused||(0,c.removeClass)(e.getElement(e.container).querySelector("."+o.options.classPrefix+"captions-position"),o.options.classPrefix+"captions-position-hover")})),r.addEventListener("timeupdate",function(){e.displayCaptions()}),""!==e.options.slidesSelector&&(e.slidesContainer=i.default.querySelectorAll(e.options.slidesSelector),r.addEventListener("timeupdate",function(){e.displaySlides()}))}},cleartracks:function(e){e&&(e.captions&&e.captions.remove(),e.chapters&&e.chapters.remove(),e.captionsText&&e.captionsText.remove(),e.captionsButton&&e.captionsButton.remove(),e.chaptersButton&&e.chaptersButton.remove())},rebuildtracks:function(){var e=this;e.findTracks(),e.buildtracks(e,e.getElement(e.controls),e.getElement(e.layers),e.media)},findTracks:function(){var e=this,t=null===e.trackFiles?e.node.querySelectorAll("track"):e.trackFiles,n=t.length;e.tracks=[];for(var i=0;i<n;i++){var r=t[i],s=r.getAttribute("srclang").toLowerCase()||"",o=e.id+"_track_"+i+"_"+r.getAttribute("kind")+"_"+s;e.tracks.push({trackId:o,srclang:s,src:r.getAttribute("src"),kind:r.getAttribute("kind"),label:r.getAttribute("label")||"",entries:[],isLoaded:!1})}},setTrack:function(e,t){for(var n=this,i=n.captionsButton.querySelectorAll('input[type="radio"]'),r=n.captionsButton.querySelectorAll("."+n.options.classPrefix+"captions-selected"),s=n.captionsButton.querySelector('input[value="'+e+'"]'),o=0,a=i.length;o<a;o++)i[o].checked=!1;for(var l=0,u=r.length;l<u;l++)(0,c.removeClass)(r[l],n.options.classPrefix+"captions-selected");s.checked=!0;for(var p=(0,c.siblings)(s,function(e){return(0,c.hasClass)(e,n.options.classPrefix+"captions-selector-label")}),h=0,f=p.length;h<f;h++)(0,c.addClass)(p[h],n.options.classPrefix+"captions-selected");if("none"===e)n.selectedTrack=null,(0,c.removeClass)(n.captionsButton,n.options.classPrefix+"captions-enabled");else for(var m=0,g=n.tracks.length;m<g;m++){var v=n.tracks[m];if(v.trackId===e){null===n.selectedTrack&&(0,c.addClass)(n.captionsButton,n.options.classPrefix+"captions-enabled"),n.selectedTrack=v,n.captions.setAttribute("lang",n.selectedTrack.srclang),n.displayCaptions();break}}var y=(0,d.createEvent)("captionschange",n.media);y.detail.caption=n.selectedTrack,n.media.dispatchEvent(y),t||setTimeout(function(){n.getElement(n.container).focus()},500)},loadNextTrack:function(){var e=this;e.trackToLoad++,e.trackToLoad<e.tracks.length?(e.isLoadingTrack=!0,e.loadTrack(e.trackToLoad)):(e.isLoadingTrack=!1,e.checkForTracks())},loadTrack:function(e){var t=this,n=t.tracks[e];void 0===n||void 0===n.src&&""===n.src||(0,c.ajax)(n.src,"text",function(e){n.entries="string"==typeof e&&/<tt\s+xml/gi.exec(e)?r.default.TrackFormatParser.dfxp.parse(e):r.default.TrackFormatParser.webvtt.parse(e),n.isLoaded=!0,t.enableTrackButton(n),t.loadNextTrack(),"slides"===n.kind?t.setupSlides(n):"chapters"!==n.kind||t.hasChapters||(t.drawChapters(n),t.hasChapters=!0)},function(){t.removeTrackButton(n.trackId),t.loadNextTrack()})},enableTrackButton:function(e){var t=this,n=e.srclang,o=i.default.getElementById(""+e.trackId);if(o){var a=e.label;""===a&&(a=s.default.t(r.default.language.codes[n])||n),o.disabled=!1;for(var l=(0,c.siblings)(o,function(e){return(0,c.hasClass)(e,t.options.classPrefix+"captions-selector-label")}),u=0,p=l.length;u<p;u++)l[u].innerHTML=a;if(t.options.startLanguage===n){o.checked=!0;var h=(0,d.createEvent)("click",o);o.dispatchEvent(h)}}},removeTrackButton:function(e){var t=i.default.getElementById(""+e);if(t){var n=t.closest("li");n&&n.remove()}},addTrackButton:function(e,t,n){var i=this;""===n&&(n=s.default.t(r.default.language.codes[t])||t),i.captionsButton.querySelector("ul").innerHTML+='<li class="'+i.options.classPrefix+'captions-selector-list-item"><input type="radio" class="'+i.options.classPrefix+'captions-selector-input" name="'+i.id+'_captions" id="'+e+'" value="'+e+'" disabled><label class="'+i.options.classPrefix+'captions-selector-label"for="'+e+'">'+n+" (loading)</label></li>"},checkForTracks:function(){var e=this,t=!1;if(e.options.hideCaptionsButtonWhenEmpty){for(var n=0,i=e.tracks.length;n<i;n++){var r=e.tracks[n].kind;if(("subtitles"===r||"captions"===r)&&e.tracks[n].isLoaded){t=!0;break}}e.captionsButton.style.display=t?"":"none",e.setControlsSize()}},displayCaptions:function(){if(void 0!==this.tracks){var e=this,t=e.selectedTrack;if(null!==t&&t.isLoaded){var n=e.searchTrackPosition(t.entries,e.media.currentTime);if(n>-1)return e.captionsText.innerHTML=function(e){var t=i.default.createElement("div");t.innerHTML=e;for(var n=t.getElementsByTagName("script"),r=n.length;r--;)n[r].remove();for(var s=t.getElementsByTagName("*"),o=0,a=s.length;o<a;o++)for(var l=s[o].attributes,d=Array.prototype.slice.call(l),c=0,u=d.length;c<u;c++)d[c].name.startsWith("on")||d[c].value.startsWith("javascript")?s[o].remove():"style"===d[c].name&&s[o].removeAttribute(d[c].name);return t.innerHTML}(t.entries[n].text),e.captionsText.className=e.options.classPrefix+"captions-text "+(t.entries[n].identifier||""),e.captions.style.display="",void(e.captions.style.height="0px");e.captions.style.display="none"}else e.captions.style.display="none"}},setupSlides:function(e){var t=this;t.slides=e,t.slides.entries.imgs=[t.slides.entries.length],t.showSlide(0)},showSlide:function(e){var t=this,n=this;if(void 0!==n.tracks&&void 0!==n.slidesContainer){var r=n.slides.entries[e].text,s=n.slides.entries[e].imgs;if(void 0===s||void 0===s.fadeIn){var o=i.default.createElement("img");o.src=r,o.addEventListener("load",function(){var e=t,i=(0,c.siblings)(e,function(e){return i(e)});e.style.display="none",n.slidesContainer.innerHTML+=e.innerHTML,(0,c.fadeIn)(n.slidesContainer.querySelector(o));for(var r=0,s=i.length;r<s;r++)(0,c.fadeOut)(i[r],400)}),n.slides.entries[e].imgs=s=o}else if(!(0,c.visible)(s)){var a=(0,c.siblings)(self,function(e){return a(e)});(0,c.fadeIn)(n.slidesContainer.querySelector(s));for(var l=0,d=a.length;l<d;l++)(0,c.fadeOut)(a[l])}}},displaySlides:function(){var e=this;if(void 0!==this.slides){var t=e.slides,n=e.searchTrackPosition(t.entries,e.media.currentTime);n>-1&&e.showSlide(n)}},drawChapters:function(e){var t=this,n=e.entries.length;if(n){t.chaptersButton.querySelector("ul").innerHTML="";for(var i=0;i<n;i++)t.chaptersButton.querySelector("ul").innerHTML+='<li class="'+t.options.classPrefix+'chapters-selector-list-item" role="menuitemcheckbox" aria-live="polite" aria-disabled="false" aria-checked="false"><input type="radio" class="'+t.options.classPrefix+'captions-selector-input" name="'+t.id+'_chapters" id="'+t.id+"_chapters_"+i+'" value="'+e.entries[i].start+'" disabled><label class="'+t.options.classPrefix+'chapters-selector-label"for="'+t.id+"_chapters_"+i+'">'+e.entries[i].text+"</label></li>";for(var r=t.chaptersButton.querySelectorAll('input[type="radio"]'),s=t.chaptersButton.querySelectorAll("."+t.options.classPrefix+"chapters-selector-label"),o=0,a=r.length;o<a;o++)r[o].disabled=!1,r[o].checked=!1,r[o].addEventListener("click",function(e){var n=t.chaptersButton.querySelectorAll("li"),i=(0,c.siblings)(this,function(e){return(0,c.hasClass)(e,t.options.classPrefix+"chapters-selector-label")})[0];this.checked=!0,this.parentNode.setAttribute("aria-checked",!0),(0,c.addClass)(i,t.options.classPrefix+"chapters-selected"),(0,c.removeClass)(t.chaptersButton.querySelector("."+t.options.classPrefix+"chapters-selected"),t.options.classPrefix+"chapters-selected");for(var r=0,s=n.length;r<s;r++)n[r].setAttribute("aria-checked",!1);void 0===(e.keyCode||e.which)&&setTimeout(function(){t.getElement(t.container).focus()},500),t.media.setCurrentTime(parseFloat(this.value)),t.media.paused&&t.media.play()});for(var l=0,u=s.length;l<u;l++)s[l].addEventListener("click",function(e){var t=(0,c.siblings)(this,function(e){return"INPUT"===e.tagName})[0],n=(0,d.createEvent)("click",t);t.dispatchEvent(n),e.preventDefault()})}},searchTrackPosition:function(e,t){for(var n=0,i=e.length-1,r=void 0,s=void 0,o=void 0;n<=i;){if(s=e[r=n+i>>1].start,o=e[r].stop,t>=s&&t<o)return r;s<t?n=r+1:s>t&&(i=r-1)}return-1}}),r.default.language={codes:{af:"mejs.afrikaans",sq:"mejs.albanian",ar:"mejs.arabic",be:"mejs.belarusian",bg:"mejs.bulgarian",ca:"mejs.catalan",zh:"mejs.chinese","zh-cn":"mejs.chinese-simplified","zh-tw":"mejs.chines-traditional",hr:"mejs.croatian",cs:"mejs.czech",da:"mejs.danish",nl:"mejs.dutch",en:"mejs.english",et:"mejs.estonian",fl:"mejs.filipino",fi:"mejs.finnish",fr:"mejs.french",gl:"mejs.galician",de:"mejs.german",el:"mejs.greek",ht:"mejs.haitian-creole",iw:"mejs.hebrew",hi:"mejs.hindi",hu:"mejs.hungarian",is:"mejs.icelandic",id:"mejs.indonesian",ga:"mejs.irish",it:"mejs.italian",ja:"mejs.japanese",ko:"mejs.korean",lv:"mejs.latvian",lt:"mejs.lithuanian",mk:"mejs.macedonian",ms:"mejs.malay",mt:"mejs.maltese",no:"mejs.norwegian",fa:"mejs.persian",pl:"mejs.polish",pt:"mejs.portuguese",ro:"mejs.romanian",ru:"mejs.russian",sr:"mejs.serbian",sk:"mejs.slovak",sl:"mejs.slovenian",es:"mejs.spanish",sw:"mejs.swahili",sv:"mejs.swedish",tl:"mejs.tagalog",th:"mejs.thai",tr:"mejs.turkish",uk:"mejs.ukrainian",vi:"mejs.vietnamese",cy:"mejs.welsh",yi:"mejs.yiddish"}},r.default.TrackFormatParser={webvtt:{pattern:/^((?:[0-9]{1,2}:)?[0-9]{2}:[0-9]{2}([,.][0-9]{1,3})?) --\> ((?:[0-9]{1,2}:)?[0-9]{2}:[0-9]{2}([,.][0-9]{3})?)(.*)$/,parse:function(e){for(var t=e.split(/\r?\n/),n=[],i=void 0,r=void 0,s=void 0,o=0,a=t.length;o<a;o++){if((i=this.pattern.exec(t[o]))&&o<t.length){for(o-1>=0&&""!==t[o-1]&&(s=t[o-1]),r=t[++o],o++;""!==t[o]&&o<t.length;)r=r+"\n"+t[o],o++;r=r.trim().replace(/(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gi,"<a href='$1' target='_blank'>$1</a>"),n.push({identifier:s,start:0===(0,l.convertSMPTEtoSeconds)(i[1])?.2:(0,l.convertSMPTEtoSeconds)(i[1]),stop:(0,l.convertSMPTEtoSeconds)(i[3]),text:r,settings:i[5]})}s=""}return n}},dfxp:{parse:function(e){var t=(e=$(e).filter("tt")).firstChild,n=t.querySelectorAll("p"),i=e.getElementById(""+t.attr("style")),r=[],s=void 0;if(i.length){i.removeAttribute("id");var o=i.attributes;if(o.length){s={};for(var a=0,d=o.length;a<d;a++)s[o[a].name.split(":")[1]]=o[a].value}}for(var c=0,u=n.length;c<u;c++){var p=void 0,h={start:null,stop:null,style:null,text:null};if(n.eq(c).attr("begin")&&(h.start=(0,l.convertSMPTEtoSeconds)(n.eq(c).attr("begin"))),!h.start&&n.eq(c-1).attr("end")&&(h.start=(0,l.convertSMPTEtoSeconds)(n.eq(c-1).attr("end"))),n.eq(c).attr("end")&&(h.stop=(0,l.convertSMPTEtoSeconds)(n.eq(c).attr("end"))),!h.stop&&n.eq(c+1).attr("begin")&&(h.stop=(0,l.convertSMPTEtoSeconds)(n.eq(c+1).attr("begin"))),s)for(var f in p="",s)p+=f+":"+s[f]+";";p&&(h.style=p),0===h.start&&(h.start=.2),h.text=n.eq(c).innerHTML.trim().replace(/(\b(https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gi,"<a href='$1' target='_blank'>$1</a>"),r.push(h)}return r}}}},{16:16,2:2,26:26,27:27,30:30,5:5,7:7}],14:[function(e,t,n){"use strict";var i=c(e(2)),r=e(16),s=c(r),o=c(e(5)),a=e(25),l=e(27),d=e(26);function c(e){return e&&e.__esModule?e:{default:e}}Object.assign(r.config,{muteText:null,unmuteText:null,allyVolumeControlText:null,hideVolumeOnTouchDevices:!0,audioVolume:"horizontal",videoVolume:"vertical",startVolume:.8}),Object.assign(s.default.prototype,{buildvolume:function(e,t,n,s){if(!a.IS_ANDROID&&!a.IS_IOS||!this.options.hideVolumeOnTouchDevices){var c=this,u=c.isVideo?c.options.videoVolume:c.options.audioVolume,p=(0,l.isString)(c.options.muteText)?c.options.muteText:o.default.t("mejs.mute"),h=(0,l.isString)(c.options.unmuteText)?c.options.unmuteText:o.default.t("mejs.unmute"),f=(0,l.isString)(c.options.allyVolumeControlText)?c.options.allyVolumeControlText:o.default.t("mejs.volume-help-text"),m=i.default.createElement("div");if(m.className=c.options.classPrefix+"button "+c.options.classPrefix+"volume-button "+c.options.classPrefix+"mute",m.innerHTML="horizontal"===u?'<button type="button" aria-controls="'+c.id+'" title="'+p+'" aria-label="'+p+'" tabindex="0"></button>':'<button type="button" aria-controls="'+c.id+'" title="'+p+'" aria-label="'+p+'" tabindex="0"></button><a href="javascript:void(0);" class="'+c.options.classPrefix+'volume-slider" aria-label="'+o.default.t("mejs.volume-slider")+'" aria-valuemin="0" aria-valuemax="100" role="slider" aria-orientation="vertical"><span class="'+c.options.classPrefix+'offscreen">'+f+'</span><div class="'+c.options.classPrefix+'volume-total"><div class="'+c.options.classPrefix+'volume-current"></div><div class="'+c.options.classPrefix+'volume-handle"></div></div></a>',c.addControlElement(m,"volume"),c.options.keyActions.push({keys:[38],action:function(e){var t=e.getElement(e.container).querySelector("."+r.config.classPrefix+"volume-slider");(t||e.getElement(e.container).querySelector("."+r.config.classPrefix+"volume-slider").matches(":focus"))&&(t.style.display="block"),e.isVideo&&(e.showControls(),e.startControlsTimer());var n=Math.min(e.volume+.1,1);e.setVolume(n),n>0&&e.setMuted(!1)}},{keys:[40],action:function(e){var t=e.getElement(e.container).querySelector("."+r.config.classPrefix+"volume-slider");t&&(t.style.display="block"),e.isVideo&&(e.showControls(),e.startControlsTimer());var n=Math.max(e.volume-.1,0);e.setVolume(n),n<=.1&&e.setMuted(!0)}},{keys:[77],action:function(e){e.getElement(e.container).querySelector("."+r.config.classPrefix+"volume-slider").style.display="block",e.isVideo&&(e.showControls(),e.startControlsTimer()),e.media.muted?e.setMuted(!1):e.setMuted(!0)}}),"horizontal"===u){var g=i.default.createElement("a");g.className=c.options.classPrefix+"horizontal-volume-slider",g.href="javascript:void(0);",g.setAttribute("aria-label",o.default.t("mejs.volume-slider")),g.setAttribute("aria-valuemin",0),g.setAttribute("aria-valuemax",100),g.setAttribute("role","slider"),g.innerHTML+='<span class="'+c.options.classPrefix+'offscreen">'+f+'</span><div class="'+c.options.classPrefix+'horizontal-volume-total"><div class="'+c.options.classPrefix+'horizontal-volume-current"></div><div class="'+c.options.classPrefix+'horizontal-volume-handle"></div></div>',m.parentNode.insertBefore(g,m.nextSibling)}var v=!1,y=!1,b=!1,w="vertical"===u?c.getElement(c.container).querySelector("."+c.options.classPrefix+"volume-slider"):c.getElement(c.container).querySelector("."+c.options.classPrefix+"horizontal-volume-slider"),E="vertical"===u?c.getElement(c.container).querySelector("."+c.options.classPrefix+"volume-total"):c.getElement(c.container).querySelector("."+c.options.classPrefix+"horizontal-volume-total"),x="vertical"===u?c.getElement(c.container).querySelector("."+c.options.classPrefix+"volume-current"):c.getElement(c.container).querySelector("."+c.options.classPrefix+"horizontal-volume-current"),T="vertical"===u?c.getElement(c.container).querySelector("."+c.options.classPrefix+"volume-handle"):c.getElement(c.container).querySelector("."+c.options.classPrefix+"horizontal-volume-handle"),S=function(e){if(null!==e&&!isNaN(e)&&void 0!==e){if(e=Math.max(0,e),0===(e=Math.min(e,1))){(0,d.removeClass)(m,c.options.classPrefix+"mute"),(0,d.addClass)(m,c.options.classPrefix+"unmute");var t=m.firstElementChild;t.setAttribute("title",h),t.setAttribute("aria-label",h)}else{(0,d.removeClass)(m,c.options.classPrefix+"unmute"),(0,d.addClass)(m,c.options.classPrefix+"mute");var n=m.firstElementChild;n.setAttribute("title",p),n.setAttribute("aria-label",p)}var i=100*e+"%",r=getComputedStyle(T);"vertical"===u?(x.style.bottom=0,x.style.height=i,T.style.bottom=i,T.style.marginBottom=-parseFloat(r.height)/2+"px"):(x.style.left=0,x.style.width=i,T.style.left=i,T.style.marginLeft=-parseFloat(r.width)/2+"px")}},C=function(e){var t=(0,d.offset)(E),n=getComputedStyle(E);b=!0;var i=null;if("vertical"===u){var r=parseFloat(n.height);if(i=(r-(e.pageY-t.top))/r,0===t.top||0===t.left)return}else{var s=parseFloat(n.width);i=(e.pageX-t.left)/s}i=Math.max(0,i),i=Math.min(i,1),S(i),c.setMuted(0===i),c.setVolume(i),e.preventDefault(),e.stopPropagation()},k=function(){c.muted?(S(0),(0,d.removeClass)(m,c.options.classPrefix+"mute"),(0,d.addClass)(m,c.options.classPrefix+"unmute")):(S(s.volume),(0,d.removeClass)(m,c.options.classPrefix+"unmute"),(0,d.addClass)(m,c.options.classPrefix+"mute"))};e.getElement(e.container).addEventListener("keydown",function(e){!!e.target.closest("."+c.options.classPrefix+"container")||"vertical"!==u||(w.style.display="none")}),m.addEventListener("mouseenter",function(e){e.target===m&&(w.style.display="block",y=!0,e.preventDefault(),e.stopPropagation())}),m.addEventListener("focusin",function(){w.style.display="block",y=!0}),m.addEventListener("focusout",function(e){e.relatedTarget&&(!e.relatedTarget||e.relatedTarget.matches("."+c.options.classPrefix+"volume-slider"))||"vertical"!==u||(w.style.display="none")}),m.addEventListener("mouseleave",function(){y=!1,v||"vertical"!==u||(w.style.display="none")}),m.addEventListener("focusout",function(){y=!1}),m.addEventListener("keydown",function(e){if(c.options.enableKeyboard&&c.options.keyActions.length){var t=e.which||e.keyCode||0,n=s.volume;switch(t){case 38:n=Math.min(n+.1,1);break;case 40:n=Math.max(0,n-.1);break;default:return!0}v=!1,S(n),s.setVolume(n),e.preventDefault(),e.stopPropagation()}}),m.querySelector("button").addEventListener("click",function(){s.setMuted(!s.muted);var e=(0,l.createEvent)("volumechange",s);s.dispatchEvent(e)}),w.addEventListener("dragstart",function(){return!1}),w.addEventListener("mouseover",function(){y=!0}),w.addEventListener("focusin",function(){w.style.display="block",y=!0}),w.addEventListener("focusout",function(){y=!1,v||"vertical"!==u||(w.style.display="none")}),w.addEventListener("mousedown",function(e){C(e),c.globalBind("mousemove.vol",function(e){var t=e.target;v&&(t===w||t.closest("vertical"===u?"."+c.options.classPrefix+"volume-slider":"."+c.options.classPrefix+"horizontal-volume-slider"))&&C(e)}),c.globalBind("mouseup.vol",function(){v=!1,y||"vertical"!==u||(w.style.display="none")}),v=!0,e.preventDefault(),e.stopPropagation()}),s.addEventListener("volumechange",function(e){v||k(),function(){var e=Math.floor(100*s.volume);w.setAttribute("aria-valuenow",e),w.setAttribute("aria-valuetext",e+"%")}()});var P=!1;s.addEventListener("rendererready",function(){b||setTimeout(function(){P=!0,(0===e.options.startVolume||s.originalNode.muted)&&(s.setMuted(!0),e.options.startVolume=0),s.setVolume(e.options.startVolume),c.setControlsSize()},250)}),s.addEventListener("loadedmetadata",function(){setTimeout(function(){b||P||((0===e.options.startVolume||s.originalNode.muted)&&s.setMuted(!0),s.setVolume(e.options.startVolume),c.setControlsSize()),P=!1},250)}),(0===e.options.startVolume||s.originalNode.muted)&&(s.setMuted(!0),e.options.startVolume=0,k()),c.getElement(c.container).addEventListener("controlsresize",function(){k()})}}})},{16:16,2:2,25:25,26:26,27:27,5:5}],15:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});n.EN={"mejs.plural-form":1,"mejs.download-file":"Download File","mejs.install-flash":"You are using a browser that does not have Flash player enabled or installed. Please turn on your Flash player plugin or download the latest version from https://get.adobe.com/flashplayer/","mejs.fullscreen":"Fullscreen","mejs.play":"Play","mejs.pause":"Pause","mejs.time-slider":"Time Slider","mejs.time-help-text":"Use Left/Right Arrow keys to advance one second, Up/Down arrows to advance ten seconds.","mejs.live-broadcast":"Live Broadcast","mejs.volume-help-text":"Use Up/Down Arrow keys to increase or decrease volume.","mejs.unmute":"Unmute","mejs.mute":"Mute","mejs.volume-slider":"Volume Slider","mejs.video-player":"Video Player","mejs.audio-player":"Audio Player","mejs.captions-subtitles":"Captions/Subtitles","mejs.captions-chapters":"Chapters","mejs.none":"None","mejs.afrikaans":"Afrikaans","mejs.albanian":"Albanian","mejs.arabic":"Arabic","mejs.belarusian":"Belarusian","mejs.bulgarian":"Bulgarian","mejs.catalan":"Catalan","mejs.chinese":"Chinese","mejs.chinese-simplified":"Chinese (Simplified)","mejs.chinese-traditional":"Chinese (Traditional)","mejs.croatian":"Croatian","mejs.czech":"Czech","mejs.danish":"Danish","mejs.dutch":"Dutch","mejs.english":"English","mejs.estonian":"Estonian","mejs.filipino":"Filipino","mejs.finnish":"Finnish","mejs.french":"French","mejs.galician":"Galician","mejs.german":"German","mejs.greek":"Greek","mejs.haitian-creole":"Haitian Creole","mejs.hebrew":"Hebrew","mejs.hindi":"Hindi","mejs.hungarian":"Hungarian","mejs.icelandic":"Icelandic","mejs.indonesian":"Indonesian","mejs.irish":"Irish","mejs.italian":"Italian","mejs.japanese":"Japanese","mejs.korean":"Korean","mejs.latvian":"Latvian","mejs.lithuanian":"Lithuanian","mejs.macedonian":"Macedonian","mejs.malay":"Malay","mejs.maltese":"Maltese","mejs.norwegian":"Norwegian","mejs.persian":"Persian","mejs.polish":"Polish","mejs.portuguese":"Portuguese","mejs.romanian":"Romanian","mejs.russian":"Russian","mejs.serbian":"Serbian","mejs.slovak":"Slovak","mejs.slovenian":"Slovenian","mejs.spanish":"Spanish","mejs.swahili":"Swahili","mejs.swedish":"Swedish","mejs.tagalog":"Tagalog","mejs.thai":"Thai","mejs.turkish":"Turkish","mejs.ukrainian":"Ukrainian","mejs.vietnamese":"Vietnamese","mejs.welsh":"Welsh","mejs.yiddish":"Yiddish"}},{}],16:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.config=void 0;var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),s=g(e(3)),o=g(e(2)),a=g(e(7)),l=g(e(6)),d=g(e(17)),c=g(e(5)),u=e(25),p=e(27),h=e(30),f=e(28),m=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(e(26));function g(e){return e&&e.__esModule?e:{default:e}}a.default.mepIndex=0,a.default.players={};var v=n.config={poster:"",showPosterWhenEnded:!1,showPosterWhenPaused:!1,defaultVideoWidth:480,defaultVideoHeight:270,videoWidth:-1,videoHeight:-1,defaultAudioWidth:400,defaultAudioHeight:40,defaultSeekBackwardInterval:function(e){return.05*e.getDuration()},defaultSeekForwardInterval:function(e){return.05*e.getDuration()},setDimensions:!0,audioWidth:-1,audioHeight:-1,loop:!1,autoRewind:!0,enableAutosize:!0,timeFormat:"",alwaysShowHours:!1,showTimecodeFrameCount:!1,framesPerSecond:25,alwaysShowControls:!1,hideVideoControlsOnLoad:!1,hideVideoControlsOnPause:!1,clickToPlayPause:!0,controlsTimeoutDefault:1500,controlsTimeoutMouseEnter:2500,controlsTimeoutMouseLeave:1e3,iPadUseNativeControls:!1,iPhoneUseNativeControls:!1,AndroidUseNativeControls:!1,features:["playpause","current","progress","duration","tracks","volume","fullscreen"],useDefaultControls:!1,isVideo:!0,stretching:"auto",classPrefix:"mejs__",enableKeyboard:!0,pauseOtherPlayers:!0,secondsDecimalLength:0,customError:null,keyActions:[{keys:[32,179],action:function(e){u.IS_FIREFOX||(e.paused||e.ended?e.play():e.pause())}}]};a.default.MepDefaults=v;var y=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e);var i=this,r="string"==typeof t?o.default.getElementById(t):t;if(!(i instanceof e))return new e(r,n);if(i.node=i.media=r,i.node){if(i.media.player)return i.media.player;if(i.hasFocus=!1,i.controlsAreVisible=!0,i.controlsEnabled=!0,i.controlsTimer=null,i.currentMediaTime=0,i.proxy=null,void 0===n){var s=i.node.getAttribute("data-mejsoptions");n=s?JSON.parse(s):{}}return i.options=Object.assign({},v,n),i.options.loop&&!i.media.getAttribute("loop")?(i.media.loop=!0,i.node.loop=!0):i.media.loop&&(i.options.loop=!0),i.options.timeFormat||(i.options.timeFormat="mm:ss",i.options.alwaysShowHours&&(i.options.timeFormat="hh:mm:ss"),i.options.showTimecodeFrameCount&&(i.options.timeFormat+=":ff")),(0,h.calculateTimeFormat)(0,i.options,i.options.framesPerSecond||25),i.id="mep_"+a.default.mepIndex++,a.default.players[i.id]=i,i.init(),i}}return r(e,[{key:"getElement",value:function(e){return e}},{key:"init",value:function(){var e=this,t=Object.assign({},e.options,{success:function(t,n){e._meReady(t,n)},error:function(t){e._handleError(t)}}),n=e.node.tagName.toLowerCase();if(e.isDynamic="audio"!==n&&"video"!==n&&"iframe"!==n,e.isVideo=e.isDynamic?e.options.isVideo:"audio"!==n&&e.options.isVideo,e.mediaFiles=null,e.trackFiles=null,u.IS_IPAD&&e.options.iPadUseNativeControls||u.IS_IPHONE&&e.options.iPhoneUseNativeControls)e.node.setAttribute("controls",!0),u.IS_IPAD&&e.node.getAttribute("autoplay")&&e.play();else if(!e.isVideo&&(e.isVideo||!e.options.features.length&&!e.options.useDefaultControls)||u.IS_ANDROID&&e.options.AndroidUseNativeControls)e.isVideo||e.options.features.length||e.options.useDefaultControls||(e.node.style.display="none");else{e.node.removeAttribute("controls");var i=e.isVideo?c.default.t("mejs.video-player"):c.default.t("mejs.audio-player"),r=o.default.createElement("span");if(r.className=e.options.classPrefix+"offscreen",r.innerText=i,e.media.parentNode.insertBefore(r,e.media),e.container=o.default.createElement("div"),e.getElement(e.container).id=e.id,e.getElement(e.container).className=e.options.classPrefix+"container "+e.options.classPrefix+"container-keyboard-inactive "+e.media.className,e.getElement(e.container).tabIndex=0,e.getElement(e.container).setAttribute("role","application"),e.getElement(e.container).setAttribute("aria-label",i),e.getElement(e.container).innerHTML='<div class="'+e.options.classPrefix+'inner"><div class="'+e.options.classPrefix+'mediaelement"></div><div class="'+e.options.classPrefix+'layers"></div><div class="'+e.options.classPrefix+'controls"></div></div>',e.getElement(e.container).addEventListener("focus",function(t){if(!e.controlsAreVisible&&!e.hasFocus&&e.controlsEnabled){e.showControls(!0);var n=(0,p.isNodeAfter)(t.relatedTarget,e.getElement(e.container))?"."+e.options.classPrefix+"controls ."+e.options.classPrefix+"button:last-child > button":"."+e.options.classPrefix+"playpause-button > button";e.getElement(e.container).querySelector(n).focus()}}),e.node.parentNode.insertBefore(e.getElement(e.container),e.node),e.options.features.length||e.options.useDefaultControls||(e.getElement(e.container).style.background="transparent",e.getElement(e.container).querySelector("."+e.options.classPrefix+"controls").style.display="none"),e.isVideo&&"fill"===e.options.stretching&&!m.hasClass(e.getElement(e.container).parentNode,e.options.classPrefix+"fill-container")){e.outerContainer=e.media.parentNode;var s=o.default.createElement("div");s.className=e.options.classPrefix+"fill-container",e.getElement(e.container).parentNode.insertBefore(s,e.getElement(e.container)),s.appendChild(e.getElement(e.container))}if(u.IS_ANDROID&&m.addClass(e.getElement(e.container),e.options.classPrefix+"android"),u.IS_IOS&&m.addClass(e.getElement(e.container),e.options.classPrefix+"ios"),u.IS_IPAD&&m.addClass(e.getElement(e.container),e.options.classPrefix+"ipad"),u.IS_IPHONE&&m.addClass(e.getElement(e.container),e.options.classPrefix+"iphone"),m.addClass(e.getElement(e.container),e.isVideo?e.options.classPrefix+"video":e.options.classPrefix+"audio"),u.IS_SAFARI&&!u.IS_IOS){m.addClass(e.getElement(e.container),e.options.classPrefix+"hide-cues");for(var d=e.node.cloneNode(),h=e.node.children,g=[],v=[],y=0,b=h.length;y<b;y++){var w=h[y];!function(){switch(w.tagName.toLowerCase()){case"source":var e={};Array.prototype.slice.call(w.attributes).forEach(function(t){e[t.name]=t.value}),e.type=(0,f.formatType)(e.src,e.type),g.push(e);break;case"track":w.mode="hidden",v.push(w);break;default:d.appendChild(w)}}()}e.node.remove(),e.node=e.media=d,g.length&&(e.mediaFiles=g),v.length&&(e.trackFiles=v)}e.getElement(e.container).querySelector("."+e.options.classPrefix+"mediaelement").appendChild(e.node),e.media.player=e,e.controls=e.getElement(e.container).querySelector("."+e.options.classPrefix+"controls"),e.layers=e.getElement(e.container).querySelector("."+e.options.classPrefix+"layers");var E=e.isVideo?"video":"audio",x=E.substring(0,1).toUpperCase()+E.substring(1);e.options[E+"Width"]>0||e.options[E+"Width"].toString().indexOf("%")>-1?e.width=e.options[E+"Width"]:""!==e.node.style.width&&null!==e.node.style.width?e.width=e.node.style.width:e.node.getAttribute("width")?e.width=e.node.getAttribute("width"):e.width=e.options["default"+x+"Width"],e.options[E+"Height"]>0||e.options[E+"Height"].toString().indexOf("%")>-1?e.height=e.options[E+"Height"]:""!==e.node.style.height&&null!==e.node.style.height?e.height=e.node.style.height:e.node.getAttribute("height")?e.height=e.node.getAttribute("height"):e.height=e.options["default"+x+"Height"],e.initialAspectRatio=e.height>=e.width?e.width/e.height:e.height/e.width,e.setPlayerSize(e.width,e.height),t.pluginWidth=e.width,t.pluginHeight=e.height}if(a.default.MepDefaults=t,new l.default(e.media,t,e.mediaFiles),void 0!==e.getElement(e.container)&&e.options.features.length&&e.controlsAreVisible&&!e.options.hideVideoControlsOnLoad){var T=(0,p.createEvent)("controlsshown",e.getElement(e.container));e.getElement(e.container).dispatchEvent(T)}}},{key:"showControls",value:function(e){var t=this;if(e=void 0===e||e,!t.controlsAreVisible&&t.isVideo){if(e)!function(){m.fadeIn(t.getElement(t.controls),200,function(){m.removeClass(t.getElement(t.controls),t.options.classPrefix+"offscreen");var e=(0,p.createEvent)("controlsshown",t.getElement(t.container));t.getElement(t.container).dispatchEvent(e)});for(var e=t.getElement(t.container).querySelectorAll("."+t.options.classPrefix+"control"),n=function(n,i){m.fadeIn(e[n],200,function(){m.removeClass(e[n],t.options.classPrefix+"offscreen")})},i=0,r=e.length;i<r;i++)n(i)}();else{m.removeClass(t.getElement(t.controls),t.options.classPrefix+"offscreen"),t.getElement(t.controls).style.display="",t.getElement(t.controls).style.opacity=1;for(var n=t.getElement(t.container).querySelectorAll("."+t.options.classPrefix+"control"),i=0,r=n.length;i<r;i++)m.removeClass(n[i],t.options.classPrefix+"offscreen"),n[i].style.display="";var s=(0,p.createEvent)("controlsshown",t.getElement(t.container));t.getElement(t.container).dispatchEvent(s)}t.controlsAreVisible=!0,t.setControlsSize()}}},{key:"hideControls",value:function(e,t){var n=this;if(e=void 0===e||e,!0===t||!(!n.controlsAreVisible||n.options.alwaysShowControls||n.paused&&4===n.readyState&&(!n.options.hideVideoControlsOnLoad&&n.currentTime<=0||!n.options.hideVideoControlsOnPause&&n.currentTime>0)||n.isVideo&&!n.options.hideVideoControlsOnLoad&&!n.readyState||n.ended)){if(e)!function(){m.fadeOut(n.getElement(n.controls),200,function(){m.addClass(n.getElement(n.controls),n.options.classPrefix+"offscreen"),n.getElement(n.controls).style.display="";var e=(0,p.createEvent)("controlshidden",n.getElement(n.container));n.getElement(n.container).dispatchEvent(e)});for(var e=n.getElement(n.container).querySelectorAll("."+n.options.classPrefix+"control"),t=function(t,i){m.fadeOut(e[t],200,function(){m.addClass(e[t],n.options.classPrefix+"offscreen"),e[t].style.display=""})},i=0,r=e.length;i<r;i++)t(i)}();else{m.addClass(n.getElement(n.controls),n.options.classPrefix+"offscreen"),n.getElement(n.controls).style.display="",n.getElement(n.controls).style.opacity=0;for(var i=n.getElement(n.container).querySelectorAll("."+n.options.classPrefix+"control"),r=0,s=i.length;r<s;r++)m.addClass(i[r],n.options.classPrefix+"offscreen"),i[r].style.display="";var o=(0,p.createEvent)("controlshidden",n.getElement(n.container));n.getElement(n.container).dispatchEvent(o)}n.controlsAreVisible=!1}}},{key:"startControlsTimer",value:function(e){var t=this;e=void 0!==e?e:t.options.controlsTimeoutDefault,t.killControlsTimer("start"),t.controlsTimer=setTimeout(function(){t.hideControls(),t.killControlsTimer("hide")},e)}},{key:"killControlsTimer",value:function(){var e=this;null!==e.controlsTimer&&(clearTimeout(e.controlsTimer),delete e.controlsTimer,e.controlsTimer=null)}},{key:"disableControls",value:function(){var e=this;e.killControlsTimer(),e.controlsEnabled=!1,e.hideControls(!1,!0)}},{key:"enableControls",value:function(){this.controlsEnabled=!0,this.showControls(!1)}},{key:"_setDefaultPlayer",value:function(){var e=this;e.proxy&&e.proxy.pause(),e.proxy=new d.default(e),e.media.addEventListener("loadedmetadata",function(){e.getCurrentTime()>0&&e.currentMediaTime>0&&(e.setCurrentTime(e.currentMediaTime),u.IS_IOS||u.IS_ANDROID||e.play())})}},{key:"_meReady",value:function(e,t){var n=this,i=t.getAttribute("autoplay"),r=!(void 0===i||null===i||"false"===i),l=null!==e.rendererName&&/(native|html5)/i.test(n.media.rendererName);if(n.getElement(n.controls)&&n.enableControls(),n.getElement(n.container)&&n.getElement(n.container).querySelector("."+n.options.classPrefix+"overlay-play")&&(n.getElement(n.container).querySelector("."+n.options.classPrefix+"overlay-play").style.display=""),!n.created){if(n.created=!0,n.media=e,n.domNode=t,!(u.IS_ANDROID&&n.options.AndroidUseNativeControls||u.IS_IPAD&&n.options.iPadUseNativeControls||u.IS_IPHONE&&n.options.iPhoneUseNativeControls)){if(!n.isVideo&&!n.options.features.length&&!n.options.useDefaultControls)return r&&l&&n.play(),void(n.options.success&&("string"==typeof n.options.success?s.default[n.options.success](n.media,n.domNode,n):n.options.success(n.media,n.domNode,n)));if(n.featurePosition={},n._setDefaultPlayer(),n.buildposter(n,n.getElement(n.controls),n.getElement(n.layers),n.media),n.buildkeyboard(n,n.getElement(n.controls),n.getElement(n.layers),n.media),n.buildoverlays(n,n.getElement(n.controls),n.getElement(n.layers),n.media),n.options.useDefaultControls){var d=["playpause","current","progress","duration","tracks","volume","fullscreen"];n.options.features=d.concat(n.options.features.filter(function(e){return-1===d.indexOf(e)}))}n.buildfeatures(n,n.getElement(n.controls),n.getElement(n.layers),n.media);var c=(0,p.createEvent)("controlsready",n.getElement(n.container));n.getElement(n.container).dispatchEvent(c),n.setPlayerSize(n.width,n.height),n.setControlsSize(),n.isVideo&&(n.clickToPlayPauseCallback=function(){if(n.options.clickToPlayPause){var e=n.getElement(n.container).querySelector("."+n.options.classPrefix+"overlay-button"),t=e.getAttribute("aria-pressed");n.paused&&t?n.pause():n.paused?n.play():n.pause(),e.setAttribute("aria-pressed",!t),n.getElement(n.container).focus()}},n.createIframeLayer(),n.media.addEventListener("click",n.clickToPlayPauseCallback),!u.IS_ANDROID&&!u.IS_IOS||n.options.alwaysShowControls?(n.getElement(n.container).addEventListener("mouseenter",function(){n.controlsEnabled&&(n.options.alwaysShowControls||(n.killControlsTimer("enter"),n.showControls(),n.startControlsTimer(n.options.controlsTimeoutMouseEnter)))}),n.getElement(n.container).addEventListener("mousemove",function(){n.controlsEnabled&&(n.controlsAreVisible||n.showControls(),n.options.alwaysShowControls||n.startControlsTimer(n.options.controlsTimeoutMouseEnter))}),n.getElement(n.container).addEventListener("mouseleave",function(){n.controlsEnabled&&(n.paused||n.options.alwaysShowControls||n.startControlsTimer(n.options.controlsTimeoutMouseLeave))})):n.node.addEventListener("touchstart",function(){n.controlsAreVisible?n.hideControls(!1):n.controlsEnabled&&n.showControls(!1)},!!u.SUPPORT_PASSIVE_EVENT&&{passive:!0}),n.options.hideVideoControlsOnLoad&&n.hideControls(!1),n.options.enableAutosize&&n.media.addEventListener("loadedmetadata",function(e){var t=void 0!==e?e.detail.target||e.target:n.media;n.options.videoHeight<=0&&!n.domNode.getAttribute("height")&&!n.domNode.style.height&&null!==t&&!isNaN(t.videoHeight)&&(n.setPlayerSize(t.videoWidth,t.videoHeight),n.setControlsSize(),n.media.setSize(t.videoWidth,t.videoHeight))})),n.media.addEventListener("play",function(){for(var e in n.hasFocus=!0,a.default.players)if(a.default.players.hasOwnProperty(e)){var t=a.default.players[e];t.id===n.id||!n.options.pauseOtherPlayers||t.paused||t.ended||(t.pause(),t.hasFocus=!1)}u.IS_ANDROID||u.IS_IOS||n.options.alwaysShowControls||!n.isVideo||n.hideControls()}),n.media.addEventListener("ended",function(){if(n.options.autoRewind)try{n.setCurrentTime(0),setTimeout(function(){var e=n.getElement(n.container).querySelector("."+n.options.classPrefix+"overlay-loading");e&&e.parentNode&&(e.parentNode.style.display="none")},20)}catch(e){}"function"==typeof n.media.renderer.stop?n.media.renderer.stop():n.pause(),n.setProgressRail&&n.setProgressRail(),n.setCurrentRail&&n.setCurrentRail(),n.options.loop?n.play():!n.options.alwaysShowControls&&n.controlsEnabled&&n.showControls()}),n.media.addEventListener("loadedmetadata",function(){(0,h.calculateTimeFormat)(n.getDuration(),n.options,n.options.framesPerSecond||25),n.updateDuration&&n.updateDuration(),n.updateCurrent&&n.updateCurrent(),n.isFullScreen||(n.setPlayerSize(n.width,n.height),n.setControlsSize())});var f=null;n.media.addEventListener("timeupdate",function(){isNaN(n.getDuration())||f===n.getDuration()||(f=n.getDuration(),(0,h.calculateTimeFormat)(f,n.options,n.options.framesPerSecond||25),n.updateDuration&&n.updateDuration(),n.updateCurrent&&n.updateCurrent(),n.setControlsSize())}),n.getElement(n.container).addEventListener("click",function(e){m.addClass(e.currentTarget,n.options.classPrefix+"container-keyboard-inactive")}),n.getElement(n.container).addEventListener("focusin",function(e){m.removeClass(e.currentTarget,n.options.classPrefix+"container-keyboard-inactive"),!n.isVideo||u.IS_ANDROID||u.IS_IOS||!n.controlsEnabled||n.options.alwaysShowControls||(n.killControlsTimer("enter"),n.showControls(),n.startControlsTimer(n.options.controlsTimeoutMouseEnter))}),n.getElement(n.container).addEventListener("focusout",function(e){setTimeout(function(){e.relatedTarget&&n.keyboardAction&&!e.relatedTarget.closest("."+n.options.classPrefix+"container")&&(n.keyboardAction=!1,!n.isVideo||n.options.alwaysShowControls||n.paused||n.startControlsTimer(n.options.controlsTimeoutMouseLeave))},0)}),setTimeout(function(){n.setPlayerSize(n.width,n.height),n.setControlsSize()},0),n.globalResizeCallback=function(){n.isFullScreen||u.HAS_TRUE_NATIVE_FULLSCREEN&&o.default.webkitIsFullScreen||n.setPlayerSize(n.width,n.height),n.setControlsSize()},n.globalBind("resize",n.globalResizeCallback)}r&&l&&n.play(),n.options.success&&("string"==typeof n.options.success?s.default[n.options.success](n.media,n.domNode,n):n.options.success(n.media,n.domNode,n))}}},{key:"_handleError",value:function(e,t,n){var i=this,r=i.getElement(i.layers).querySelector("."+i.options.classPrefix+"overlay-play");r&&(r.style.display="none"),i.options.error&&i.options.error(e,t,n),i.getElement(i.container).querySelector("."+i.options.classPrefix+"cannotplay")&&i.getElement(i.container).querySelector("."+i.options.classPrefix+"cannotplay").remove();var s=o.default.createElement("div");s.className=i.options.classPrefix+"cannotplay",s.style.width="100%",s.style.height="100%";var l="function"==typeof i.options.customError?i.options.customError(i.media,i.media.originalNode):i.options.customError,d="";if(!l){var c=i.media.originalNode.getAttribute("poster");if(c&&(d='<img src="'+c+'" alt="'+a.default.i18n.t("mejs.download-file")+'">'),e.message&&(l="<p>"+e.message+"</p>"),e.urls)for(var u=0,p=e.urls.length;u<p;u++){var h=e.urls[u];l+='<a href="'+h.src+'" data-type="'+h.type+'"><span>'+a.default.i18n.t("mejs.download-file")+": "+h.src+"</span></a>"}}l&&i.getElement(i.layers).querySelector("."+i.options.classPrefix+"overlay-error")&&(s.innerHTML=l,i.getElement(i.layers).querySelector("."+i.options.classPrefix+"overlay-error").innerHTML=""+d+s.outerHTML,i.getElement(i.layers).querySelector("."+i.options.classPrefix+"overlay-error").parentNode.style.display="block"),i.controlsEnabled&&i.disableControls()}},{key:"setPlayerSize",value:function(e,t){var n=this;if(!n.options.setDimensions)return!1;switch(void 0!==e&&(n.width=e),void 0!==t&&(n.height=t),n.options.stretching){case"fill":n.isVideo?n.setFillMode():n.setDimensions(n.width,n.height);break;case"responsive":n.setResponsiveMode();break;case"none":n.setDimensions(n.width,n.height);break;default:!0===n.hasFluidMode()?n.setResponsiveMode():n.setDimensions(n.width,n.height)}}},{key:"hasFluidMode",value:function(){var e=this;return-1!==e.height.toString().indexOf("%")||e.node&&e.node.style.maxWidth&&"none"!==e.node.style.maxWidth&&e.node.style.maxWidth!==e.width||e.node&&e.node.currentStyle&&"100%"===e.node.currentStyle.maxWidth}},{key:"setResponsiveMode",value:function(){var e=this,t=function(){for(var t=void 0,n=e.getElement(e.container);n;){try{if(u.IS_FIREFOX&&"html"===n.tagName.toLowerCase()&&s.default.self!==s.default.top&&null!==s.default.frameElement)return s.default.frameElement;t=n.parentElement}catch(e){t=n.parentElement}if(t&&m.visible(t))return t;n=t}return null}(),n=t?getComputedStyle(t,null):getComputedStyle(o.default.body,null),i=e.isVideo?e.node.videoWidth&&e.node.videoWidth>0?e.node.videoWidth:e.node.getAttribute("width")?e.node.getAttribute("width"):e.options.defaultVideoWidth:e.options.defaultAudioWidth,r=e.isVideo?e.node.videoHeight&&e.node.videoHeight>0?e.node.videoHeight:e.node.getAttribute("height")?e.node.getAttribute("height"):e.options.defaultVideoHeight:e.options.defaultAudioHeight,a=function(){var t=1;return e.isVideo?(t=e.node.videoWidth&&e.node.videoWidth>0&&e.node.videoHeight&&e.node.videoHeight>0?e.height>=e.width?e.node.videoWidth/e.node.videoHeight:e.node.videoHeight/e.node.videoWidth:e.initialAspectRatio,(isNaN(t)||t<.01||t>100)&&(t=1),t):t}(),l=parseFloat(n.height),d=void 0,c=parseFloat(n.width);if(d=e.isVideo?"100%"===e.height?parseFloat(c*r/i,10):e.height>=e.width?parseFloat(c/a,10):parseFloat(c*a,10):r,isNaN(d)&&(d=l),e.getElement(e.container).parentNode.length>0&&"body"===e.getElement(e.container).parentNode.tagName.toLowerCase()&&(c=s.default.innerWidth||o.default.documentElement.clientWidth||o.default.body.clientWidth,d=s.default.innerHeight||o.default.documentElement.clientHeight||o.default.body.clientHeight),d&&c){e.getElement(e.container).style.width=c+"px",e.getElement(e.container).style.height=d+"px",e.node.style.width="100%",e.node.style.height="100%",e.isVideo&&e.media.setSize&&e.media.setSize(c,d);for(var p=e.getElement(e.layers).children,h=0,f=p.length;h<f;h++)p[h].style.width="100%",p[h].style.height="100%"}}},{key:"setFillMode",value:function(){var e=this,t=s.default.self!==s.default.top&&null!==s.default.frameElement,n=function(){for(var t=void 0,n=e.getElement(e.container);n;){try{if(u.IS_FIREFOX&&"html"===n.tagName.toLowerCase()&&s.default.self!==s.default.top&&null!==s.default.frameElement)return s.default.frameElement;t=n.parentElement}catch(e){t=n.parentElement}if(t&&m.visible(t))return t;n=t}return null}(),i=n?getComputedStyle(n,null):getComputedStyle(o.default.body,null);"none"!==e.node.style.height&&e.node.style.height!==e.height&&(e.node.style.height="auto"),"none"!==e.node.style.maxWidth&&e.node.style.maxWidth!==e.width&&(e.node.style.maxWidth="none"),"none"!==e.node.style.maxHeight&&e.node.style.maxHeight!==e.height&&(e.node.style.maxHeight="none"),e.node.currentStyle&&("100%"===e.node.currentStyle.height&&(e.node.currentStyle.height="auto"),"100%"===e.node.currentStyle.maxWidth&&(e.node.currentStyle.maxWidth="none"),"100%"===e.node.currentStyle.maxHeight&&(e.node.currentStyle.maxHeight="none")),t||parseFloat(i.width)||(n.style.width=e.media.offsetWidth+"px"),t||parseFloat(i.height)||(n.style.height=e.media.offsetHeight+"px"),i=getComputedStyle(n);var r=parseFloat(i.width),a=parseFloat(i.height);e.setDimensions("100%","100%");var l=e.getElement(e.container).querySelector("."+e.options.classPrefix+"poster>img");l&&(l.style.display="");for(var d=e.getElement(e.container).querySelectorAll("object, embed, iframe, video"),c=e.height,p=e.width,h=r,f=c*r/p,g=p*a/c,v=a,y=g>r==!1,b=y?Math.floor(h):Math.floor(g),w=y?Math.floor(f):Math.floor(v),E=y?r+"px":b+"px",x=y?w+"px":a+"px",T=0,S=d.length;T<S;T++)d[T].style.height=x,d[T].style.width=E,e.media.setSize&&e.media.setSize(E,x),d[T].style.marginLeft=Math.floor((r-b)/2)+"px",d[T].style.marginTop=0}},{key:"setDimensions",value:function(e,t){var n=this;e=(0,p.isString)(e)&&e.indexOf("%")>-1?e:parseFloat(e)+"px",t=(0,p.isString)(t)&&t.indexOf("%")>-1?t:parseFloat(t)+"px",n.getElement(n.container).style.width=e,n.getElement(n.container).style.height=t;for(var i=n.getElement(n.layers).children,r=0,s=i.length;r<s;r++)i[r].style.width=e,i[r].style.height=t}},{key:"setControlsSize",value:function(){var e=this;if(m.visible(e.getElement(e.container)))if(e.rail&&m.visible(e.rail)){for(var t=e.total?getComputedStyle(e.total,null):null,n=t?parseFloat(t.marginLeft)+parseFloat(t.marginRight):0,i=getComputedStyle(e.rail),r=parseFloat(i.marginLeft)+parseFloat(i.marginRight),s=0,o=m.siblings(e.rail,function(t){return t!==e.rail}),a=o.length,l=0;l<a;l++)s+=o[l].offsetWidth;s+=n+(0===n?2*r:r)+1,e.getElement(e.container).style.minWidth=s+"px";var d=(0,p.createEvent)("controlsresize",e.getElement(e.container));e.getElement(e.container).dispatchEvent(d)}else{for(var c=e.getElement(e.controls).children,u=0,h=0,f=c.length;h<f;h++)u+=c[h].offsetWidth;e.getElement(e.container).style.minWidth=u+"px"}}},{key:"addControlElement",value:function(e,t){var n=this;if(void 0!==n.featurePosition[t]){var i=n.getElement(n.controls).children[n.featurePosition[t]-1];i.parentNode.insertBefore(e,i.nextSibling)}else{n.getElement(n.controls).appendChild(e);for(var r=n.getElement(n.controls).children,s=0,o=r.length;s<o;s++)if(e===r[s]){n.featurePosition[t]=s;break}}}},{key:"createIframeLayer",value:function(){var e=this;if(e.isVideo&&null!==e.media.rendererName&&e.media.rendererName.indexOf("iframe")>-1&&!o.default.getElementById(e.media.id+"-iframe-overlay")){var t=o.default.createElement("div"),n=o.default.getElementById(e.media.id+"_"+e.media.rendererName);t.id=e.media.id+"-iframe-overlay",t.className=e.options.classPrefix+"iframe-overlay",t.addEventListener("click",function(t){e.options.clickToPlayPause&&(e.paused?e.play():e.pause(),t.preventDefault(),t.stopPropagation())}),n.parentNode.insertBefore(t,n)}}},{key:"resetSize",value:function(){var e=this;setTimeout(function(){e.setPlayerSize(e.width,e.height),e.setControlsSize()},50)}},{key:"setPoster",value:function(e){var t=this;if(t.getElement(t.container)){var n=t.getElement(t.container).querySelector("."+t.options.classPrefix+"poster");n||((n=o.default.createElement("div")).className=t.options.classPrefix+"poster "+t.options.classPrefix+"layer",t.getElement(t.layers).appendChild(n));var i=n.querySelector("img");!i&&e&&((i=o.default.createElement("img")).className=t.options.classPrefix+"poster-img",i.width="100%",i.height="100%",n.style.display="",n.appendChild(i)),e?(i.setAttribute("src",e),n.style.backgroundImage='url("'+e+'")',n.style.display=""):i?(n.style.backgroundImage="none",n.style.display="none",i.remove()):n.style.display="none"}else(u.IS_IPAD&&t.options.iPadUseNativeControls||u.IS_IPHONE&&t.options.iPhoneUseNativeControls||u.IS_ANDROID&&t.options.AndroidUseNativeControls)&&(t.media.originalNode.poster=e)}},{key:"changeSkin",value:function(e){var t=this;t.getElement(t.container).className=t.options.classPrefix+"container "+e,t.setPlayerSize(t.width,t.height),t.setControlsSize()}},{key:"globalBind",value:function(e,t){var n=this,i=n.node?n.node.ownerDocument:o.default;if((e=(0,p.splitEvents)(e,n.id)).d)for(var r=e.d.split(" "),a=0,l=r.length;a<l;a++)r[a].split(".").reduce(function(e,n){return i.addEventListener(n,t,!1),n},"");if(e.w)for(var d=e.w.split(" "),c=0,u=d.length;c<u;c++)d[c].split(".").reduce(function(e,n){return s.default.addEventListener(n,t,!1),n},"")}},{key:"globalUnbind",value:function(e,t){var n=this,i=n.node?n.node.ownerDocument:o.default;if((e=(0,p.splitEvents)(e,n.id)).d)for(var r=e.d.split(" "),a=0,l=r.length;a<l;a++)r[a].split(".").reduce(function(e,n){return i.removeEventListener(n,t,!1),n},"");if(e.w)for(var d=e.w.split(" "),c=0,u=d.length;c<u;c++)d[c].split(".").reduce(function(e,n){return s.default.removeEventListener(n,t,!1),n},"")}},{key:"buildfeatures",value:function(e,t,n,i){for(var r=this,s=0,o=r.options.features.length;s<o;s++){var a=r.options.features[s];if(r["build"+a])try{r["build"+a](e,t,n,i)}catch(e){console.error("error building "+a,e)}}}},{key:"buildposter",value:function(e,t,n,i){var r=this,s=o.default.createElement("div");s.className=r.options.classPrefix+"poster "+r.options.classPrefix+"layer",n.appendChild(s);var a=i.originalNode.getAttribute("poster");""!==e.options.poster&&(a&&u.IS_IOS&&i.originalNode.removeAttribute("poster"),a=e.options.poster),a?r.setPoster(a):null!==r.media.renderer&&"function"==typeof r.media.renderer.getPosterUrl?r.setPoster(r.media.renderer.getPosterUrl()):s.style.display="none",i.addEventListener("play",function(){s.style.display="none"}),i.addEventListener("playing",function(){s.style.display="none"}),e.options.showPosterWhenEnded&&e.options.autoRewind&&i.addEventListener("ended",function(){s.style.display=""}),i.addEventListener("error",function(){s.style.display="none"}),e.options.showPosterWhenPaused&&i.addEventListener("pause",function(){e.ended||(s.style.display="")})}},{key:"buildoverlays",value:function(e,t,n,i){if(e.isVideo){var r=this,s=o.default.createElement("div"),a=o.default.createElement("div"),l=o.default.createElement("div");s.style.display="none",s.className=r.options.classPrefix+"overlay "+r.options.classPrefix+"layer",s.innerHTML='<div class="'+r.options.classPrefix+'overlay-loading"><span class="'+r.options.classPrefix+'overlay-loading-bg-img"></span></div>',n.appendChild(s),a.style.display="none",a.className=r.options.classPrefix+"overlay "+r.options.classPrefix+"layer",a.innerHTML='<div class="'+r.options.classPrefix+'overlay-error"></div>',n.appendChild(a),l.className=r.options.classPrefix+"overlay "+r.options.classPrefix+"layer "+r.options.classPrefix+"overlay-play",l.innerHTML='<div class="'+r.options.classPrefix+'overlay-button" role="button" tabindex="0" aria-label="'+c.default.t("mejs.play")+'" aria-pressed="false"></div>',l.addEventListener("click",function(){if(r.options.clickToPlayPause){var e=r.getElement(r.container).querySelector("."+r.options.classPrefix+"overlay-button"),t=e.getAttribute("aria-pressed");r.paused?r.play():r.pause(),e.setAttribute("aria-pressed",!!t),r.getElement(r.container).focus()}}),l.addEventListener("keydown",function(e){var t=e.keyCode||e.which||0;if(13===t||u.IS_FIREFOX&&32===t){var n=(0,p.createEvent)("click",l);return l.dispatchEvent(n),!1}}),n.appendChild(l),null!==r.media.rendererName&&(/(youtube|facebook)/i.test(r.media.rendererName)&&!(r.media.originalNode.getAttribute("poster")||e.options.poster||"function"==typeof r.media.renderer.getPosterUrl&&r.media.renderer.getPosterUrl())||u.IS_STOCK_ANDROID||r.media.originalNode.getAttribute("autoplay"))&&(l.style.display="none");var d=!1;i.addEventListener("play",function(){l.style.display="none",s.style.display="none",a.style.display="none",d=!1}),i.addEventListener("playing",function(){l.style.display="none",s.style.display="none",a.style.display="none",d=!1}),i.addEventListener("seeking",function(){l.style.display="none",s.style.display="",d=!1}),i.addEventListener("seeked",function(){l.style.display=r.paused&&!u.IS_STOCK_ANDROID?"":"none",s.style.display="none",d=!1}),i.addEventListener("pause",function(){s.style.display="none",u.IS_STOCK_ANDROID||d||(l.style.display=""),d=!1}),i.addEventListener("waiting",function(){s.style.display="",d=!1}),i.addEventListener("loadeddata",function(){s.style.display="",u.IS_ANDROID&&(i.canplayTimeout=setTimeout(function(){if(o.default.createEvent){var e=o.default.createEvent("HTMLEvents");return e.initEvent("canplay",!0,!0),i.dispatchEvent(e)}},300)),d=!1}),i.addEventListener("canplay",function(){s.style.display="none",clearTimeout(i.canplayTimeout),d=!1}),i.addEventListener("error",function(e){r._handleError(e,r.media,r.node),s.style.display="none",l.style.display="none",d=!0}),i.addEventListener("loadedmetadata",function(){r.controlsEnabled||r.enableControls()}),i.addEventListener("keydown",function(t){r.onkeydown(e,i,t),d=!1})}}},{key:"buildkeyboard",value:function(e,t,n,i){var r=this;r.getElement(r.container).addEventListener("keydown",function(){r.keyboardAction=!0}),r.globalKeydownCallback=function(t){var n=o.default.activeElement.closest("."+r.options.classPrefix+"container"),s=r.media.closest("."+r.options.classPrefix+"container");return r.hasFocus=!(!n||!s||n.id!==s.id),r.onkeydown(e,i,t)},r.globalClickCallback=function(e){r.hasFocus=!!e.target.closest("."+r.options.classPrefix+"container")},r.globalBind("keydown",r.globalKeydownCallback),r.globalBind("click",r.globalClickCallback)}},{key:"onkeydown",value:function(e,t,n){if(e.hasFocus&&e.options.enableKeyboard)for(var i=0,r=e.options.keyActions.length;i<r;i++)for(var s=e.options.keyActions[i],o=0,a=s.keys.length;o<a;o++)if(n.keyCode===s.keys[o])return s.action(e,t,n.keyCode,n),n.preventDefault(),void n.stopPropagation();return!0}},{key:"play",value:function(){this.proxy.play()}},{key:"pause",value:function(){this.proxy.pause()}},{key:"load",value:function(){this.proxy.load()}},{key:"setCurrentTime",value:function(e){this.proxy.setCurrentTime(e)}},{key:"getCurrentTime",value:function(){return this.proxy.currentTime}},{key:"getDuration",value:function(){return this.proxy.duration}},{key:"setVolume",value:function(e){this.proxy.volume=e}},{key:"getVolume",value:function(){return this.proxy.getVolume()}},{key:"setMuted",value:function(e){this.proxy.setMuted(e)}},{key:"setSrc",value:function(e){this.controlsEnabled||this.enableControls(),this.proxy.setSrc(e)}},{key:"getSrc",value:function(){return this.proxy.getSrc()}},{key:"canPlayType",value:function(e){return this.proxy.canPlayType(e)}},{key:"remove",value:function(){var e=this,t=e.media.rendererName,n=e.media.originalNode.src;for(var r in e.options.features){var s=e.options.features[r];if(e["clean"+s])try{e["clean"+s](e,e.getElement(e.layers),e.getElement(e.controls),e.media)}catch(e){console.error("error cleaning "+s,e)}}var l=e.node.getAttribute("width"),d=e.node.getAttribute("height");(l?-1===l.indexOf("%")&&(l+="px"):l="auto",d?-1===d.indexOf("%")&&(d+="px"):d="auto",e.node.style.width=l,e.node.style.height=d,e.setPlayerSize(0,0),e.isDynamic?e.getElement(e.container).parentNode.insertBefore(e.node,e.getElement(e.container)):function(){e.node.setAttribute("controls",!0),e.node.setAttribute("id",e.node.getAttribute("id").replace("_"+t,"").replace("_from_mejs",""));var i=e.getElement(e.container).querySelector("."+e.options.classPrefix+"poster>img");(i&&e.node.setAttribute("poster",i.src),delete e.node.autoplay,e.node.setAttribute("src",""),""!==e.media.canPlayType((0,f.getTypeFromFile)(n))&&e.node.setAttribute("src",n),t&&t.indexOf("iframe")>-1)&&o.default.getElementById(e.media.id+"-iframe-overlay").remove();var r=e.node.cloneNode();if(r.style.display="",e.getElement(e.container).parentNode.insertBefore(r,e.getElement(e.container)),e.node.remove(),e.mediaFiles)for(var s=0,a=e.mediaFiles.length;s<a;s++){var l=o.default.createElement("source");l.setAttribute("src",e.mediaFiles[s].src),l.setAttribute("type",e.mediaFiles[s].type),r.appendChild(l)}if(e.trackFiles)for(var d=function(t,n){var i=e.trackFiles[t],s=o.default.createElement("track");s.kind=i.kind,s.label=i.label,s.srclang=i.srclang,s.src=i.src,r.appendChild(s),s.addEventListener("load",function(){this.mode="showing",r.textTracks[t].mode="showing"})},c=0,u=e.trackFiles.length;c<u;c++)d(c);delete e.node,delete e.mediaFiles,delete e.trackFiles}(),e.media.renderer&&"function"==typeof e.media.renderer.destroy&&e.media.renderer.destroy(),delete a.default.players[e.id],"object"===i(e.getElement(e.container)))&&(e.getElement(e.container).parentNode.querySelector("."+e.options.classPrefix+"offscreen").remove(),e.getElement(e.container).remove());e.globalUnbind("resize",e.globalResizeCallback),e.globalUnbind("keydown",e.globalKeydownCallback),e.globalUnbind("click",e.globalClickCallback),delete e.media.player}},{key:"paused",get:function(){return this.proxy.paused}},{key:"muted",get:function(){return this.proxy.muted},set:function(e){this.setMuted(e)}},{key:"ended",get:function(){return this.proxy.ended}},{key:"readyState",get:function(){return this.proxy.readyState}},{key:"currentTime",set:function(e){this.setCurrentTime(e)},get:function(){return this.getCurrentTime()}},{key:"duration",get:function(){return this.getDuration()}},{key:"volume",set:function(e){this.setVolume(e)},get:function(){return this.getVolume()}},{key:"src",set:function(e){this.setSrc(e)},get:function(){return this.getSrc()}}]),e}();s.default.MediaElementPlayer=y,a.default.MediaElementPlayer=y,n.default=y},{17:17,2:2,25:25,26:26,27:27,28:28,3:3,30:30,5:5,6:6,7:7}],17:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var i=function(){function e(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,i.key,i)}}return function(t,n,i){return n&&e(t.prototype,n),i&&e(t,i),t}}(),r=function(e){return e&&e.__esModule?e:{default:e}}(e(3));var s=function(){function e(t){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.media=t.media,this.isVideo=t.isVideo,this.classPrefix=t.options.classPrefix,this.createIframeLayer=function(){return t.createIframeLayer()},this.setPoster=function(e){return t.setPoster(e)},this}return i(e,[{key:"play",value:function(){this.media.play()}},{key:"pause",value:function(){this.media.pause()}},{key:"load",value:function(){var e=this;e.isLoaded||e.media.load(),e.isLoaded=!0}},{key:"setCurrentTime",value:function(e){this.media.setCurrentTime(e)}},{key:"getCurrentTime",value:function(){return this.media.currentTime}},{key:"getDuration",value:function(){return this.media.getDuration()}},{key:"setVolume",value:function(e){this.media.setVolume(e)}},{key:"getVolume",value:function(){return this.media.getVolume()}},{key:"setMuted",value:function(e){this.media.setMuted(e)}},{key:"setSrc",value:function(e){var t=this,n=document.getElementById(t.media.id+"-iframe-overlay");n&&n.remove(),t.media.setSrc(e),t.createIframeLayer(),null!==t.media.renderer&&"function"==typeof t.media.renderer.getPosterUrl&&t.setPoster(t.media.renderer.getPosterUrl())}},{key:"getSrc",value:function(){return this.media.getSrc()}},{key:"canPlayType",value:function(e){return this.media.canPlayType(e)}},{key:"paused",get:function(){return this.media.paused}},{key:"muted",set:function(e){this.setMuted(e)},get:function(){return this.media.muted}},{key:"ended",get:function(){return this.media.ended}},{key:"readyState",get:function(){return this.media.readyState}},{key:"currentTime",set:function(e){this.setCurrentTime(e)},get:function(){return this.getCurrentTime()}},{key:"duration",get:function(){return this.getDuration()}},{key:"remainingTime",get:function(){return this.getDuration()-this.currentTime()}},{key:"volume",set:function(e){this.setVolume(e)},get:function(){return this.getVolume()}},{key:"src",set:function(e){this.setSrc(e)},get:function(){return this.getSrc()}}]),e}();n.default=s,r.default.DefaultPlayer=s},{3:3}],18:[function(e,t,n){"use strict";var i=o(e(3)),r=o(e(7)),s=o(e(16));function o(e){return e&&e.__esModule?e:{default:e}}"undefined"!=typeof jQuery?r.default.$=i.default.jQuery=i.default.$=jQuery:"undefined"!=typeof Zepto?r.default.$=i.default.Zepto=i.default.$=Zepto:"undefined"!=typeof ender&&(r.default.$=i.default.ender=i.default.$=ender),function(e){void 0!==e&&(e.fn.mediaelementplayer=function(t){return!1===t?this.each(function(){var t=e(this).data("mediaelementplayer");t&&t.remove(),e(this).removeData("mediaelementplayer")}):this.each(function(){e(this).data("mediaelementplayer",new s.default(this,t))}),this},e(document).ready(function(){e("."+r.default.MepDefaults.classPrefix+"player").mediaelementplayer()}))}(r.default.$)},{16:16,3:3,7:7}],19:[function(e,t,n){"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=u(e(3)),s=u(e(7)),o=e(8),a=e(27),l=e(28),d=e(25),c=e(26);function u(e){return e&&e.__esModule?e:{default:e}}var p={promise:null,load:function(e){return"undefined"!=typeof dashjs?p.promise=new Promise(function(e){e()}).then(function(){p._createPlayer(e)}):(e.options.path="string"==typeof e.options.path?e.options.path:"https://cdn.dashjs.org/latest/dash.all.min.js",p.promise=p.promise||(0,c.loadScript)(e.options.path),p.promise.then(function(){p._createPlayer(e)})),p.promise},_createPlayer:function(e){var t=dashjs.MediaPlayer().create();return r.default["__ready__"+e.id](t),t}},h={name:"native_dash",options:{prefix:"native_dash",dash:{path:"https://cdn.dashjs.org/latest/dash.all.min.js",debug:!1,drm:{},robustnessLevel:""}},canPlayType:function(e){return d.HAS_MSE&&["application/dash+xml"].indexOf(e.toLowerCase())>-1},create:function(e,t,n){var l=e.originalNode,d=e.id+"_"+t.prefix,c=l.autoplay,u=l.children,h=null,f=null;l.removeAttribute("type");for(var m=0,g=u.length;m<g;m++)u[m].removeAttribute("type");h=l.cloneNode(!0),t=Object.assign(t,e.options);for(var v=s.default.html5media.properties,y=s.default.html5media.events.concat(["click","mouseover","mouseout"]).filter(function(e){return"error"!==e}),b=function(t){var n=(0,a.createEvent)(t.type,e);e.dispatchEvent(n)},w=function(e){var n=""+e.substring(0,1).toUpperCase()+e.substring(1);h["get"+n]=function(){return null!==f?h[e]:null},h["set"+n]=function(n){if(-1===s.default.html5media.readOnlyProperties.indexOf(e))if("src"===e){var r="object"===(void 0===n?"undefined":i(n))&&n.src?n.src:n;if(h[e]=r,null!==f){f.reset();for(var o=0,l=y.length;o<l;o++)h.removeEventListener(y[o],b);f=p._createPlayer({options:t.dash,id:d}),n&&"object"===(void 0===n?"undefined":i(n))&&"object"===i(n.drm)&&(f.setProtectionData(n.drm),(0,a.isString)(t.dash.robustnessLevel)&&t.dash.robustnessLevel&&f.getProtectionController().setRobustnessLevel(t.dash.robustnessLevel)),f.attachSource(r),c&&f.play()}}else h[e]=n}},E=0,x=v.length;E<x;E++)w(v[E]);if(r.default["__ready__"+d]=function(n){e.dashPlayer=f=n;for(var r=dashjs.MediaPlayer.events,o=function(e){"loadedmetadata"===e&&(f.getDebug().setLogToBrowserConsole(t.dash.debug),f.initialize(),f.setScheduleWhilePaused(!1),f.setFastSwitchEnabled(!0),f.attachView(h),f.setAutoPlay(!1),"object"!==i(t.dash.drm)||s.default.Utils.isObjectEmpty(t.dash.drm)||(f.setProtectionData(t.dash.drm),(0,a.isString)(t.dash.robustnessLevel)&&t.dash.robustnessLevel&&f.getProtectionController().setRobustnessLevel(t.dash.robustnessLevel)),f.attachSource(h.getSrc())),h.addEventListener(e,b)},l=0,d=y.length;l<d;l++)o(y[l]);var c=function(t){if("error"===t.type.toLowerCase())e.generateError(t.message,h.src),console.error(t);else{var n=(0,a.createEvent)(t.type,e);n.data=t,e.dispatchEvent(n)}};for(var u in r)r.hasOwnProperty(u)&&f.on(r[u],function(e){return c(e)})},n&&n.length>0)for(var T=0,S=n.length;T<S;T++)if(o.renderer.renderers[t.prefix].canPlayType(n[T].type)){h.setAttribute("src",n[T].src),void 0!==n[T].drm&&(t.dash.drm=n[T].drm);break}h.setAttribute("id",d),l.parentNode.insertBefore(h,l),l.autoplay=!1,l.style.display="none",h.setSize=function(e,t){return h.style.width=e+"px",h.style.height=t+"px",h},h.hide=function(){return h.pause(),h.style.display="none",h},h.show=function(){return h.style.display="",h},h.destroy=function(){null!==f&&f.reset()};var C=(0,a.createEvent)("rendererready",h);return e.dispatchEvent(C),e.promises.push(p.load({options:t.dash,id:d})),h}};l.typeChecks.push(function(e){return~e.toLowerCase().indexOf(".mpd")?"application/dash+xml":null}),o.renderer.add(h)},{25:25,26:26,27:27,28:28,3:3,7:7,8:8}],20:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.PluginDetector=void 0;var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=p(e(3)),s=p(e(2)),o=p(e(7)),a=p(e(5)),l=e(8),d=e(27),c=e(25),u=e(28);function p(e){return e&&e.__esModule?e:{default:e}}var h=n.PluginDetector={plugins:[],hasPluginVersion:function(e,t){var n=h.plugins[e];return t[1]=t[1]||0,t[2]=t[2]||0,n[0]>t[0]||n[0]===t[0]&&n[1]>t[1]||n[0]===t[0]&&n[1]===t[1]&&n[2]>=t[2]},addPlugin:function(e,t,n,i,r){h.plugins[e]=h.detectPlugin(t,n,i,r)},detectPlugin:function(e,t,n,s){var o=[0,0,0],a=void 0,l=void 0;if(null!==c.NAV.plugins&&void 0!==c.NAV.plugins&&"object"===i(c.NAV.plugins[e])){if((a=c.NAV.plugins[e].description)&&(void 0===c.NAV.mimeTypes||!c.NAV.mimeTypes[t]||c.NAV.mimeTypes[t].enabledPlugin))for(var d=0,u=(o=a.replace(e,"").replace(/^\s+/,"").replace(/\sr/gi,".").split(".")).length;d<u;d++)o[d]=parseInt(o[d].match(/\d+/),10)}else if(void 0!==r.default.ActiveXObject)try{(l=new ActiveXObject(n))&&(o=s(l))}catch(e){}return o}};h.addPlugin("flash","Shockwave Flash","application/x-shockwave-flash","ShockwaveFlash.ShockwaveFlash",function(e){var t=[],n=e.GetVariable("$version");return n&&(n=n.split(" ")[1].split(","),t=[parseInt(n[0],10),parseInt(n[1],10),parseInt(n[2],10)]),t});var f={create:function(e,t,n){var i={},p=!1;i.options=t,i.id=e.id+"_"+i.options.prefix,i.mediaElement=e,i.flashState={},i.flashApi=null,i.flashApiStack=[];for(var h=o.default.html5media.properties,f=function(e){i.flashState[e]=null;var t=""+e.substring(0,1).toUpperCase()+e.substring(1);i["get"+t]=function(){if(null!==i.flashApi){if("function"==typeof i.flashApi["get_"+e]){var t=i.flashApi["get_"+e]();return"buffered"===e?{start:function(){return 0},end:function(){return t},length:1}:t}return null}return null},i["set"+t]=function(t){if("src"===e&&(t=(0,u.absolutizeUrl)(t)),null!==i.flashApi&&void 0!==i.flashApi["set_"+e])try{i.flashApi["set_"+e](t)}catch(e){}else i.flashApiStack.push({type:"set",propName:e,value:t})}},m=0,g=h.length;m<g;m++)f(h[m]);var v=o.default.html5media.methods,y=function(e){i[e]=function(){if(p)if(null!==i.flashApi){if(i.flashApi["fire_"+e])try{i.flashApi["fire_"+e]()}catch(e){}}else i.flashApiStack.push({type:"call",methodName:e})}};v.push("stop");for(var b=0,w=v.length;b<w;b++)y(v[b]);for(var E=["rendererready"],x=0,T=E.length;x<T;x++){var S=(0,d.createEvent)(E[x],i);e.dispatchEvent(S)}r.default["__ready__"+i.id]=function(){if(i.flashReady=!0,i.flashApi=s.default.getElementById("__"+i.id),i.flashApiStack.length)for(var e=0,t=i.flashApiStack.length;e<t;e++){var n=i.flashApiStack[e];if("set"===n.type){var r=n.propName,o=""+r.substring(0,1).toUpperCase()+r.substring(1);i["set"+o](n.value)}else"call"===n.type&&i[n.methodName]()}},r.default["__event__"+i.id]=function(e,t){var n=(0,d.createEvent)(e,i);if(t)try{n.data=JSON.parse(t),n.details.data=JSON.parse(t)}catch(e){n.message=t}i.mediaElement.dispatchEvent(n)},i.flashWrapper=s.default.createElement("div"),-1===["always","sameDomain"].indexOf(i.options.shimScriptAccess)&&(i.options.shimScriptAccess="sameDomain");var C=e.originalNode.autoplay,k=["uid="+i.id,"autoplay="+C,"allowScriptAccess="+i.options.shimScriptAccess,"preload="+(e.originalNode.getAttribute("preload")||"")],P=null!==e.originalNode&&"video"===e.originalNode.tagName.toLowerCase(),$=P?e.originalNode.height:1,A=P?e.originalNode.width:1;e.originalNode.getAttribute("src")&&k.push("src="+e.originalNode.getAttribute("src")),!0===i.options.enablePseudoStreaming&&(k.push("pseudostreamstart="+i.options.pseudoStreamingStartQueryParam),k.push("pseudostreamtype="+i.options.pseudoStreamingType)),i.options.streamDelimiter&&k.push("streamdelimiter="+encodeURIComponent(i.options.streamDelimiter)),i.options.proxyType&&k.push("proxytype="+i.options.proxyType),e.appendChild(i.flashWrapper),e.originalNode.style.display="none";var _=[];if(c.IS_IE||c.IS_EDGE){var L=s.default.createElement("div");i.flashWrapper.appendChild(L),_=c.IS_EDGE?['type="application/x-shockwave-flash"','data="'+i.options.pluginPath+i.options.filename+'"','id="__'+i.id+'"','width="'+A+'"','height="'+$+"'\""]:['classid="clsid:D27CDB6E-AE6D-11cf-96B8-444553540000"','codebase="//download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab"','id="__'+i.id+'"','width="'+A+'"','height="'+$+'"'],P||_.push('style="clip: rect(0 0 0 0); position: absolute;"'),L.outerHTML="<object "+_.join(" ")+'><param name="movie" value="'+i.options.pluginPath+i.options.filename+"?x="+new Date+'" /><param name="flashvars" value="'+k.join("&amp;")+'" /><param name="quality" value="high" /><param name="bgcolor" value="#000000" /><param name="wmode" value="transparent" /><param name="allowScriptAccess" value="'+i.options.shimScriptAccess+'" /><param name="allowFullScreen" value="true" /><div>'+a.default.t("mejs.install-flash")+"</div></object>"}else _=['id="__'+i.id+'"','name="__'+i.id+'"','play="true"','loop="false"','quality="high"','bgcolor="#000000"','wmode="transparent"','allowScriptAccess="'+i.options.shimScriptAccess+'"','allowFullScreen="true"','type="application/x-shockwave-flash"','pluginspage="//www.macromedia.com/go/getflashplayer"','src="'+i.options.pluginPath+i.options.filename+'"','flashvars="'+k.join("&")+'"'],P?(_.push('width="'+A+'"'),_.push('height="'+$+'"')):_.push('style="position: fixed; left: -9999em; top: -9999em;"'),i.flashWrapper.innerHTML="<embed "+_.join(" ")+">";if(i.flashNode=i.flashWrapper.lastChild,i.hide=function(){p=!1,P&&(i.flashNode.style.display="none")},i.show=function(){p=!0,P&&(i.flashNode.style.display="")},i.setSize=function(e,t){i.flashNode.style.width=e+"px",i.flashNode.style.height=t+"px",null!==i.flashApi&&"function"==typeof i.flashApi.fire_setSize&&i.flashApi.fire_setSize(e,t)},i.destroy=function(){i.flashNode.remove()},n&&n.length>0)for(var M=0,N=n.length;M<N;M++)if(l.renderer.renderers[t.prefix].canPlayType(n[M].type)){i.setSrc(n[M].src);break}return i}};if(h.hasPluginVersion("flash",[10,0,0])){u.typeChecks.push(function(e){return(e=e.toLowerCase()).startsWith("rtmp")?~e.indexOf(".mp3")?"audio/rtmp":"video/rtmp":/\.og(a|g)/i.test(e)?"audio/ogg":~e.indexOf(".m3u8")?"application/x-mpegURL":~e.indexOf(".mpd")?"application/dash+xml":~e.indexOf(".flv")?"video/flv":null});var m={name:"flash_video",options:{prefix:"flash_video",filename:"mediaelement-flash-video.swf",enablePseudoStreaming:!1,pseudoStreamingStartQueryParam:"start",pseudoStreamingType:"byte",proxyType:"",streamDelimiter:""},canPlayType:function(e){return~["video/mp4","video/rtmp","audio/rtmp","rtmp/mp4","audio/mp4","video/flv","video/x-flv"].indexOf(e.toLowerCase())},create:f.create};l.renderer.add(m);var g={name:"flash_hls",options:{prefix:"flash_hls",filename:"mediaelement-flash-video-hls.swf"},canPlayType:function(e){return~["application/x-mpegurl","application/vnd.apple.mpegurl","audio/mpegurl","audio/hls","video/hls"].indexOf(e.toLowerCase())},create:f.create};l.renderer.add(g);var v={name:"flash_dash",options:{prefix:"flash_dash",filename:"mediaelement-flash-video-mdash.swf"},canPlayType:function(e){return~["application/dash+xml"].indexOf(e.toLowerCase())},create:f.create};l.renderer.add(v);var y={name:"flash_audio",options:{prefix:"flash_audio",filename:"mediaelement-flash-audio.swf"},canPlayType:function(e){return~["audio/mp3"].indexOf(e.toLowerCase())},create:f.create};l.renderer.add(y);var b={name:"flash_audio_ogg",options:{prefix:"flash_audio_ogg",filename:"mediaelement-flash-audio-ogg.swf"},canPlayType:function(e){return~["audio/ogg","audio/oga","audio/ogv"].indexOf(e.toLowerCase())},create:f.create};l.renderer.add(b)}},{2:2,25:25,27:27,28:28,3:3,5:5,7:7,8:8}],21:[function(e,t,n){"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=u(e(3)),s=u(e(7)),o=e(8),a=e(27),l=e(25),d=e(28),c=e(26);function u(e){return e&&e.__esModule?e:{default:e}}var p={promise:null,load:function(e){return"undefined"!=typeof flvjs?p.promise=new Promise(function(e){e()}).then(function(){p._createPlayer(e)}):(e.options.path="string"==typeof e.options.path?e.options.path:"https://cdn.jsdelivr.net/npm/flv.js@latest",p.promise=p.promise||(0,c.loadScript)(e.options.path),p.promise.then(function(){p._createPlayer(e)})),p.promise},_createPlayer:function(e){flvjs.LoggingControl.enableDebug=e.options.debug,flvjs.LoggingControl.enableVerbose=e.options.debug;var t=flvjs.createPlayer(e.options,e.configs);return r.default["__ready__"+e.id](t),t}},h={name:"native_flv",options:{prefix:"native_flv",flv:{path:"https://cdn.jsdelivr.net/npm/flv.js@latest",cors:!0,debug:!1}},canPlayType:function(e){return l.HAS_MSE&&["video/x-flv","video/flv"].indexOf(e.toLowerCase())>-1},create:function(e,t,n){var l=e.originalNode,d=e.id+"_"+t.prefix,c=null,u=null;c=l.cloneNode(!0),t=Object.assign(t,e.options);for(var h=s.default.html5media.properties,f=s.default.html5media.events.concat(["click","mouseover","mouseout"]).filter(function(e){return"error"!==e}),m=function(t){var n=(0,a.createEvent)(t.type,e);e.dispatchEvent(n)},g=function(e){var n=""+e.substring(0,1).toUpperCase()+e.substring(1);c["get"+n]=function(){return null!==u?c[e]:null},c["set"+n]=function(n){if(-1===s.default.html5media.readOnlyProperties.indexOf(e))if("src"===e){if(c[e]="object"===(void 0===n?"undefined":i(n))&&n.src?n.src:n,null!==u){var r={type:"flv"};r.url=n,r.cors=t.flv.cors,r.debug=t.flv.debug,r.path=t.flv.path;var o=t.flv.configs;u.destroy();for(var a=0,l=f.length;a<l;a++)c.removeEventListener(f[a],m);(u=p._createPlayer({options:r,configs:o,id:d})).attachMediaElement(c),u.load()}}else c[e]=n}},v=0,y=h.length;v<y;v++)g(h[v]);if(r.default["__ready__"+d]=function(t){e.flvPlayer=u=t;for(var n=flvjs.Events,i=function(e){"loadedmetadata"===e&&(u.unload(),u.detachMediaElement(),u.attachMediaElement(c),u.load()),c.addEventListener(e,m)},r=0,s=f.length;r<s;r++)i(f[r]);var o=function(t){n.hasOwnProperty(t)&&u.on(n[t],function(){for(var i=arguments.length,r=Array(i),s=0;s<i;s++)r[s]=arguments[s];return function(t,n){if("error"===t){var i=n[0]+": "+n[1]+" "+n[2].msg;e.generateError(i,c.src)}else{var r=(0,a.createEvent)(t,e);r.data=n,e.dispatchEvent(r)}}(n[t],r)})};for(var l in n)o(l)},n&&n.length>0)for(var b=0,w=n.length;b<w;b++)if(o.renderer.renderers[t.prefix].canPlayType(n[b].type)){c.setAttribute("src",n[b].src);break}c.setAttribute("id",d),l.parentNode.insertBefore(c,l),l.autoplay=!1,l.style.display="none";var E={type:"flv"};E.url=c.src,E.cors=t.flv.cors,E.debug=t.flv.debug,E.path=t.flv.path;var x=t.flv.configs;c.setSize=function(e,t){return c.style.width=e+"px",c.style.height=t+"px",c},c.hide=function(){return null!==u&&u.pause(),c.style.display="none",c},c.show=function(){return c.style.display="",c},c.destroy=function(){null!==u&&u.destroy()};var T=(0,a.createEvent)("rendererready",c);return e.dispatchEvent(T),e.promises.push(p.load({options:E,configs:x,id:d})),c}};d.typeChecks.push(function(e){return~e.toLowerCase().indexOf(".flv")?"video/flv":null}),o.renderer.add(h)},{25:25,26:26,27:27,28:28,3:3,7:7,8:8}],22:[function(e,t,n){"use strict";var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r=u(e(3)),s=u(e(7)),o=e(8),a=e(27),l=e(25),d=e(28),c=e(26);function u(e){return e&&e.__esModule?e:{default:e}}var p={promise:null,load:function(e){return"undefined"!=typeof Hls?p.promise=new Promise(function(e){e()}).then(function(){p._createPlayer(e)}):(e.options.path="string"==typeof e.options.path?e.options.path:"https://cdn.jsdelivr.net/npm/hls.js@latest",p.promise=p.promise||(0,c.loadScript)(e.options.path),p.promise.then(function(){p._createPlayer(e)})),p.promise},_createPlayer:function(e){var t=new Hls(e.options);return r.default["__ready__"+e.id](t),t}},h={name:"native_hls",options:{prefix:"native_hls",hls:{path:"https://cdn.jsdelivr.net/npm/hls.js@latest",autoStartLoad:!1,debug:!1}},canPlayType:function(e){return l.HAS_MSE&&["application/x-mpegurl","application/vnd.apple.mpegurl","audio/mpegurl","audio/hls","video/hls"].indexOf(e.toLowerCase())>-1},create:function(e,t,n){var l=e.originalNode,d=e.id+"_"+t.prefix,c=l.getAttribute("preload"),u=l.autoplay,h=null,f=null,m=0,g=n.length;f=l.cloneNode(!0),(t=Object.assign(t,e.options)).hls.autoStartLoad=c&&"none"!==c||u;for(var v=s.default.html5media.properties,y=s.default.html5media.events.concat(["click","mouseover","mouseout"]).filter(function(e){return"error"!==e}),b=function(t){var n=(0,a.createEvent)(t.type,e);e.dispatchEvent(n)},w=function(e){var n=""+e.substring(0,1).toUpperCase()+e.substring(1);f["get"+n]=function(){return null!==h?f[e]:null},f["set"+n]=function(n){if(-1===s.default.html5media.readOnlyProperties.indexOf(e))if("src"===e){if(f[e]="object"===(void 0===n?"undefined":i(n))&&n.src?n.src:n,null!==h){h.destroy();for(var r=0,o=y.length;r<o;r++)f.removeEventListener(y[r],b);(h=p._createPlayer({options:t.hls,id:d})).loadSource(n),h.attachMedia(f)}}else f[e]=n}},E=0,x=v.length;E<x;E++)w(v[E]);if(r.default["__ready__"+d]=function(t){e.hlsPlayer=h=t;for(var i=Hls.Events,r=function(t){if("loadedmetadata"===t){var n=e.originalNode.src;h.detachMedia(),h.loadSource(n),h.attachMedia(f)}f.addEventListener(t,b)},s=0,o=y.length;s<o;s++)r(y[s]);var l=void 0,d=void 0,c=function(t){i.hasOwnProperty(t)&&h.on(i[t],function(){for(var r=arguments.length,s=Array(r),o=0;o<r;o++)s[o]=arguments[o];return function(t,i){if("hlsError"===t){if(console.warn(i),(i=i[1]).fatal)switch(i.type){case"mediaError":var r=(new Date).getTime();if(!l||r-l>3e3)l=(new Date).getTime(),h.recoverMediaError();else if(!d||r-d>3e3)d=(new Date).getTime(),console.warn("Attempting to swap Audio Codec and recover from media error"),h.swapAudioCodec(),h.recoverMediaError();else{var s="Cannot recover, last media error recovery failed";e.generateError(s,f.src),console.error(s)}break;case"networkError":"manifestLoadError"===i.details&&m<g&&void 0!==n[m+1]?(f.setSrc(n[m++].src),f.load(),f.play()):(e.generateError("Network error",n),console.error("Network error"));break;default:h.destroy()}}else{var o=(0,a.createEvent)(t,e);o.data=i,e.dispatchEvent(o)}}(i[t],s)})};for(var u in i)c(u)},g>0)for(;m<g;m++)if(o.renderer.renderers[t.prefix].canPlayType(n[m].type)){f.setAttribute("src",n[m].src);break}"auto"===c||u||(f.addEventListener("play",function(){null!==h&&h.startLoad()}),f.addEventListener("pause",function(){null!==h&&h.stopLoad()})),f.setAttribute("id",d),l.parentNode.insertBefore(f,l),l.autoplay=!1,l.style.display="none",f.setSize=function(e,t){return f.style.width=e+"px",f.style.height=t+"px",f},f.hide=function(){return f.pause(),f.style.display="none",f},f.show=function(){return f.style.display="",f},f.destroy=function(){null!==h&&(h.stopLoad(),h.destroy())};var T=(0,a.createEvent)("rendererready",f);return e.dispatchEvent(T),e.promises.push(p.load({options:t.hls,id:d})),f}};d.typeChecks.push(function(e){return~e.toLowerCase().indexOf(".m3u8")?"application/x-mpegURL":null}),o.renderer.add(h)},{25:25,26:26,27:27,28:28,3:3,7:7,8:8}],23:[function(e,t,n){"use strict";var i=d(e(3)),r=d(e(2)),s=d(e(7)),o=e(8),a=e(27),l=e(25);function d(e){return e&&e.__esModule?e:{default:e}}var c={name:"html5",options:{prefix:"html5"},canPlayType:function(e){var t=r.default.createElement("video");return l.IS_ANDROID&&/\/mp(3|4)$/i.test(e)||~["application/x-mpegurl","vnd.apple.mpegurl","audio/mpegurl","audio/hls","video/hls"].indexOf(e.toLowerCase())&&l.SUPPORTS_NATIVE_HLS?"yes":t.canPlayType?t.canPlayType(e.toLowerCase()).replace(/no/,""):""},create:function(e,t,n){var i=e.id+"_"+t.prefix,l=!1,d=null;void 0===e.originalNode||null===e.originalNode?(d=r.default.createElement("audio"),e.appendChild(d)):d=e.originalNode,d.setAttribute("id",i);for(var c=s.default.html5media.properties,u=function(e){var t=""+e.substring(0,1).toUpperCase()+e.substring(1);d["get"+t]=function(){return d[e]},d["set"+t]=function(t){-1===s.default.html5media.readOnlyProperties.indexOf(e)&&(d[e]=t)}},p=0,h=c.length;p<h;p++)u(c[p]);for(var f=s.default.html5media.events.concat(["click","mouseover","mouseout"]).filter(function(e){return"error"!==e}),m=function(t){d.addEventListener(t,function(t){if(l){var n=(0,a.createEvent)(t.type,t.target);e.dispatchEvent(n)}})},g=0,v=f.length;g<v;g++)m(f[g]);d.setSize=function(e,t){return d.style.width=e+"px",d.style.height=t+"px",d},d.hide=function(){return l=!1,d.style.display="none",d},d.show=function(){return l=!0,d.style.display="",d};var y=0,b=n.length;if(b>0)for(;y<b;y++)if(o.renderer.renderers[t.prefix].canPlayType(n[y].type)){d.setAttribute("src",n[y].src);break}d.addEventListener("error",function(t){4===t.target.error.code&&l&&(y<b&&void 0!==n[y+1]?(d.src=n[y++].src,d.load(),d.play()):e.generateError("Media error: Format(s) not supported or source(s) not found",n))});var w=(0,a.createEvent)("rendererready",d);return e.dispatchEvent(w),d}};i.default.HtmlMediaElement=s.default.HtmlMediaElement=c,o.renderer.add(c)},{2:2,25:25,27:27,3:3,7:7,8:8}],24:[function(e,t,n){"use strict";var i=c(e(3)),r=c(e(2)),s=c(e(7)),o=e(8),a=e(27),l=e(28),d=e(26);function c(e){return e&&e.__esModule?e:{default:e}}var u={isIframeStarted:!1,isIframeLoaded:!1,iframeQueue:[],enqueueIframe:function(e){u.isLoaded="undefined"!=typeof YT&&YT.loaded,u.isLoaded?u.createIframe(e):(u.loadIframeApi(),u.iframeQueue.push(e))},loadIframeApi:function(){u.isIframeStarted||((0,d.loadScript)("https://www.youtube.com/player_api"),u.isIframeStarted=!0)},iFrameReady:function(){for(u.isLoaded=!0,u.isIframeLoaded=!0;u.iframeQueue.length>0;){var e=u.iframeQueue.pop();u.createIframe(e)}},createIframe:function(e){return new YT.Player(e.containerId,e)},getYouTubeId:function(e){var t="";return e.indexOf("?")>0?""===(t=u.getYouTubeIdFromParam(e))&&(t=u.getYouTubeIdFromUrl(e)):t=u.getYouTubeIdFromUrl(e),(t=t.substring(t.lastIndexOf("/")+1).split("?"))[0]},getYouTubeIdFromParam:function(e){if(void 0===e||null===e||!e.trim().length)return null;for(var t=e.split("?")[1].split("&"),n="",i=0,r=t.length;i<r;i++){var s=t[i].split("=");if("v"===s[0]){n=s[1];break}}return n},getYouTubeIdFromUrl:function(e){return void 0!==e&&null!==e&&e.trim().length?(e=e.split("?")[0]).substring(e.lastIndexOf("/")+1):null},getYouTubeNoCookieUrl:function(e){if(void 0===e||null===e||!e.trim().length||-1===e.indexOf("//www.youtube"))return e;var t=e.split("/");return t[2]=t[2].replace(".com","-nocookie.com"),t.join("/")}},p={name:"youtube_iframe",options:{prefix:"youtube_iframe",youtube:{autoplay:0,controls:0,disablekb:1,end:0,loop:0,modestbranding:0,playsinline:0,rel:0,showinfo:0,start:0,iv_load_policy:3,nocookie:!1,imageQuality:null}},canPlayType:function(e){return~["video/youtube","video/x-youtube"].indexOf(e.toLowerCase())},create:function(e,t,n){var o={},l=[],d=null,c=!0,p=!1,h=null;o.options=t,o.id=e.id+"_"+t.prefix,o.mediaElement=e;for(var f=s.default.html5media.properties,m=function(t){var n=""+t.substring(0,1).toUpperCase()+t.substring(1);o["get"+n]=function(){if(null!==d){switch(t){case"currentTime":return d.getCurrentTime();case"duration":return d.getDuration();case"volume":return d.getVolume()/100;case"paused":return c;case"ended":return p;case"muted":return d.isMuted();case"buffered":var e=d.getVideoLoadedFraction(),n=d.getDuration();return{start:function(){return 0},end:function(){return e*n},length:1};case"src":return d.getVideoUrl();case"readyState":return 4}return null}return null},o["set"+n]=function(n){if(null!==d)switch(t){case"src":var i="string"==typeof n?n:n[0].src,r=u.getYouTubeId(i);e.originalNode.autoplay?d.loadVideoById(r):d.cueVideoById(r);break;case"currentTime":d.seekTo(n);break;case"muted":n?d.mute():d.unMute(),setTimeout(function(){var t=(0,a.createEvent)("volumechange",o);e.dispatchEvent(t)},50);break;case"volume":n,d.setVolume(100*n),setTimeout(function(){var t=(0,a.createEvent)("volumechange",o);e.dispatchEvent(t)},50);break;case"readyState":var s=(0,a.createEvent)("canplay",o);e.dispatchEvent(s)}else l.push({type:"set",propName:t,value:n})}},g=0,v=f.length;g<v;g++)m(f[g]);for(var y=s.default.html5media.methods,b=function(e){o[e]=function(){if(null!==d)switch(e){case"play":return c=!1,d.playVideo();case"pause":return c=!0,d.pauseVideo();case"load":return null}else l.push({type:"call",methodName:e})}},w=0,E=y.length;w<E;w++)b(y[w]);var x=r.default.createElement("div");x.id=o.id,o.options.youtube.nocookie&&(e.originalNode.src=u.getYouTubeNoCookieUrl(n[0].src)),e.originalNode.parentNode.insertBefore(x,e.originalNode),e.originalNode.style.display="none";var T="audio"===e.originalNode.tagName.toLowerCase(),S=T?"1":e.originalNode.height,C=T?"1":e.originalNode.width,k=u.getYouTubeId(n[0].src),P={id:o.id,containerId:x.id,videoId:k,height:S,width:C,playerVars:Object.assign({controls:0,rel:0,disablekb:1,showinfo:0,modestbranding:0,html5:1,iv_load_policy:3},o.options.youtube),origin:i.default.location.host,events:{onReady:function(t){if(e.youTubeApi=d=t.target,e.youTubeState={paused:!0,ended:!1},l.length)for(var n=0,i=l.length;n<i;n++){var r=l[n];if("set"===r.type){var s=r.propName,c=""+s.substring(0,1).toUpperCase()+s.substring(1);o["set"+c](r.value)}else"call"===r.type&&o[r.methodName]()}h=d.getIframe(),e.originalNode.muted&&d.mute();for(var u=["mouseover","mouseout"],p=function(t){var n=(0,a.createEvent)(t.type,o);e.dispatchEvent(n)},f=0,m=u.length;f<m;f++)h.addEventListener(u[f],p,!1);for(var g=["rendererready","loadedmetadata","loadeddata","canplay"],v=0,y=g.length;v<y;v++){var b=(0,a.createEvent)(g[v],o);e.dispatchEvent(b)}},onStateChange:function(t){var n=[];switch(t.data){case-1:n=["loadedmetadata"],c=!0,p=!1;break;case 0:n=["ended"],c=!1,p=!o.options.youtube.loop,o.options.youtube.loop||o.stopInterval();break;case 1:n=["play","playing"],c=!1,p=!1,o.startInterval();break;case 2:n=["pause"],c=!0,p=!1,o.stopInterval();break;case 3:n=["progress"],p=!1;break;case 5:n=["loadeddata","loadedmetadata","canplay"],c=!0,p=!1}for(var i=0,r=n.length;i<r;i++){var s=(0,a.createEvent)(n[i],o);e.dispatchEvent(s)}},onError:function(t){return function(t){var i="";switch(t.data){case 2:i="The request contains an invalid parameter value. Verify that video ID has 11 characters and that contains no invalid characters, such as exclamation points or asterisks.";break;case 5:i="The requested content cannot be played in an HTML5 player or another error related to the HTML5 player has occurred.";break;case 100:i="The video requested was not found. Either video has been removed or has been marked as private.";break;case 101:case 105:i="The owner of the requested video does not allow it to be played in embedded players.";break;default:i="Unknown error."}e.generateError("Code "+t.data+": "+i,n)}(t)}}};return(T||e.originalNode.hasAttribute("playsinline"))&&(P.playerVars.playsinline=1),e.originalNode.controls&&(P.playerVars.controls=1),e.originalNode.autoplay&&(P.playerVars.autoplay=1),e.originalNode.loop&&(P.playerVars.loop=1),(P.playerVars.loop&&1===parseInt(P.playerVars.loop,10)||e.originalNode.src.indexOf("loop=")>-1)&&!P.playerVars.playlist&&-1===e.originalNode.src.indexOf("playlist=")&&(P.playerVars.playlist=u.getYouTubeId(e.originalNode.src)),u.enqueueIframe(P),o.onEvent=function(t,n,i){null!==i&&void 0!==i&&(e.youTubeState=i)},o.setSize=function(e,t){null!==d&&d.setSize(e,t)},o.hide=function(){o.stopInterval(),o.pause(),h&&(h.style.display="none")},o.show=function(){h&&(h.style.display="")},o.destroy=function(){d.destroy()},o.interval=null,o.startInterval=function(){o.interval=setInterval(function(){var t=(0,a.createEvent)("timeupdate",o);e.dispatchEvent(t)},250)},o.stopInterval=function(){o.interval&&clearInterval(o.interval)},o.getPosterUrl=function(){var n=t.youtube.imageQuality,i=u.getYouTubeId(e.originalNode.src);return n&&["default","hqdefault","mqdefault","sddefault","maxresdefault"].indexOf(n)>-1&&i?"https://img.youtube.com/vi/"+i+"/"+n+".jpg":""},o}};i.default.onYouTubePlayerAPIReady=function(){u.iFrameReady()},l.typeChecks.push(function(e){return/\/\/(www\.youtube|youtu\.?be)/i.test(e)?"video/x-youtube":null}),o.renderer.add(p)},{2:2,26:26,27:27,28:28,3:3,7:7,8:8}],25:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.cancelFullScreen=n.requestFullScreen=n.isFullScreen=n.FULLSCREEN_EVENT_NAME=n.HAS_NATIVE_FULLSCREEN_ENABLED=n.HAS_TRUE_NATIVE_FULLSCREEN=n.HAS_IOS_FULLSCREEN=n.HAS_MS_NATIVE_FULLSCREEN=n.HAS_MOZ_NATIVE_FULLSCREEN=n.HAS_WEBKIT_NATIVE_FULLSCREEN=n.HAS_NATIVE_FULLSCREEN=n.SUPPORTS_NATIVE_HLS=n.SUPPORT_PASSIVE_EVENT=n.SUPPORT_POINTER_EVENTS=n.HAS_MSE=n.IS_STOCK_ANDROID=n.IS_SAFARI=n.IS_FIREFOX=n.IS_CHROME=n.IS_EDGE=n.IS_IE=n.IS_ANDROID=n.IS_IOS=n.IS_IPOD=n.IS_IPHONE=n.IS_IPAD=n.UA=n.NAV=void 0;var i=o(e(3)),r=o(e(2)),s=o(e(7));function o(e){return e&&e.__esModule?e:{default:e}}for(var a=n.NAV=i.default.navigator,l=n.UA=a.userAgent.toLowerCase(),d=n.IS_IPAD=/ipad/i.test(l)&&!i.default.MSStream,c=n.IS_IPHONE=/iphone/i.test(l)&&!i.default.MSStream,u=n.IS_IPOD=/ipod/i.test(l)&&!i.default.MSStream,p=(n.IS_IOS=/ipad|iphone|ipod/i.test(l)&&!i.default.MSStream,n.IS_ANDROID=/android/i.test(l)),h=n.IS_IE=/(trident|microsoft)/i.test(a.appName),f=(n.IS_EDGE="msLaunchUri"in a&&!("documentMode"in r.default)),m=n.IS_CHROME=/chrome/i.test(l),g=n.IS_FIREFOX=/firefox/i.test(l),v=n.IS_SAFARI=/safari/i.test(l)&&!m,y=n.IS_STOCK_ANDROID=/^mozilla\/\d+\.\d+\s\(linux;\su;/i.test(l),b=(n.HAS_MSE="MediaSource"in i.default),w=n.SUPPORT_POINTER_EVENTS=function(){var e=r.default.createElement("x"),t=r.default.documentElement,n=i.default.getComputedStyle;if(!("pointerEvents"in e.style))return!1;e.style.pointerEvents="auto",e.style.pointerEvents="x",t.appendChild(e);var s=n&&"auto"===(n(e,"")||{}).pointerEvents;return e.remove(),!!s}(),E=n.SUPPORT_PASSIVE_EVENT=function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});i.default.addEventListener("test",null,t)}catch(e){}return e}(),x=["source","track","audio","video"],T=void 0,S=0,C=x.length;S<C;S++)T=r.default.createElement(x[S]);var k=n.SUPPORTS_NATIVE_HLS=v||p&&(m||y)||h&&/edge/i.test(l),P=void 0!==T.webkitEnterFullscreen,$=void 0!==T.requestFullscreen;P&&/mac os x 10_5/i.test(l)&&($=!1,P=!1);var A=void 0!==T.webkitRequestFullScreen,_=void 0!==T.mozRequestFullScreen,L=void 0!==T.msRequestFullscreen,M=A||_||L,N=M,D="",I=void 0,O=void 0,j=void 0;_?N=r.default.mozFullScreenEnabled:L&&(N=r.default.msFullscreenEnabled),m&&(P=!1),M&&(A?D="webkitfullscreenchange":_?D="mozfullscreenchange":L&&(D="MSFullscreenChange"),n.isFullScreen=I=function(){return _?r.default.mozFullScreen:A?r.default.webkitIsFullScreen:L?null!==r.default.msFullscreenElement:void 0},n.requestFullScreen=O=function(e){A?e.webkitRequestFullScreen():_?e.mozRequestFullScreen():L&&e.msRequestFullscreen()},n.cancelFullScreen=j=function(){A?r.default.webkitCancelFullScreen():_?r.default.mozCancelFullScreen():L&&r.default.msExitFullscreen()});var F=n.HAS_NATIVE_FULLSCREEN=$,z=n.HAS_WEBKIT_NATIVE_FULLSCREEN=A,H=n.HAS_MOZ_NATIVE_FULLSCREEN=_,R=n.HAS_MS_NATIVE_FULLSCREEN=L,q=n.HAS_IOS_FULLSCREEN=P,B=n.HAS_TRUE_NATIVE_FULLSCREEN=M,V=n.HAS_NATIVE_FULLSCREEN_ENABLED=N,U=n.FULLSCREEN_EVENT_NAME=D;n.isFullScreen=I,n.requestFullScreen=O,n.cancelFullScreen=j,s.default.Features=s.default.Features||{},s.default.Features.isiPad=d,s.default.Features.isiPod=u,s.default.Features.isiPhone=c,s.default.Features.isiOS=s.default.Features.isiPhone||s.default.Features.isiPad,s.default.Features.isAndroid=p,s.default.Features.isIE=h,s.default.Features.isEdge=f,s.default.Features.isChrome=m,s.default.Features.isFirefox=g,s.default.Features.isSafari=v,s.default.Features.isStockAndroid=y,s.default.Features.hasMSE=b,s.default.Features.supportsNativeHLS=k,s.default.Features.supportsPointerEvents=w,s.default.Features.supportsPassiveEvent=E,s.default.Features.hasiOSFullScreen=q,s.default.Features.hasNativeFullscreen=F,s.default.Features.hasWebkitNativeFullScreen=z,s.default.Features.hasMozNativeFullScreen=H,s.default.Features.hasMsNativeFullScreen=R,s.default.Features.hasTrueNativeFullScreen=B,s.default.Features.nativeFullScreenEnabled=V,s.default.Features.fullScreenEventName=U,s.default.Features.isFullScreen=I,s.default.Features.requestFullScreen=O,s.default.Features.cancelFullScreen=j},{2:2,3:3,7:7}],26:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.removeClass=n.addClass=n.hasClass=void 0,n.loadScript=a,n.offset=l,n.toggleClass=m,n.fadeOut=g,n.fadeIn=v,n.siblings=y,n.visible=b,n.ajax=w;var i=o(e(3)),r=o(e(2)),s=o(e(7));function o(e){return e&&e.__esModule?e:{default:e}}function a(e){return new Promise(function(t,n){var i=r.default.createElement("script");i.src=e,i.async=!0,i.onload=function(){i.remove(),t()},i.onerror=function(){i.remove(),n()},r.default.head.appendChild(i)})}function l(e){var t=e.getBoundingClientRect(),n=i.default.pageXOffset||r.default.documentElement.scrollLeft,s=i.default.pageYOffset||r.default.documentElement.scrollTop;return{top:t.top+s,left:t.left+n}}var d=void 0,c=void 0,u=void 0;"classList"in r.default.documentElement?(d=function(e,t){return void 0!==e.classList&&e.classList.contains(t)},c=function(e,t){return e.classList.add(t)},u=function(e,t){return e.classList.remove(t)}):(d=function(e,t){return new RegExp("\\b"+t+"\\b").test(e.className)},c=function(e,t){p(e,t)||(e.className+=" "+t)},u=function(e,t){e.className=e.className.replace(new RegExp("\\b"+t+"\\b","g"),"")});var p=n.hasClass=d,h=n.addClass=c,f=n.removeClass=u;function m(e,t){p(e,t)?f(e,t):h(e,t)}function g(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:400,n=arguments[2];e.style.opacity||(e.style.opacity=1);var r=null;i.default.requestAnimationFrame(function s(o){var a=o-(r=r||o),l=parseFloat(1-a/t,2);e.style.opacity=l<0?0:l,a>t?n&&"function"==typeof n&&n():i.default.requestAnimationFrame(s)})}function v(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:400,n=arguments[2];e.style.opacity||(e.style.opacity=0);var r=null;i.default.requestAnimationFrame(function s(o){var a=o-(r=r||o),l=parseFloat(a/t,2);e.style.opacity=l>1?1:l,a>t?n&&"function"==typeof n&&n():i.default.requestAnimationFrame(s)})}function y(e,t){var n=[];e=e.parentNode.firstChild;do{t&&!t(e)||n.push(e)}while(e=e.nextSibling);return n}function b(e){return void 0!==e.getClientRects&&"function"===e.getClientRects?!!(e.offsetWidth||e.offsetHeight||e.getClientRects().length):!(!e.offsetWidth&&!e.offsetHeight)}function w(e,t,n,r){var s=i.default.XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP"),o="application/x-www-form-urlencoded; charset=UTF-8",a=!1,l="*/".concat("*");switch(t){case"text":o="text/plain";break;case"json":o="application/json, text/javascript";break;case"html":o="text/html";break;case"xml":o="application/xml, text/xml"}"application/x-www-form-urlencoded"!==o&&(l=o+", */*; q=0.01"),s&&(s.open("GET",e,!0),s.setRequestHeader("Accept",l),s.onreadystatechange=function(){if(!a&&4===s.readyState)if(200===s.status){a=!0;var e=void 0;switch(t){case"json":e=JSON.parse(s.responseText);break;case"xml":e=s.responseXML;break;default:e=s.responseText}n(e)}else"function"==typeof r&&r(s.status)},s.send())}s.default.Utils=s.default.Utils||{},s.default.Utils.offset=l,s.default.Utils.hasClass=p,s.default.Utils.addClass=h,s.default.Utils.removeClass=f,s.default.Utils.toggleClass=m,s.default.Utils.fadeIn=v,s.default.Utils.fadeOut=g,s.default.Utils.siblings=y,s.default.Utils.visible=b,s.default.Utils.ajax=w,s.default.Utils.loadScript=a},{2:2,3:3,7:7}],27:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.escapeHTML=r,n.debounce=s,n.isObjectEmpty=o,n.splitEvents=a,n.createEvent=l,n.isNodeAfter=d,n.isString=c;var i=function(e){return e&&e.__esModule?e:{default:e}}(e(7));function r(e){if("string"!=typeof e)throw new Error("Argument passed must be a string");var t={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;"};return e.replace(/[&<>"]/g,function(e){return t[e]})}function s(e,t){var n=this,i=arguments,r=arguments.length>2&&void 0!==arguments[2]&&arguments[2];if("function"!=typeof e)throw new Error("First argument must be a function");if("number"!=typeof t)throw new Error("Second argument must be a numeric value");var s=void 0;return function(){var o=n,a=i,l=r&&!s;clearTimeout(s),s=setTimeout(function(){s=null,r||e.apply(o,a)},t),l&&e.apply(o,a)}}function o(e){return Object.getOwnPropertyNames(e).length<=0}function a(e,t){var n=/^((after|before)print|(before)?unload|hashchange|message|o(ff|n)line|page(hide|show)|popstate|resize|storage)\b/,i={d:[],w:[]};return(e||"").split(" ").forEach(function(e){var r=e+(t?"."+t:"");r.startsWith(".")?(i.d.push(r),i.w.push(r)):i[n.test(e)?"w":"d"].push(r)}),i.d=i.d.join(" "),i.w=i.w.join(" "),i}function l(e,t){if("string"!=typeof e)throw new Error("Event name must be a string");var n=e.match(/([a-z]+\.([a-z]+))/i),i={target:t};return null!==n&&(e=n[1],i.namespace=n[2]),new window.CustomEvent(e,{detail:i})}function d(e,t){return!!(e&&t&&2&e.compareDocumentPosition(t))}function c(e){return"string"==typeof e}i.default.Utils=i.default.Utils||{},i.default.Utils.escapeHTML=r,i.default.Utils.debounce=s,i.default.Utils.isObjectEmpty=o,i.default.Utils.splitEvents=a,i.default.Utils.createEvent=l,i.default.Utils.isNodeAfter=d,i.default.Utils.isString=c},{7:7}],28:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.typeChecks=void 0,n.absolutizeUrl=o,n.formatType=a,n.getMimeFromType=l,n.getTypeFromFile=d,n.getExtension=c,n.normalizeExtension=u;var i=function(e){return e&&e.__esModule?e:{default:e}}(e(7)),r=e(27);var s=n.typeChecks=[];function o(e){if("string"!=typeof e)throw new Error("`url` argument must be a string");var t=document.createElement("div");return t.innerHTML='<a href="'+(0,r.escapeHTML)(e)+'">x</a>',t.firstChild.href}function a(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return e&&!t?d(e):t}function l(e){if("string"!=typeof e)throw new Error("`type` argument must be a string");return e&&e.indexOf(";")>-1?e.substr(0,e.indexOf(";")):e}function d(e){if("string"!=typeof e)throw new Error("`url` argument must be a string");for(var t=0,n=s.length;t<n;t++){var i=s[t](e);if(i)return i}var r=u(c(e)),o="video/mp4";return r&&(~["mp4","m4v","ogg","ogv","webm","flv","mpeg","mov"].indexOf(r)?o="video/"+r:~["mp3","oga","wav","mid","midi"].indexOf(r)&&(o="audio/"+r)),o}function c(e){if("string"!=typeof e)throw new Error("`url` argument must be a string");var t=e.split("?")[0].split("\\").pop().split("/").pop();return~t.indexOf(".")?t.substring(t.lastIndexOf(".")+1):""}function u(e){if("string"!=typeof e)throw new Error("`extension` argument must be a string");switch(e){case"mp4":case"m4v":return"mp4";case"webm":case"webma":case"webmv":return"webm";case"ogg":case"oga":case"ogv":return"ogg";default:return e}}i.default.Utils=i.default.Utils||{},i.default.Utils.typeChecks=s,i.default.Utils.absolutizeUrl=o,i.default.Utils.formatType=a,i.default.Utils.getMimeFromType=l,i.default.Utils.getTypeFromFile=d,i.default.Utils.getExtension=c,i.default.Utils.normalizeExtension=u},{27:27,7:7}],29:[function(e,t,n){"use strict";var i=s(e(2)),r=s(e(4));function s(e){return e&&e.__esModule?e:{default:e}}if([Element.prototype,CharacterData.prototype,DocumentType.prototype].forEach(function(e){e.hasOwnProperty("remove")||Object.defineProperty(e,"remove",{configurable:!0,enumerable:!0,writable:!0,value:function(){this.parentNode.removeChild(this)}})}),function(){if("function"==typeof window.CustomEvent)return!1;function e(e,t){t=t||{bubbles:!1,cancelable:!1,detail:void 0};var n=i.default.createEvent("CustomEvent");return n.initCustomEvent(e,t.bubbles,t.cancelable,t.detail),n}e.prototype=window.Event.prototype,window.CustomEvent=e}(),"function"!=typeof Object.assign&&(Object.assign=function(e){if(null===e||void 0===e)throw new TypeError("Cannot convert undefined or null to object");for(var t=Object(e),n=1,i=arguments.length;n<i;n++){var r=arguments[n];if(null!==r)for(var s in r)Object.prototype.hasOwnProperty.call(r,s)&&(t[s]=r[s])}return t}),String.prototype.startsWith||(String.prototype.startsWith=function(e,t){return t=t||0,this.substr(t,e.length)===e}),Element.prototype.matches||(Element.prototype.matches=Element.prototype.matchesSelector||Element.prototype.mozMatchesSelector||Element.prototype.msMatchesSelector||Element.prototype.oMatchesSelector||Element.prototype.webkitMatchesSelector||function(e){for(var t=(this.document||this.ownerDocument).querySelectorAll(e),n=t.length-1;--n>=0&&t.item(n)!==this;);return n>-1}),window.Element&&!Element.prototype.closest&&(Element.prototype.closest=function(e){var t=(this.document||this.ownerDocument).querySelectorAll(e),n=void 0,i=this;do{for(n=t.length;--n>=0&&t.item(n)!==i;);}while(n<0&&(i=i.parentElement));return i}),function(){for(var e=0,t=["ms","moz","webkit","o"],n=0;n<t.length&&!window.requestAnimationFrame;++n)window.requestAnimationFrame=window[t[n]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[t[n]+"CancelAnimationFrame"]||window[t[n]+"CancelRequestAnimationFrame"];window.requestAnimationFrame||(window.requestAnimationFrame=function(t){var n=(new Date).getTime(),i=Math.max(0,16-(n-e)),r=window.setTimeout(function(){t(n+i)},i);return e=n+i,r}),window.cancelAnimationFrame||(window.cancelAnimationFrame=function(e){clearTimeout(e)})}(),/firefox/i.test(navigator.userAgent)){var o=window.getComputedStyle;window.getComputedStyle=function(e,t){var n=o(e,t);return null===n?{getPropertyValue:function(){}}:n}}window.Promise||(window.Promise=r.default),function(e){e&&e.prototype&&null===e.prototype.children&&Object.defineProperty(e.prototype,"children",{get:function(){for(var e=0,t=void 0,n=this.childNodes,i=[];t=n[e++];)1===t.nodeType&&i.push(t);return i}})}(window.Node||window.Element)},{2:2,4:4}],30:[function(e,t,n){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.isDropFrame=r,n.secondsToTimeCode=s,n.timeCodeToSeconds=o,n.calculateTimeFormat=a,n.convertSMPTEtoSeconds=l;var i=function(e){return e&&e.__esModule?e:{default:e}}(e(7));function r(){return!((arguments.length>0&&void 0!==arguments[0]?arguments[0]:25)%1==0)}function s(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:25,s=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"hh:mm:ss";e=!e||"number"!=typeof e||e<0?0:e;var a=Math.round(.066666*i),l=Math.round(i),d=24*Math.round(3600*i),c=Math.round(600*i),u=r(i)?";":":",p=void 0,h=void 0,f=void 0,m=void 0,g=Math.round(e*i);if(r(i)){g<0&&(g=d+g);var v=(g%=d)%c;g+=9*a*Math.floor(g/c),v>a&&(g+=a*Math.floor((v-a)/Math.round(60*l-a)));var y=Math.floor(g/l);p=Math.floor(Math.floor(y/60)/60),h=Math.floor(y/60)%60,f=n?y%60:Math.floor(g/l%60).toFixed(s)}else p=Math.floor(e/3600)%24,h=Math.floor(e/60)%60,f=n?Math.floor(e%60):Math.floor(e%60).toFixed(s);p=p<=0?0:p,h=h<=0?0:h,f=60===(f=f<=0?0:f)?0:f,h=60===h?0:h;for(var b=o.split(":"),w={},E=0,x=b.length;E<x;++E){for(var T="",S=0,C=b[E].length;S<C;S++)T.indexOf(b[E][S])<0&&(T+=b[E][S]);~["f","s","m","h"].indexOf(T)&&(w[T]=b[E].length)}var k=t||p>0?(p<10&&w.h>1?"0"+p:p)+":":"";return k+=(h<10&&w.m>1?"0"+h:h)+":",k+=""+(f<10&&w.s>1?"0"+f:f),n&&(k+=(m=(m=(g%l).toFixed(0))<=0?0:m)<10&&w.f?u+"0"+m:""+u+m),k}function o(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:25;if("string"!=typeof e)throw new TypeError("Time must be a string");if(e.indexOf(";")>0&&(e=e.replace(";",":")),!/\d{2}(\:\d{2}){0,3}/i.test(e))throw new TypeError("Time code must have the format `00:00:00`");var n=e.split(":"),i=void 0,s=0,o=0,a=0,l=0,d=0,c=Math.round(.066666*t),u=Math.round(t),p=3600*u,h=60*u;switch(n.length){default:case 1:a=parseInt(n[0],10);break;case 2:o=parseInt(n[0],10),a=parseInt(n[1],10);break;case 3:s=parseInt(n[0],10),o=parseInt(n[1],10),a=parseInt(n[2],10);break;case 4:s=parseInt(n[0],10),o=parseInt(n[1],10),a=parseInt(n[2],10),l=parseInt(n[3],10)}return i=r(t)?p*s+h*o+u*a+l-c*((d=60*s+o)-Math.floor(d/10)):(p*s+h*o+t*a+l)/t,parseFloat(i.toFixed(3))}function a(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:25;e=!e||"number"!=typeof e||e<0?0:e;for(var i=Math.floor(e/3600)%24,r=Math.floor(e/60)%60,s=Math.floor(e%60),o=[[Math.floor((e%1*n).toFixed(3)),"f"],[s,"s"],[r,"m"],[i,"h"]],a=t.timeFormat,l=a[1]===a[0],d=l?2:1,c=a.length<d?a[d]:":",u=a[0],p=!1,h=0,f=o.length;h<f;h++)if(~a.indexOf(o[h][1]))p=!0;else if(p){for(var m=!1,g=h;g<f;g++)if(o[g][0]>0){m=!0;break}if(!m)break;l||(a=u+a),a=o[h][1]+c+a,l&&(a=o[h][1]+a),u=o[h][1]}t.timeFormat=a}function l(e){if("string"!=typeof e)throw new TypeError("Argument must be a string value");for(var t=~(e=e.replace(",",".")).indexOf(".")?e.split(".")[1].length:0,n=0,i=1,r=0,s=(e=e.split(":").reverse()).length;r<s;r++)i=1,r>0&&(i=Math.pow(60,r)),n+=Number(e[r])*i;return Number(n.toFixed(t))}i.default.Utils=i.default.Utils||{},i.default.Utils.secondsToTimeCode=s,i.default.Utils.timeCodeToSeconds=o,i.default.Utils.calculateTimeFormat=a,i.default.Utils.convertSMPTEtoSeconds=l},{7:7}]},{},[29,6,5,15,23,20,19,21,22,24,16,18,17,9,10,11,12,13,14])}).call(this,n(0),n(8).setImmediate)},function(e,t,n){(function(e){var i=void 0!==e&&e||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function s(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new s(r.call(setTimeout,i,arguments),clearTimeout)},t.setInterval=function(){return new s(r.call(setInterval,i,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},s.prototype.unref=s.prototype.ref=function(){},s.prototype.close=function(){this._clearFn.call(i,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(9),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(0))},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var i,r=1,s={},o=!1,a=e.document,l=Object.getPrototypeOf&&Object.getPrototypeOf(e);l=l&&l.setTimeout?l:e,"[object process]"==={}.toString.call(e.process)?i=function(e){t.nextTick(function(){c(e)})}:function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?function(){var t="setImmediate$"+Math.random()+"$",n=function(n){n.source===e&&"string"==typeof n.data&&0===n.data.indexOf(t)&&c(+n.data.slice(t.length))};e.addEventListener?e.addEventListener("message",n,!1):e.attachEvent("onmessage",n),i=function(n){e.postMessage(t+n,"*")}}():e.MessageChannel?function(){var e=new MessageChannel;e.port1.onmessage=function(e){c(e.data)},i=function(t){e.port2.postMessage(t)}}():a&&"onreadystatechange"in a.createElement("script")?function(){var e=a.documentElement;i=function(t){var n=a.createElement("script");n.onreadystatechange=function(){c(t),n.onreadystatechange=null,e.removeChild(n),n=null},e.appendChild(n)}}():i=function(e){setTimeout(c,0,e)},l.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var o={callback:e,args:t};return s[r]=o,i(r),r++},l.clearImmediate=d}function d(e){delete s[e]}function c(e){if(o)setTimeout(c,0,e);else{var t=s[e];if(t){o=!0;try{!function(e){var t=e.callback,i=e.args;switch(i.length){case 0:t();break;case 1:t(i[0]);break;case 2:t(i[0],i[1]);break;case 3:t(i[0],i[1],i[2]);break;default:t.apply(n,i)}}(t)}finally{d(e),o=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(0),n(10))},function(e,t){var n,i,r=e.exports={};function s(){throw new Error("setTimeout has not been defined")}function o(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===s||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:s}catch(e){n=s}try{i="function"==typeof clearTimeout?clearTimeout:o}catch(e){i=o}}();var l,d=[],c=!1,u=-1;function p(){c&&l&&(c=!1,l.length?d=l.concat(d):u=-1,d.length&&h())}function h(){if(!c){var e=a(p);c=!0;for(var t=d.length;t;){for(l=d,d=[];++u<t;)l&&l[u].run();u=-1,t=d.length}l=null,c=!1,function(e){if(i===clearTimeout)return clearTimeout(e);if((i===o||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(e);try{i(e)}catch(t){try{return i.call(null,e)}catch(t){return i.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function m(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];d.push(new f(e,t)),1!==d.length||c||a(h)},f.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=m,r.addListener=m,r.once=m,r.off=m,r.removeListener=m,r.removeAllListeners=m,r.emit=m,r.prependListener=m,r.prependOnceListener=m,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){"use strict";var i=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},r=function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(i(this,e),!(t instanceof Node))throw"Can't initialize VanillaTilt because "+t+" is not a Node.";this.width=null,this.height=null,this.left=null,this.top=null,this.transitionTimeout=null,this.updateCall=null,this.updateBind=this.update.bind(this),this.resetBind=this.reset.bind(this),this.element=t,this.settings=this.extendSettings(n),this.reverse=this.settings.reverse?-1:1,this.glare=this.isSettingTrue(this.settings.glare),this.glarePrerender=this.isSettingTrue(this.settings["glare-prerender"]),this.glare&&this.prepareGlare(),this.addEventListeners()}return e.prototype.isSettingTrue=function(e){return""===e||!0===e||1===e},e.prototype.addEventListeners=function(){this.onMouseEnterBind=this.onMouseEnter.bind(this),this.onMouseMoveBind=this.onMouseMove.bind(this),this.onMouseLeaveBind=this.onMouseLeave.bind(this),this.onWindowResizeBind=this.onWindowResizeBind.bind(this),this.element.addEventListener("mouseenter",this.onMouseEnterBind),this.element.addEventListener("mousemove",this.onMouseMoveBind),this.element.addEventListener("mouseleave",this.onMouseLeaveBind),this.glare&&window.addEventListener("resize",this.onWindowResizeBind)},e.prototype.removeEventListeners=function(){this.element.removeEventListener("mouseenter",this.onMouseEnterBind),this.element.removeEventListener("mousemove",this.onMouseMoveBind),this.element.removeEventListener("mouseleave",this.onMouseLeaveBind),this.glare&&window.removeEventListener("resize",this.onWindowResizeBind)},e.prototype.destroy=function(){clearTimeout(this.transitionTimeout),null!==this.updateCall&&cancelAnimationFrame(this.updateCall),this.reset(),this.removeEventListeners(),this.element.vanillaTilt=null,delete this.element.vanillaTilt,this.element=null},e.prototype.onMouseEnter=function(e){this.updateElementPosition(),this.element.style.willChange="transform",this.setTransition()},e.prototype.onMouseMove=function(e){null!==this.updateCall&&cancelAnimationFrame(this.updateCall),this.event=e,this.updateCall=requestAnimationFrame(this.updateBind)},e.prototype.onMouseLeave=function(e){this.setTransition(),this.settings.reset&&requestAnimationFrame(this.resetBind)},e.prototype.reset=function(){this.event={pageX:this.left+this.width/2,pageY:this.top+this.height/2},this.element.style.transform="perspective("+this.settings.perspective+"px) rotateX(0deg) rotateY(0deg) scale3d(1, 1, 1)",this.glare&&(this.glareElement.style.transform="rotate(180deg) translate(-50%, -50%)",this.glareElement.style.opacity="0")},e.prototype.getValues=function(){var e=(this.event.clientX-this.left)/this.width,t=(this.event.clientY-this.top)/this.height;return e=Math.min(Math.max(e,0),1),t=Math.min(Math.max(t,0),1),{tiltX:(this.reverse*(this.settings.max/2-e*this.settings.max)).toFixed(2),tiltY:(this.reverse*(t*this.settings.max-this.settings.max/2)).toFixed(2),percentageX:100*e,percentageY:100*t,angle:Math.atan2(this.event.clientX-(this.left+this.width/2),-(this.event.clientY-(this.top+this.height/2)))*(180/Math.PI)}},e.prototype.updateElementPosition=function(){var e=this.element.getBoundingClientRect();this.width=this.element.offsetWidth,this.height=this.element.offsetHeight,this.left=e.left,this.top=e.top},e.prototype.update=function(){var e=this.getValues();this.element.style.transform="perspective("+this.settings.perspective+"px) rotateX("+("x"===this.settings.axis?0:e.tiltY)+"deg) rotateY("+("y"===this.settings.axis?0:e.tiltX)+"deg) scale3d("+this.settings.scale+", "+this.settings.scale+", "+this.settings.scale+")",this.glare&&(this.glareElement.style.transform="rotate("+e.angle+"deg) translate(-50%, -50%)",this.glareElement.style.opacity=""+e.percentageY*this.settings["max-glare"]/100),this.element.dispatchEvent(new CustomEvent("tiltChange",{detail:e})),this.updateCall=null},e.prototype.prepareGlare=function(){if(!this.glarePrerender){var e=document.createElement("div");e.classList.add("js-tilt-glare");var t=document.createElement("div");t.classList.add("js-tilt-glare-inner"),e.appendChild(t),this.element.appendChild(e)}this.glareElementWrapper=this.element.querySelector(".js-tilt-glare"),this.glareElement=this.element.querySelector(".js-tilt-glare-inner"),this.glarePrerender||(Object.assign(this.glareElementWrapper.style,{position:"absolute",top:"0",left:"0",width:"100%",height:"100%",overflow:"hidden"}),Object.assign(this.glareElement.style,{position:"absolute",top:"50%",left:"50%","pointer-events":"none","background-image":"linear-gradient(0deg, rgba(255,255,255,0) 0%, rgba(255,255,255,1) 100%)",width:2*this.element.offsetWidth+"px",height:2*this.element.offsetWidth+"px",transform:"rotate(180deg) translate(-50%, -50%)","transform-origin":"0% 0%",opacity:"0"}))},e.prototype.updateGlareSize=function(){Object.assign(this.glareElement.style,{width:""+2*this.element.offsetWidth,height:""+2*this.element.offsetWidth})},e.prototype.onWindowResizeBind=function(){this.updateGlareSize()},e.prototype.setTransition=function(){var e=this;clearTimeout(this.transitionTimeout),this.element.style.transition=this.settings.speed+"ms "+this.settings.easing,this.glare&&(this.glareElement.style.transition="opacity "+this.settings.speed+"ms "+this.settings.easing),this.transitionTimeout=setTimeout(function(){e.element.style.transition="",e.glare&&(e.glareElement.style.transition="")},this.settings.speed)},e.prototype.extendSettings=function(e){var t={reverse:!1,max:35,perspective:1e3,easing:"cubic-bezier(.03,.98,.52,.99)",scale:"1",speed:"300",transition:!0,axis:null,glare:!1,"max-glare":1,"glare-prerender":!1,reset:!0},n={};for(var i in t)if(i in e)n[i]=e[i];else if(this.element.hasAttribute("data-tilt-"+i)){var r=this.element.getAttribute("data-tilt-"+i);try{n[i]=JSON.parse(r)}catch(e){n[i]=r}}else n[i]=t[i];return n},e.init=function(t,n){t instanceof Node&&(t=[t]),t instanceof NodeList&&(t=[].slice.call(t)),t instanceof Array&&t.forEach(function(t){"vanillaTilt"in t||(t.vanillaTilt=new e(t,n))})},e}();"undefined"!=typeof document&&(window.VanillaTilt=r,r.init(document.querySelectorAll("[data-tilt]"))),e.exports=r},function(e,t){!function(e){e(document).ready(function(){e("audio").mediaelementplayer({features:["playpause","progress","current","duration","tracks"]}),e(".menu-toggle").on("click",function(t){t.preventDefault(),e(".slide-menu").addClass("active")}),e(".slide-menu-close").on("click",function(t){t.preventDefault(),e(".slide-menu").removeClass("active")}),e("#dis").ddslick(),e("#languages").ddslick(),e(".section-content-tabs a").on("click",function(t){t.preventDefault(),e(".section-content-tabs a").removeClass("active"),e(this).addClass("active")}),e('.slide-menu input[type="text"]').on("input",function(){var t=e(this);setTimeout(function(){""==t.val()?(e(".slide-menu .slide-menu-content").slideDown(),e(".slide-menu .slide-menu-search-content").slideUp()):(e(".slide-menu .slide-menu-content").slideUp(),e(".slide-menu .slide-menu-search-content").slideDown())},100)}),e(".milco-pager a").on("click",function(t){t.preventDefault();var n=e(this),i=parseInt(n.data("active"));e(".milco-slide").hide(),e(e(".milco-slide")[i-1]).show()}),e(".main-selector .card").on("click",function(){var t=e(this),n=t.hasClass("card-disabled"),i=e(this).data("target");t.parent().find(".card").addClass("card-disabled"),n&&t.removeClass("card-disabled"),i&&(n?(e(".main-container").hide(),e(".main-container .main-container-item").hide(),e(i).show().parent().parent().show()):e(".main-container").hide())}),e(".class .class-opener, .class .class-closerer").on("click",function(){e(this).closest(".class").toggleClass("class-open")}),e(".btn-toggle").on("click",function(t){t.preventDefault();var n=e(this),i=n.data("toggle"),r=n.data("target");e(i).addClass("hide"),e(r).removeClass("hide"),n.parent().find(".btn-toggle").removeClass("btn-active"),n.addClass("btn-active")}),e(".faq-item").on("click",function(t){t.preventDefault();var n=e(this).hasClass("faq-active");e(".faq-item").removeClass("faq-active"),n?e(this).removeClass("faq-active"):e(this).addClass("faq-active")}),e(".sedes-item a").on("click",function(t){t.preventDefault();var n=e(this).parent().hasClass("active");e(".sedes-item").removeClass("active"),n?e(this).parent().removeClass("active"):e(this).parent().addClass("active")})})}(jQuery)},function(e,t){!function(e){e(document).ready(function(){new Swiper(".swiper-tendencias",{pagination:{el:".pager ul",renderBullet:function(e,t){return'<li class="'+t+'"><span>'+(e+1)+"</span></li>"},clickable:!0,modifierClass:""},slidesPerView:3,slidesPerGroup:3,breakpoints:{670:{slidesPerView:1,slidesPerGroup:1},990:{slidesPerView:2,slidesPerGroup:2}}});new Swiper(".swiper-main",{slidesPerView:1,slidesPerGroup:1,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},loop:!0}).on("slideChangeTransitionEnd",function(){var t=e(this.$el[0]);t.find(".banner-bg").removeClass("active"),console.log(t.find(".banner-bg")),console.log(t.find(".swiper-slide-active .banner-bg")),t.find(".swiper-slide-active .banner-bg").addClass("active")});new Swiper(".swiper-galeria",{slidesPerView:1,slidesPerGroup:1,pagination:{el:".pager ul",renderBullet:function(e,t){return'<li class="'+t+'"><span>'+(e+1)+"</span></li>"},clickable:!0,modifierClass:""}});var t=new Date(2019,7,26).getTime()/1e3;setInterval(function(){var n=(new Date).getTime()/1e3,i=t-n,r={};r.days=Math.floor(i/86400),r.hours=Math.floor((i-86400*r.days)/3600),r.minutes=Math.floor((i-86400*r.days-3600*r.hours)/60),r.seconds=Math.floor(i-86400*r.days-3600*r.hours-60*r.minutes),e(".counter-item .number").each(function(){var t=e(this);t.text(r[t.data("type")])})},1e3),e(".media").on("click",function(){var t=e(this).find(".bg"),n=e("<img />");n.addClass("img-responsive").attr("src",t.data("image")),e("#galery-modal .img-container").html(n),e("#galery-modal").modal()});var n=e(".milco").offset();e(window).scroll(function(t){if(n){var i=e("html").scrollTop();if(n.top<i){var r=-60-.3*(i-n.top);e(window).width()>480?e(".milco .milco-avatar").css("top",r):e(".milco .milco-avatar").css("top","-60px")}}}),e(".post-image-middle").each(function(){VanillaTilt.init(this)}),e(".more-link").on("click",function(t){t.preventDefault();var n=e(this);n.find(".fa-plus").hide(),n.find(".fa-spin").show(),setTimeout(function(){var e=n.closest(".magazine"),t=e.find(".duplicate").clone().removeClass("duplicate");t.insertAfter(e.find(".row").last()),n.find(".fa-plus").show(),n.find(".fa-spin").hide(),t.find(".post-image-middle").each(function(){VanillaTilt.init(this)})},2e3)})})}(jQuery)},function(e,t){!function(e){e(document).ready(function(){e(".project-advance").each(function(t,n){var i=e(n),r=e("<div></div>"),s="project-advance-chart-"+t;r.attr("id",s),i.append(r),Highcharts.chart(s,{chart:{type:"column",height:280,options3d:{enabled:!0,alpha:30,beta:30,viewDistance:30,depth:60}},credits:{enabled:!1},title:{text:"",visible:!1},yAxis:{visible:!1},xAxis:{visible:!1},tooltip:{enabled:!1},legend:{layout:"vertical",align:"right",verticalAlign:"middle"},plotOptions:{column:{stacking:"normal",depth:40,pointWidth:40,pointPadding:.05}},series:[{data:[30],color:"#e0e0e0",stack:"one",showInLegend:!1},{data:[50],color:"#e0e0e0",stack:"two",showInLegend:!1},{data:[70],color:"#58fc58",name:"Avance FÃ­sico",stack:"one",dataLabels:{enabled:!0,style:{textOutline:"0px"},color:" #000000",x:-5,y:105}},{data:[50],color:"#50f3f3",name:"Avance Financiero",stack:"two",dataLabels:{enabled:!0,style:{textOutline:"0px"},color:" #000000",x:-5,y:70}}]})})})}(jQuery)},function(e,t){window.youTubeReady=!1,window.onYouTubeIframeAPIReady=function(){window.youTubeReady=!0};var n=function(){$(".video").each(function(e,t){var n=$(t);new YT.Player(n.find(".video-container")[0],{videoId:n.data("youtube")})})};jQuery(document).ready(function(){var e=setInterval(function(){window.youTubeReady&&(clearInterval(e),n())},200)})},function(e,t){!function(e){var t,n=0,i=e(window),r=function(n){var i=e(".sport-selector-item").length;e(".sport-selector-wrapper").width("auto");var r=Math.ceil(e(".sport-selector-wrapper").width()/100)-2;e(".sport-selector-wrapper").width(100*r),t=100*(i-r)},s=function(e){return e<0?0:e>t?t:e};e(document).ready(function(){e(".sport-selector .sport-selector-left").on("click",function(t){var i=0-(n=s(n-100));e(".sport-selector-content").css("left",i+"px")}),e(".sport-selector .sport-selector-right").on("click",function(t){var i=0-(n=s(n+100));e(".sport-selector-content").css("left",i+"px")}),function(){var t=window.location.pathname;t=t.slice(0,1).toUpperCase()+t.slice(1,2).toUpperCase()+t.slice(2);var i=e(".sport-selector-item"),r=e('.sport-selector-item[href="'+t+'"]');if(r){r.addClass("sport-selector-item-active");var s=0-(n=100*i.index(r));e(".sport-selector-content").addClass("no-transition").css("left",s+"px"),setTimeout(function(){e(".sport-selector-content").removeClass("no-transition")},100)}}(),i.resize(r),i.resize();new Swiper(".sport-info .swiper-container",{pagination:{el:".swiper-pagination",clickable:!0}});e(".sbt-videos").on("click",function(t){t.preventDefault(),e(".sport-videos").show()}),e(".sport-videos-close").on("click",function(t){t.preventDefault(),e(".sport-videos").hide()}),e(".sbt-photos").on("click",function(t){t.preventDefault(),e(".sport-photos").show();new Swiper(".swiper-sport",{slidesPerView:1,slidesPerGroup:1,navigation:{nextEl:".swiper-button-next",prevEl:".swiper-button-prev"},loop:!0,pagination:{el:".swiper-pagination",type:"bullets",clickable:!0,renderBullet:function(t,n){return'<div class="'+n+'"><img src="'+e(e(".swiper-sport .swiper-slide .banner-bg")[t]).data("image")+'" class="img-responsive"><span></span></div>'}}})}),e(".sport-notes").on("click",function(t){t.target===this&&e(".sport-notes").hide()}),e(".sport-photos-close").on("click",function(t){t.preventDefault(),e(".sport-photos").hide()}),e(".sbt-tests").on("click",function(t){t.preventDefault(),e(".sport-test").show()}),e(".sbt-notes").on("click",function(t){t.preventDefault(),e(".sport-notes").show()}),e(".sport-test-close").on("click",function(t){t.preventDefault(),e(".sport-test").hide()})})}(jQuery)},function(e,t){!function(e){e(document).ready(function(){var t=1;e(".form-simple button").on("click",function(n){n.preventDefault(),1==t&&(e('.form-step-content[data-step="1"]').removeClass("active").addClass("hide"),e('.form-step-content[data-step="2"]').removeClass("hide").addClass("active")),2==t&&(e(".modal-body").hide(),e(".modal-title-content.active").hide(),e(".modal-title-content.hide").removeClass("hide")),t++})})}(jQuery)},function(e,t,n){},,,function(e,t,n){"use strict";n.r(t);var i="undefined"==typeof document?{body:{},addEventListener:function(){},removeEventListener:function(){},activeElement:{blur:function(){},nodeName:""},querySelector:function(){return null},querySelectorAll:function(){return[]},getElementById:function(){return null},createEvent:function(){return{initEvent:function(){}}},createElement:function(){return{children:[],childNodes:[],style:{},setAttribute:function(){},getElementsByTagName:function(){return[]}}},location:{hash:""}}:document,r="undefined"==typeof window?{document:i,navigator:{userAgent:""},location:{},history:{},CustomEvent:function(){return this},addEventListener:function(){},removeEventListener:function(){},getComputedStyle:function(){return{getPropertyValue:function(){return""}}},Image:function(){},Date:function(){},screen:{},setTimeout:function(){},clearTimeout:function(){}}:window;class s{constructor(e){const t=this;for(let n=0;n<e.length;n+=1)t[n]=e[n];return t.length=e.length,this}}function o(e,t){const n=[];let o=0;if(e&&!t&&e instanceof s)return e;if(e)if("string"==typeof e){let r,s;const a=e.trim();if(a.indexOf("<")>=0&&a.indexOf(">")>=0){let e="div";for(0===a.indexOf("<li")&&(e="ul"),0===a.indexOf("<tr")&&(e="tbody"),0!==a.indexOf("<td")&&0!==a.indexOf("<th")||(e="tr"),0===a.indexOf("<tbody")&&(e="table"),0===a.indexOf("<option")&&(e="select"),(s=i.createElement(e)).innerHTML=a,o=0;o<s.childNodes.length;o+=1)n.push(s.childNodes[o])}else for(r=t||"#"!==e[0]||e.match(/[ .<>:~]/)?(t||i).querySelectorAll(e.trim()):[i.getElementById(e.trim().split("#")[1])],o=0;o<r.length;o+=1)r[o]&&n.push(r[o])}else if(e.nodeType||e===r||e===i)n.push(e);else if(e.length>0&&e[0].nodeType)for(o=0;o<e.length;o+=1)n.push(e[o]);return new s(n)}function a(e){const t=[];for(let n=0;n<e.length;n+=1)-1===t.indexOf(e[n])&&t.push(e[n]);return t}o.fn=s.prototype,o.Class=s,o.Dom7=s;"resize scroll".split(" ");const l={addClass:function(e){if(void 0===e)return this;const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.add(t[e]);return this},removeClass:function(e){const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.remove(t[e]);return this},hasClass:function(e){return!!this[0]&&this[0].classList.contains(e)},toggleClass:function(e){const t=e.split(" ");for(let e=0;e<t.length;e+=1)for(let n=0;n<this.length;n+=1)void 0!==this[n]&&void 0!==this[n].classList&&this[n].classList.toggle(t[e]);return this},attr:function(e,t){if(1===arguments.length&&"string"==typeof e)return this[0]?this[0].getAttribute(e):void 0;for(let n=0;n<this.length;n+=1)if(2===arguments.length)this[n].setAttribute(e,t);else for(const t in e)this[n][t]=e[t],this[n].setAttribute(t,e[t]);return this},removeAttr:function(e){for(let t=0;t<this.length;t+=1)this[t].removeAttribute(e);return this},data:function(e,t){let n;if(void 0!==t){for(let i=0;i<this.length;i+=1)(n=this[i]).dom7ElementDataStorage||(n.dom7ElementDataStorage={}),n.dom7ElementDataStorage[e]=t;return this}if(n=this[0]){if(n.dom7ElementDataStorage&&e in n.dom7ElementDataStorage)return n.dom7ElementDataStorage[e];const t=n.getAttribute(`data-${e}`);return t||void 0}},transform:function(e){for(let t=0;t<this.length;t+=1){const n=this[t].style;n.webkitTransform=e,n.transform=e}return this},transition:function(e){"string"!=typeof e&&(e=`${e}ms`);for(let t=0;t<this.length;t+=1){const n=this[t].style;n.webkitTransitionDuration=e,n.transitionDuration=e}return this},on:function(...e){let[t,n,i,r]=e;function s(e){const t=e.target;if(!t)return;const r=e.target.dom7EventData||[];if(r.indexOf(e)<0&&r.unshift(e),o(t).is(n))i.apply(t,r);else{const e=o(t).parents();for(let t=0;t<e.length;t+=1)o(e[t]).is(n)&&i.apply(e[t],r)}}function a(e){const t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),i.apply(this,t)}"function"==typeof e[1]&&([t,i,r]=e,n=void 0),r||(r=!1);const l=t.split(" ");let d;for(let e=0;e<this.length;e+=1){const t=this[e];if(n)for(d=0;d<l.length;d+=1){const e=l[d];t.dom7LiveListeners||(t.dom7LiveListeners={}),t.dom7LiveListeners[e]||(t.dom7LiveListeners[e]=[]),t.dom7LiveListeners[e].push({listener:i,proxyListener:s}),t.addEventListener(e,s,r)}else for(d=0;d<l.length;d+=1){const e=l[d];t.dom7Listeners||(t.dom7Listeners={}),t.dom7Listeners[e]||(t.dom7Listeners[e]=[]),t.dom7Listeners[e].push({listener:i,proxyListener:a}),t.addEventListener(e,a,r)}}return this},off:function(...e){let[t,n,i,r]=e;"function"==typeof e[1]&&([t,i,r]=e,n=void 0),r||(r=!1);const s=t.split(" ");for(let e=0;e<s.length;e+=1){const t=s[e];for(let e=0;e<this.length;e+=1){const s=this[e];let o;if(!n&&s.dom7Listeners?o=s.dom7Listeners[t]:n&&s.dom7LiveListeners&&(o=s.dom7LiveListeners[t]),o&&o.length)for(let e=o.length-1;e>=0;e-=1){const n=o[e];i&&n.listener===i?(s.removeEventListener(t,n.proxyListener,r),o.splice(e,1)):i||(s.removeEventListener(t,n.proxyListener,r),o.splice(e,1))}}}return this},trigger:function(...e){const t=e[0].split(" "),n=e[1];for(let s=0;s<t.length;s+=1){const o=t[s];for(let t=0;t<this.length;t+=1){const s=this[t];let a;try{a=new r.CustomEvent(o,{detail:n,bubbles:!0,cancelable:!0})}catch(e){(a=i.createEvent("Event")).initEvent(o,!0,!0),a.detail=n}s.dom7EventData=e.filter((e,t)=>t>0),s.dispatchEvent(a),s.dom7EventData=[],delete s.dom7EventData}}return this},transitionEnd:function(e){const t=["webkitTransitionEnd","transitionend"],n=this;let i;function r(s){if(s.target===this)for(e.call(this,s),i=0;i<t.length;i+=1)n.off(t[i],r)}if(e)for(i=0;i<t.length;i+=1)n.on(t[i],r);return this},outerWidth:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetWidth+parseFloat(e.getPropertyValue("margin-right"))+parseFloat(e.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(this.length>0){if(e){const e=this.styles();return this[0].offsetHeight+parseFloat(e.getPropertyValue("margin-top"))+parseFloat(e.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},offset:function(){if(this.length>0){const e=this[0],t=e.getBoundingClientRect(),n=i.body,s=e.clientTop||n.clientTop||0,o=e.clientLeft||n.clientLeft||0,a=e===r?r.scrollY:e.scrollTop,l=e===r?r.scrollX:e.scrollLeft;return{top:t.top+a-s,left:t.left+l-o}}return null},css:function(e,t){let n;if(1===arguments.length){if("string"!=typeof e){for(n=0;n<this.length;n+=1)for(let t in e)this[n].style[t]=e[t];return this}if(this[0])return r.getComputedStyle(this[0],null).getPropertyValue(e)}if(2===arguments.length&&"string"==typeof e){for(n=0;n<this.length;n+=1)this[n].style[e]=t;return this}return this},each:function(e){if(!e)return this;for(let t=0;t<this.length;t+=1)if(!1===e.call(this[t],t,this[t]))return this;return this},html:function(e){if(void 0===e)return this[0]?this[0].innerHTML:void 0;for(let t=0;t<this.length;t+=1)this[t].innerHTML=e;return this},text:function(e){if(void 0===e)return this[0]?this[0].textContent.trim():null;for(let t=0;t<this.length;t+=1)this[t].textContent=e;return this},is:function(e){const t=this[0];let n,a;if(!t||void 0===e)return!1;if("string"==typeof e){if(t.matches)return t.matches(e);if(t.webkitMatchesSelector)return t.webkitMatchesSelector(e);if(t.msMatchesSelector)return t.msMatchesSelector(e);for(n=o(e),a=0;a<n.length;a+=1)if(n[a]===t)return!0;return!1}if(e===i)return t===i;if(e===r)return t===r;if(e.nodeType||e instanceof s){for(n=e.nodeType?[e]:e,a=0;a<n.length;a+=1)if(n[a]===t)return!0;return!1}return!1},index:function(){let e,t=this[0];if(t){for(e=0;null!==(t=t.previousSibling);)1===t.nodeType&&(e+=1);return e}},eq:function(e){if(void 0===e)return this;const t=this.length;let n;return new s(e>t-1?[]:e<0?(n=t+e)<0?[]:[this[n]]:[this[e]])},append:function(...e){let t;for(let n=0;n<e.length;n+=1){t=e[n];for(let e=0;e<this.length;e+=1)if("string"==typeof t){const n=i.createElement("div");for(n.innerHTML=t;n.firstChild;)this[e].appendChild(n.firstChild)}else if(t instanceof s)for(let n=0;n<t.length;n+=1)this[e].appendChild(t[n]);else this[e].appendChild(t)}return this},prepend:function(e){let t,n;for(t=0;t<this.length;t+=1)if("string"==typeof e){const r=i.createElement("div");for(r.innerHTML=e,n=r.childNodes.length-1;n>=0;n-=1)this[t].insertBefore(r.childNodes[n],this[t].childNodes[0])}else if(e instanceof s)for(n=0;n<e.length;n+=1)this[t].insertBefore(e[n],this[t].childNodes[0]);else this[t].insertBefore(e,this[t].childNodes[0]);return this},next:function(e){return this.length>0?e?this[0].nextElementSibling&&o(this[0].nextElementSibling).is(e)?new s([this[0].nextElementSibling]):new s([]):this[0].nextElementSibling?new s([this[0].nextElementSibling]):new s([]):new s([])},nextAll:function(e){const t=[];let n=this[0];if(!n)return new s([]);for(;n.nextElementSibling;){const i=n.nextElementSibling;e?o(i).is(e)&&t.push(i):t.push(i),n=i}return new s(t)},prev:function(e){if(this.length>0){const t=this[0];return e?t.previousElementSibling&&o(t.previousElementSibling).is(e)?new s([t.previousElementSibling]):new s([]):t.previousElementSibling?new s([t.previousElementSibling]):new s([])}return new s([])},prevAll:function(e){const t=[];let n=this[0];if(!n)return new s([]);for(;n.previousElementSibling;){const i=n.previousElementSibling;e?o(i).is(e)&&t.push(i):t.push(i),n=i}return new s(t)},parent:function(e){const t=[];for(let n=0;n<this.length;n+=1)null!==this[n].parentNode&&(e?o(this[n].parentNode).is(e)&&t.push(this[n].parentNode):t.push(this[n].parentNode));return o(a(t))},parents:function(e){const t=[];for(let n=0;n<this.length;n+=1){let i=this[n].parentNode;for(;i;)e?o(i).is(e)&&t.push(i):t.push(i),i=i.parentNode}return o(a(t))},closest:function(e){let t=this;return void 0===e?new s([]):(t.is(e)||(t=t.parents(e).eq(0)),t)},find:function(e){const t=[];for(let n=0;n<this.length;n+=1){const i=this[n].querySelectorAll(e);for(let e=0;e<i.length;e+=1)t.push(i[e])}return new s(t)},children:function(e){const t=[];for(let n=0;n<this.length;n+=1){const i=this[n].childNodes;for(let n=0;n<i.length;n+=1)e?1===i[n].nodeType&&o(i[n]).is(e)&&t.push(i[n]):1===i[n].nodeType&&t.push(i[n])}return new s(a(t))},remove:function(){for(let e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this},add:function(...e){const t=this;let n,i;for(n=0;n<e.length;n+=1){const r=o(e[n]);for(i=0;i<r.length;i+=1)t[t.length]=r[i],t.length+=1}return t},styles:function(){return this[0]?r.getComputedStyle(this[0],null):{}}};Object.keys(l).forEach(e=>{o.fn[e]=l[e]});const d={deleteProps(e){const t=e;Object.keys(t).forEach(e=>{try{t[e]=null}catch(e){}try{delete t[e]}catch(e){}})},nextTick:(e,t=0)=>setTimeout(e,t),now:()=>Date.now(),getTranslate(e,t="x"){let n,i,s;const o=r.getComputedStyle(e,null);return r.WebKitCSSMatrix?((i=o.transform||o.webkitTransform).split(",").length>6&&(i=i.split(", ").map(e=>e.replace(",",".")).join(", ")),s=new r.WebKitCSSMatrix("none"===i?"":i)):n=(s=o.MozTransform||o.OTransform||o.MsTransform||o.msTransform||o.transform||o.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,")).toString().split(","),"x"===t&&(i=r.WebKitCSSMatrix?s.m41:16===n.length?parseFloat(n[12]):parseFloat(n[4])),"y"===t&&(i=r.WebKitCSSMatrix?s.m42:16===n.length?parseFloat(n[13]):parseFloat(n[5])),i||0},parseUrlQuery(e){const t={};let n,i,s,o,a=e||r.location.href;if("string"==typeof a&&a.length)for(o=(i=(a=a.indexOf("?")>-1?a.replace(/\S*\?/,""):"").split("&").filter(e=>""!==e)).length,n=0;n<o;n+=1)s=i[n].replace(/#\S+/g,"").split("="),t[decodeURIComponent(s[0])]=void 0===s[1]?void 0:decodeURIComponent(s[1])||"";return t},isObject:e=>"object"==typeof e&&null!==e&&e.constructor&&e.constructor===Object,extend(...e){const t=Object(e[0]);for(let n=1;n<e.length;n+=1){const i=e[n];if(void 0!==i&&null!==i){const e=Object.keys(Object(i));for(let n=0,r=e.length;n<r;n+=1){const r=e[n],s=Object.getOwnPropertyDescriptor(i,r);void 0!==s&&s.enumerable&&(d.isObject(t[r])&&d.isObject(i[r])?d.extend(t[r],i[r]):!d.isObject(t[r])&&d.isObject(i[r])?(t[r]={},d.extend(t[r],i[r])):t[r]=i[r])}}}return t}},c=function(){const e=i.createElement("div");return{touch:r.Modernizr&&!0===r.Modernizr.touch||!!("ontouchstart"in r||r.DocumentTouch&&i instanceof r.DocumentTouch),pointerEvents:!(!r.navigator.pointerEnabled&&!r.PointerEvent),prefixedPointerEvents:!!r.navigator.msPointerEnabled,transition:function(){const t=e.style;return"transition"in t||"webkitTransition"in t||"MozTransition"in t}(),transforms3d:r.Modernizr&&!0===r.Modernizr.csstransforms3d||function(){const t=e.style;return"webkitPerspective"in t||"MozPerspective"in t||"OPerspective"in t||"MsPerspective"in t||"perspective"in t}(),flexbox:function(){const t=e.style,n="alignItems webkitAlignItems webkitBoxAlign msFlexAlign mozBoxAlign webkitFlexDirection msFlexDirection mozBoxDirection mozBoxOrient webkitBoxDirection webkitBoxOrient".split(" ");for(let e=0;e<n.length;e+=1)if(n[e]in t)return!0;return!1}(),observer:"MutationObserver"in r||"WebkitMutationObserver"in r,passiveListener:function(){let e=!1;try{const t=Object.defineProperty({},"passive",{get(){e=!0}});r.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in r}}();class u{constructor(e={}){const t=this;t.params=e,t.eventsListeners={},t.params&&t.params.on&&Object.keys(t.params.on).forEach(e=>{t.on(e,t.params.on[e])})}on(e,t,n){const i=this;if("function"!=typeof t)return i;const r=n?"unshift":"push";return e.split(" ").forEach(e=>{i.eventsListeners[e]||(i.eventsListeners[e]=[]),i.eventsListeners[e][r](t)}),i}once(e,t,n){const i=this;if("function"!=typeof t)return i;return i.on(e,function n(...r){t.apply(i,r),i.off(e,n)},n)}off(e,t){const n=this;return n.eventsListeners?(e.split(" ").forEach(e=>{void 0===t?n.eventsListeners[e]=[]:n.eventsListeners[e].forEach((i,r)=>{i===t&&n.eventsListeners[e].splice(r,1)})}),n):n}emit(...e){const t=this;if(!t.eventsListeners)return t;let n,i,r;return"string"==typeof e[0]||Array.isArray(e[0])?(n=e[0],i=e.slice(1,e.length),r=t):(n=e[0].events,i=e[0].data,r=e[0].context||t),(Array.isArray(n)?n:n.split(" ")).forEach(e=>{if(t.eventsListeners&&t.eventsListeners[e]){const n=[];t.eventsListeners[e].forEach(e=>{n.push(e)}),n.forEach(e=>{e.apply(r,i)})}}),t}useModulesParams(e){const t=this;t.modules&&Object.keys(t.modules).forEach(n=>{const i=t.modules[n];i.params&&d.extend(e,i.params)})}useModules(e={}){const t=this;t.modules&&Object.keys(t.modules).forEach(n=>{const i=t.modules[n],r=e[n]||{};i.instance&&Object.keys(i.instance).forEach(e=>{const n=i.instance[e];t[e]="function"==typeof n?n.bind(t):n}),i.on&&t.on&&Object.keys(i.on).forEach(e=>{t.on(e,i.on[e])}),i.create&&i.create.bind(t)(r)})}static set components(e){this.use&&this.use(e)}static installModule(e,...t){const n=this;n.prototype.modules||(n.prototype.modules={});const i=e.name||`${Object.keys(n.prototype.modules).length}_${d.now()}`;return n.prototype.modules[i]=e,e.proto&&Object.keys(e.proto).forEach(t=>{n.prototype[t]=e.proto[t]}),e.static&&Object.keys(e.static).forEach(t=>{n[t]=e.static[t]}),e.install&&e.install.apply(n,t),n}static use(e,...t){const n=this;return Array.isArray(e)?(e.forEach(e=>n.installModule(e)),n):n.installModule(e,...t)}}var p={updateSize:function(){const e=this;let t,n;const i=e.$el;t=void 0!==e.params.width?e.params.width:i[0].clientWidth,n=void 0!==e.params.height?e.params.height:i[0].clientHeight,0===t&&e.isHorizontal()||0===n&&e.isVertical()||(t=t-parseInt(i.css("padding-left"),10)-parseInt(i.css("padding-right"),10),n=n-parseInt(i.css("padding-top"),10)-parseInt(i.css("padding-bottom"),10),d.extend(e,{width:t,height:n,size:e.isHorizontal()?t:n}))},updateSlides:function(){const e=this,t=e.params,{$wrapperEl:n,size:i,rtlTranslate:s,wrongRTL:o}=e,a=e.virtual&&t.virtual.enabled,l=a?e.virtual.slides.length:e.slides.length,u=n.children(`.${e.params.slideClass}`),p=a?e.virtual.slides.length:u.length;let h=[];const f=[],m=[];let g=t.slidesOffsetBefore;"function"==typeof g&&(g=t.slidesOffsetBefore.call(e));let v=t.slidesOffsetAfter;"function"==typeof v&&(v=t.slidesOffsetAfter.call(e));const y=e.snapGrid.length,b=e.snapGrid.length;let w,E,x=t.spaceBetween,T=-g,S=0,C=0;if(void 0===i)return;"string"==typeof x&&x.indexOf("%")>=0&&(x=parseFloat(x.replace("%",""))/100*i),e.virtualSize=-x,s?u.css({marginLeft:"",marginTop:""}):u.css({marginRight:"",marginBottom:""}),t.slidesPerColumn>1&&(w=Math.floor(p/t.slidesPerColumn)===p/e.params.slidesPerColumn?p:Math.ceil(p/t.slidesPerColumn)*t.slidesPerColumn,"auto"!==t.slidesPerView&&"row"===t.slidesPerColumnFill&&(w=Math.max(w,t.slidesPerView*t.slidesPerColumn)));const k=t.slidesPerColumn,P=w/k,$=P-(t.slidesPerColumn*P-p);for(let n=0;n<p;n+=1){E=0;const s=u.eq(n);if(t.slidesPerColumn>1){let i,r,o;"column"===t.slidesPerColumnFill?(o=n-(r=Math.floor(n/k))*k,(r>$||r===$&&o===k-1)&&(o+=1)>=k&&(o=0,r+=1),i=r+o*w/k,s.css({"-webkit-box-ordinal-group":i,"-moz-box-ordinal-group":i,"-ms-flex-order":i,"-webkit-order":i,order:i})):r=n-(o=Math.floor(n/P))*P,s.css(`margin-${e.isHorizontal()?"top":"left"}`,0!==o&&t.spaceBetween&&`${t.spaceBetween}px`).attr("data-swiper-column",r).attr("data-swiper-row",o)}if("none"!==s.css("display")){if("auto"===t.slidesPerView){const n=r.getComputedStyle(s[0],null),i=s[0].style.transform,o=s[0].style.webkitTransform;i&&(s[0].style.transform="none"),o&&(s[0].style.webkitTransform="none"),E=e.isHorizontal()?s[0].getBoundingClientRect().width+parseFloat(n.getPropertyValue("margin-left"))+parseFloat(n.getPropertyValue("margin-right")):s[0].getBoundingClientRect().height+parseFloat(n.getPropertyValue("margin-top"))+parseFloat(n.getPropertyValue("margin-bottom")),i&&(s[0].style.transform=i),o&&(s[0].style.webkitTransform=o),t.roundLengths&&(E=Math.floor(E))}else E=(i-(t.slidesPerView-1)*x)/t.slidesPerView,t.roundLengths&&(E=Math.floor(E)),u[n]&&(e.isHorizontal()?u[n].style.width=`${E}px`:u[n].style.height=`${E}px`);u[n]&&(u[n].swiperSlideSize=E),m.push(E),t.centeredSlides?(T=T+E/2+S/2+x,0===S&&0!==n&&(T=T-i/2-x),0===n&&(T=T-i/2-x),Math.abs(T)<.001&&(T=0),t.roundLengths&&(T=Math.floor(T)),C%t.slidesPerGroup==0&&h.push(T),f.push(T)):(t.roundLengths&&(T=Math.floor(T)),C%t.slidesPerGroup==0&&h.push(T),f.push(T),T=T+E+x),e.virtualSize+=E+x,S=E,C+=1}}let A;if(e.virtualSize=Math.max(e.virtualSize,i)+v,s&&o&&("slide"===t.effect||"coverflow"===t.effect)&&n.css({width:`${e.virtualSize+t.spaceBetween}px`}),c.flexbox&&!t.setWrapperSize||(e.isHorizontal()?n.css({width:`${e.virtualSize+t.spaceBetween}px`}):n.css({height:`${e.virtualSize+t.spaceBetween}px`})),t.slidesPerColumn>1&&(e.virtualSize=(E+t.spaceBetween)*w,e.virtualSize=Math.ceil(e.virtualSize/t.slidesPerColumn)-t.spaceBetween,e.isHorizontal()?n.css({width:`${e.virtualSize+t.spaceBetween}px`}):n.css({height:`${e.virtualSize+t.spaceBetween}px`}),t.centeredSlides)){A=[];for(let n=0;n<h.length;n+=1){let i=h[n];t.roundLengths&&(i=Math.floor(i)),h[n]<e.virtualSize+h[0]&&A.push(i)}h=A}if(!t.centeredSlides){A=[];for(let n=0;n<h.length;n+=1){let r=h[n];t.roundLengths&&(r=Math.floor(r)),h[n]<=e.virtualSize-i&&A.push(r)}h=A,Math.floor(e.virtualSize-i)-Math.floor(h[h.length-1])>1&&h.push(e.virtualSize-i)}0===h.length&&(h=[0]),0!==t.spaceBetween&&(e.isHorizontal()?s?u.css({marginLeft:`${x}px`}):u.css({marginRight:`${x}px`}):u.css({marginBottom:`${x}px`})),d.extend(e,{slides:u,snapGrid:h,slidesGrid:f,slidesSizesGrid:m}),p!==l&&e.emit("slidesLengthChange"),h.length!==y&&(e.params.watchOverflow&&e.checkOverflow(),e.emit("snapGridLengthChange")),f.length!==b&&e.emit("slidesGridLengthChange"),(t.watchSlidesProgress||t.watchSlidesVisibility)&&e.updateSlidesOffset()},updateAutoHeight:function(e){const t=this,n=[];let i,r=0;if("number"==typeof e?t.setTransition(e):!0===e&&t.setTransition(t.params.speed),"auto"!==t.params.slidesPerView&&t.params.slidesPerView>1)for(i=0;i<Math.ceil(t.params.slidesPerView);i+=1){const e=t.activeIndex+i;if(e>t.slides.length)break;n.push(t.slides.eq(e)[0])}else n.push(t.slides.eq(t.activeIndex)[0]);for(i=0;i<n.length;i+=1)if(void 0!==n[i]){const e=n[i].offsetHeight;r=e>r?e:r}r&&t.$wrapperEl.css("height",`${r}px`)},updateSlidesOffset:function(){const e=this,t=e.slides;for(let n=0;n<t.length;n+=1)t[n].swiperSlideOffset=e.isHorizontal()?t[n].offsetLeft:t[n].offsetTop},updateSlidesProgress:function(e=this&&this.translate||0){const t=this,n=t.params,{slides:i,rtlTranslate:r}=t;if(0===i.length)return;void 0===i[0].swiperSlideOffset&&t.updateSlidesOffset();let s=-e;r&&(s=e),i.removeClass(n.slideVisibleClass);for(let e=0;e<i.length;e+=1){const o=i[e],a=(s+(n.centeredSlides?t.minTranslate():0)-o.swiperSlideOffset)/(o.swiperSlideSize+n.spaceBetween);if(n.watchSlidesVisibility){const r=-(s-o.swiperSlideOffset),a=r+t.slidesSizesGrid[e];(r>=0&&r<t.size||a>0&&a<=t.size||r<=0&&a>=t.size)&&i.eq(e).addClass(n.slideVisibleClass)}o.progress=r?-a:a}},updateProgress:function(e=this&&this.translate||0){const t=this,n=t.params,i=t.maxTranslate()-t.minTranslate();let{progress:r,isBeginning:s,isEnd:o}=t;const a=s,l=o;0===i?(r=0,s=!0,o=!0):(s=(r=(e-t.minTranslate())/i)<=0,o=r>=1),d.extend(t,{progress:r,isBeginning:s,isEnd:o}),(n.watchSlidesProgress||n.watchSlidesVisibility)&&t.updateSlidesProgress(e),s&&!a&&t.emit("reachBeginning toEdge"),o&&!l&&t.emit("reachEnd toEdge"),(a&&!s||l&&!o)&&t.emit("fromEdge"),t.emit("progress",r)},updateSlidesClasses:function(){const e=this,{slides:t,params:n,$wrapperEl:i,activeIndex:r,realIndex:s}=e,o=e.virtual&&n.virtual.enabled;let a;t.removeClass(`${n.slideActiveClass} ${n.slideNextClass} ${n.slidePrevClass} ${n.slideDuplicateActiveClass} ${n.slideDuplicateNextClass} ${n.slideDuplicatePrevClass}`),(a=o?e.$wrapperEl.find(`.${n.slideClass}[data-swiper-slide-index="${r}"]`):t.eq(r)).addClass(n.slideActiveClass),n.loop&&(a.hasClass(n.slideDuplicateClass)?i.children(`.${n.slideClass}:not(.${n.slideDuplicateClass})[data-swiper-slide-index="${s}"]`).addClass(n.slideDuplicateActiveClass):i.children(`.${n.slideClass}.${n.slideDuplicateClass}[data-swiper-slide-index="${s}"]`).addClass(n.slideDuplicateActiveClass));let l=a.nextAll(`.${n.slideClass}`).eq(0).addClass(n.slideNextClass);n.loop&&0===l.length&&(l=t.eq(0)).addClass(n.slideNextClass);let d=a.prevAll(`.${n.slideClass}`).eq(0).addClass(n.slidePrevClass);n.loop&&0===d.length&&(d=t.eq(-1)).addClass(n.slidePrevClass),n.loop&&(l.hasClass(n.slideDuplicateClass)?i.children(`.${n.slideClass}:not(.${n.slideDuplicateClass})[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(n.slideDuplicateNextClass):i.children(`.${n.slideClass}.${n.slideDuplicateClass}[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`).addClass(n.slideDuplicateNextClass),d.hasClass(n.slideDuplicateClass)?i.children(`.${n.slideClass}:not(.${n.slideDuplicateClass})[data-swiper-slide-index="${d.attr("data-swiper-slide-index")}"]`).addClass(n.slideDuplicatePrevClass):i.children(`.${n.slideClass}.${n.slideDuplicateClass}[data-swiper-slide-index="${d.attr("data-swiper-slide-index")}"]`).addClass(n.slideDuplicatePrevClass))},updateActiveIndex:function(e){const t=this,n=t.rtlTranslate?t.translate:-t.translate,{slidesGrid:i,snapGrid:r,params:s,activeIndex:o,realIndex:a,snapIndex:l}=t;let c,u=e;if(void 0===u){for(let e=0;e<i.length;e+=1)void 0!==i[e+1]?n>=i[e]&&n<i[e+1]-(i[e+1]-i[e])/2?u=e:n>=i[e]&&n<i[e+1]&&(u=e+1):n>=i[e]&&(u=e);s.normalizeSlideIndex&&(u<0||void 0===u)&&(u=0)}if((c=r.indexOf(n)>=0?r.indexOf(n):Math.floor(u/s.slidesPerGroup))>=r.length&&(c=r.length-1),u===o)return void(c!==l&&(t.snapIndex=c,t.emit("snapIndexChange")));const p=parseInt(t.slides.eq(u).attr("data-swiper-slide-index")||u,10);d.extend(t,{snapIndex:c,realIndex:p,previousIndex:o,activeIndex:u}),t.emit("activeIndexChange"),t.emit("snapIndexChange"),a!==p&&t.emit("realIndexChange"),t.emit("slideChange")},updateClickedSlide:function(e){const t=this,n=t.params,i=o(e.target).closest(`.${n.slideClass}`)[0];let r=!1;if(i)for(let e=0;e<t.slides.length;e+=1)t.slides[e]===i&&(r=!0);if(!i||!r)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=i,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(o(i).attr("data-swiper-slide-index"),10):t.clickedIndex=o(i).index(),n.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}};var h={getTranslate:function(e=(this.isHorizontal()?"x":"y")){const{params:t,rtlTranslate:n,translate:i,$wrapperEl:r}=this;if(t.virtualTranslate)return n?-i:i;let s=d.getTranslate(r[0],e);return n&&(s=-s),s||0},setTranslate:function(e,t){const n=this,{rtlTranslate:i,params:r,$wrapperEl:s,progress:o}=n;let a,l=0,d=0;n.isHorizontal()?l=i?-e:e:d=e,r.roundLengths&&(l=Math.floor(l),d=Math.floor(d)),r.virtualTranslate||(c.transforms3d?s.transform(`translate3d(${l}px, ${d}px, 0px)`):s.transform(`translate(${l}px, ${d}px)`)),n.previousTranslate=n.translate,n.translate=n.isHorizontal()?l:d;const u=n.maxTranslate()-n.minTranslate();(a=0===u?0:(e-n.minTranslate())/u)!==o&&n.updateProgress(e),n.emit("setTranslate",n.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]}};var f={setTransition:function(e,t){this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e=!0,t){const n=this,{activeIndex:i,params:r,previousIndex:s}=n;r.autoHeight&&n.updateAutoHeight();let o=t;if(o||(o=i>s?"next":i<s?"prev":"reset"),n.emit("transitionStart"),e&&i!==s){if("reset"===o)return void n.emit("slideResetTransitionStart");n.emit("slideChangeTransitionStart"),"next"===o?n.emit("slideNextTransitionStart"):n.emit("slidePrevTransitionStart")}},transitionEnd:function(e=!0,t){const n=this,{activeIndex:i,previousIndex:r}=n;n.animating=!1,n.setTransition(0);let s=t;if(s||(s=i>r?"next":i<r?"prev":"reset"),n.emit("transitionEnd"),e&&i!==r){if("reset"===s)return void n.emit("slideResetTransitionEnd");n.emit("slideChangeTransitionEnd"),"next"===s?n.emit("slideNextTransitionEnd"):n.emit("slidePrevTransitionEnd")}}};var m={slideTo:function(e=0,t=this.params.speed,n=!0,i){const r=this;let s=e;s<0&&(s=0);const{params:o,snapGrid:a,slidesGrid:l,previousIndex:d,activeIndex:u,rtlTranslate:p}=r;if(r.animating&&o.preventInteractionOnTransition)return!1;let h=Math.floor(s/o.slidesPerGroup);h>=a.length&&(h=a.length-1),(u||o.initialSlide||0)===(d||0)&&n&&r.emit("beforeSlideChangeStart");const f=-a[h];if(r.updateProgress(f),o.normalizeSlideIndex)for(let e=0;e<l.length;e+=1)-Math.floor(100*f)>=Math.floor(100*l[e])&&(s=e);if(r.initialized&&s!==u){if(!r.allowSlideNext&&f<r.translate&&f<r.minTranslate())return!1;if(!r.allowSlidePrev&&f>r.translate&&f>r.maxTranslate()&&(u||0)!==s)return!1}let m;return m=s>u?"next":s<u?"prev":"reset",p&&-f===r.translate||!p&&f===r.translate?(r.updateActiveIndex(s),o.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==o.effect&&r.setTranslate(f),"reset"!==m&&(r.transitionStart(n,m),r.transitionEnd(n,m)),!1):(0!==t&&c.transition?(r.setTransition(t),r.setTranslate(f),r.updateActiveIndex(s),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,i),r.transitionStart(n,m),r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(n,m))}),r.$wrapperEl[0].addEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd))):(r.setTransition(0),r.setTranslate(f),r.updateActiveIndex(s),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,i),r.transitionStart(n,m),r.transitionEnd(n,m)),!0)},slideToLoop:function(e=0,t=this.params.speed,n=!0,i){const r=this;let s=e;return r.params.loop&&(s+=r.loopedSlides),r.slideTo(s,t,n,i)},slideNext:function(e=this.params.speed,t=!0,n){const i=this,{params:r,animating:s}=i;return r.loop?!s&&(i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft,i.slideTo(i.activeIndex+r.slidesPerGroup,e,t,n)):i.slideTo(i.activeIndex+r.slidesPerGroup,e,t,n)},slidePrev:function(e=this.params.speed,t=!0,n){const i=this,{params:r,animating:s,snapGrid:o,slidesGrid:a,rtlTranslate:l}=i;if(r.loop){if(s)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}function d(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const c=d(l?i.translate:-i.translate),u=o.map(e=>d(e)),p=(a.map(e=>d(e)),o[u.indexOf(c)],o[u.indexOf(c)-1]);let h;return void 0!==p&&(h=a.indexOf(p))<0&&(h=i.activeIndex-1),i.slideTo(h,e,t,n)},slideReset:function(e=this.params.speed,t=!0,n){return this.slideTo(this.activeIndex,e,t,n)},slideToClosest:function(e=this.params.speed,t=!0,n){const i=this;let r=i.activeIndex;const s=Math.floor(r/i.params.slidesPerGroup);if(s<i.snapGrid.length-1){const e=i.rtlTranslate?i.translate:-i.translate,t=i.snapGrid[s];e-t>(i.snapGrid[s+1]-t)/2&&(r=i.params.slidesPerGroup)}return i.slideTo(r,e,t,n)},slideToClickedSlide:function(){const e=this,{params:t,$wrapperEl:n}=e,i="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let r,s=e.clickedIndex;if(t.loop){if(e.animating)return;r=parseInt(o(e.clickedSlide).attr("data-swiper-slide-index"),10),t.centeredSlides?s<e.loopedSlides-i/2||s>e.slides.length-e.loopedSlides+i/2?(e.loopFix(),s=n.children(`.${t.slideClass}[data-swiper-slide-index="${r}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),d.nextTick(()=>{e.slideTo(s)})):e.slideTo(s):s>e.slides.length-i?(e.loopFix(),s=n.children(`.${t.slideClass}[data-swiper-slide-index="${r}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),d.nextTick(()=>{e.slideTo(s)})):e.slideTo(s)}else e.slideTo(s)}};var g={loopCreate:function(){const e=this,{params:t,$wrapperEl:n}=e;n.children(`.${t.slideClass}.${t.slideDuplicateClass}`).remove();let r=n.children(`.${t.slideClass}`);if(t.loopFillGroupWithBlank){const e=t.slidesPerGroup-r.length%t.slidesPerGroup;if(e!==t.slidesPerGroup){for(let r=0;r<e;r+=1){const e=o(i.createElement("div")).addClass(`${t.slideClass} ${t.slideBlankClass}`);n.append(e)}r=n.children(`.${t.slideClass}`)}}"auto"!==t.slidesPerView||t.loopedSlides||(t.loopedSlides=r.length),e.loopedSlides=parseInt(t.loopedSlides||t.slidesPerView,10),e.loopedSlides+=t.loopAdditionalSlides,e.loopedSlides>r.length&&(e.loopedSlides=r.length);const s=[],a=[];r.each((t,n)=>{const i=o(n);t<e.loopedSlides&&a.push(n),t<r.length&&t>=r.length-e.loopedSlides&&s.push(n),i.attr("data-swiper-slide-index",t)});for(let e=0;e<a.length;e+=1)n.append(o(a[e].cloneNode(!0)).addClass(t.slideDuplicateClass));for(let e=s.length-1;e>=0;e-=1)n.prepend(o(s[e].cloneNode(!0)).addClass(t.slideDuplicateClass))},loopFix:function(){const e=this,{params:t,activeIndex:n,slides:i,loopedSlides:r,allowSlidePrev:s,allowSlideNext:o,snapGrid:a,rtlTranslate:l}=e;let d;e.allowSlidePrev=!0,e.allowSlideNext=!0;const c=-a[n]-e.getTranslate();n<r?(d=i.length-3*r+n,d+=r,e.slideTo(d,0,!1,!0)&&0!==c&&e.setTranslate((l?-e.translate:e.translate)-c)):("auto"===t.slidesPerView&&n>=2*r||n>=i.length-r)&&(d=-i.length+n+r,d+=r,e.slideTo(d,0,!1,!0)&&0!==c&&e.setTranslate((l?-e.translate:e.translate)-c));e.allowSlidePrev=s,e.allowSlideNext=o},loopDestroy:function(){const{$wrapperEl:e,params:t,slides:n}=this;e.children(`.${t.slideClass}.${t.slideDuplicateClass}`).remove(),n.removeAttr("data-swiper-slide-index")}};var v={setGrabCursor:function(e){if(c.touch||!this.params.simulateTouch||this.params.watchOverflow&&this.isLocked)return;const t=this.el;t.style.cursor="move",t.style.cursor=e?"-webkit-grabbing":"-webkit-grab",t.style.cursor=e?"-moz-grabbin":"-moz-grab",t.style.cursor=e?"grabbing":"grab"},unsetGrabCursor:function(){c.touch||this.params.watchOverflow&&this.isLocked||(this.el.style.cursor="")}};var y={appendSlide:function(e){const t=this,{$wrapperEl:n,params:i}=t;if(i.loop&&t.loopDestroy(),"object"==typeof e&&"length"in e)for(let t=0;t<e.length;t+=1)e[t]&&n.append(e[t]);else n.append(e);i.loop&&t.loopCreate(),i.observer&&c.observer||t.update()},prependSlide:function(e){const t=this,{params:n,$wrapperEl:i,activeIndex:r}=t;n.loop&&t.loopDestroy();let s=r+1;if("object"==typeof e&&"length"in e){for(let t=0;t<e.length;t+=1)e[t]&&i.prepend(e[t]);s=r+e.length}else i.prepend(e);n.loop&&t.loopCreate(),n.observer&&c.observer||t.update(),t.slideTo(s,0,!1)},addSlide:function(e,t){const n=this,{$wrapperEl:i,params:r,activeIndex:s}=n;let o=s;r.loop&&(o-=n.loopedSlides,n.loopDestroy(),n.slides=i.children(`.${r.slideClass}`));const a=n.slides.length;if(e<=0)return void n.prependSlide(t);if(e>=a)return void n.appendSlide(t);let l=o>e?o+1:o;const d=[];for(let t=a-1;t>=e;t-=1){const e=n.slides.eq(t);e.remove(),d.unshift(e)}if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)t[e]&&i.append(t[e]);l=o>e?o+t.length:o}else i.append(t);for(let e=0;e<d.length;e+=1)i.append(d[e]);r.loop&&n.loopCreate(),r.observer&&c.observer||n.update(),r.loop?n.slideTo(l+n.loopedSlides,0,!1):n.slideTo(l,0,!1)},removeSlide:function(e){const t=this,{params:n,$wrapperEl:i,activeIndex:r}=t;let s=r;n.loop&&(s-=t.loopedSlides,t.loopDestroy(),t.slides=i.children(`.${n.slideClass}`));let o,a=s;if("object"==typeof e&&"length"in e){for(let n=0;n<e.length;n+=1)o=e[n],t.slides[o]&&t.slides.eq(o).remove(),o<a&&(a-=1);a=Math.max(a,0)}else o=e,t.slides[o]&&t.slides.eq(o).remove(),o<a&&(a-=1),a=Math.max(a,0);n.loop&&t.loopCreate(),n.observer&&c.observer||t.update(),n.loop?t.slideTo(a+t.loopedSlides,0,!1):t.slideTo(a,0,!1)},removeAllSlides:function(){const e=this,t=[];for(let n=0;n<e.slides.length;n+=1)t.push(n);e.removeSlide(t)}};const b=function(){const e=r.navigator.userAgent,t={ios:!1,android:!1,androidChrome:!1,desktop:!1,windows:!1,iphone:!1,ipod:!1,ipad:!1,cordova:r.cordova||r.phonegap,phonegap:r.cordova||r.phonegap},n=e.match(/(Windows Phone);?[\s\/]+([\d.]+)?/),s=e.match(/(Android);?[\s\/]+([\d.]+)?/),o=e.match(/(iPad).*OS\s([\d_]+)/),a=e.match(/(iPod)(.*OS\s([\d_]+))?/),l=!o&&e.match(/(iPhone\sOS|iOS)\s([\d_]+)/);if(n&&(t.os="windows",t.osVersion=n[2],t.windows=!0),s&&!n&&(t.os="android",t.osVersion=s[2],t.android=!0,t.androidChrome=e.toLowerCase().indexOf("chrome")>=0),(o||l||a)&&(t.os="ios",t.ios=!0),l&&!a&&(t.osVersion=l[2].replace(/_/g,"."),t.iphone=!0),o&&(t.osVersion=o[2].replace(/_/g,"."),t.ipad=!0),a&&(t.osVersion=a[3]?a[3].replace(/_/g,"."):null,t.iphone=!0),t.ios&&t.osVersion&&e.indexOf("Version/")>=0&&"10"===t.osVersion.split(".")[0]&&(t.osVersion=e.toLowerCase().split("version/")[1].split(" ")[0]),t.desktop=!(t.os||t.android||t.webView),t.webView=(l||o||a)&&e.match(/.*AppleWebKit(?!.*Safari)/i),t.os&&"ios"===t.os){const e=t.osVersion.split("."),n=i.querySelector('meta[name="viewport"]');t.minimalUi=!t.webView&&(a||l)&&(1*e[0]==7?1*e[1]>=1:1*e[0]>7)&&n&&n.getAttribute("content").indexOf("minimal-ui")>=0}return t.pixelRatio=r.devicePixelRatio||1,t}();function w(){const e=this,{params:t,el:n}=e;if(n&&0===n.offsetWidth)return;t.breakpoints&&e.setBreakpoint();const{allowSlideNext:i,allowSlidePrev:r,snapGrid:s}=e;if(e.allowSlideNext=!0,e.allowSlidePrev=!0,e.updateSize(),e.updateSlides(),t.freeMode){const n=Math.min(Math.max(e.translate,e.maxTranslate()),e.minTranslate());e.setTranslate(n),e.updateActiveIndex(),e.updateSlidesClasses(),t.autoHeight&&e.updateAutoHeight()}else e.updateSlidesClasses(),("auto"===t.slidesPerView||t.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0);e.allowSlidePrev=r,e.allowSlideNext=i,e.params.watchOverflow&&s!==e.snapGrid&&e.checkOverflow()}var E={attachEvents:function(){const e=this,{params:t,touchEvents:n,el:s,wrapperEl:a}=e;e.onTouchStart=function(e){const t=this,n=t.touchEventsData,{params:s,touches:a}=t;if(t.animating&&s.preventInteractionOnTransition)return;let l=e;if(l.originalEvent&&(l=l.originalEvent),n.isTouchEvent="touchstart"===l.type,!n.isTouchEvent&&"which"in l&&3===l.which)return;if(n.isTouched&&n.isMoved)return;if(s.noSwiping&&o(l.target).closest(s.noSwipingSelector?s.noSwipingSelector:`.${s.noSwipingClass}`)[0])return void(t.allowClick=!0);if(s.swipeHandler&&!o(l).closest(s.swipeHandler)[0])return;a.currentX="touchstart"===l.type?l.targetTouches[0].pageX:l.pageX,a.currentY="touchstart"===l.type?l.targetTouches[0].pageY:l.pageY;const c=a.currentX,u=a.currentY,p=s.edgeSwipeDetection||s.iOSEdgeSwipeDetection,h=s.edgeSwipeThreshold||s.iOSEdgeSwipeThreshold;if(!p||!(c<=h||c>=r.screen.width-h)){if(d.extend(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),a.startX=c,a.startY=u,n.touchStartTime=d.now(),t.allowClick=!0,t.updateSize(),t.swipeDirection=void 0,s.threshold>0&&(n.allowThresholdMove=!1),"touchstart"!==l.type){let e=!0;o(l.target).is(n.formElements)&&(e=!1),i.activeElement&&o(i.activeElement).is(n.formElements)&&i.activeElement!==l.target&&i.activeElement.blur(),e&&t.allowTouchMove&&l.preventDefault()}t.emit("touchStart",l)}}.bind(e),e.onTouchMove=function(e){const t=this,n=t.touchEventsData,{params:r,touches:s,rtlTranslate:a}=t;let l=e;if(l.originalEvent&&(l=l.originalEvent),!n.isTouched)return void(n.startMoving&&n.isScrolling&&t.emit("touchMoveOpposite",l));if(n.isTouchEvent&&"mousemove"===l.type)return;const c="touchmove"===l.type?l.targetTouches[0].pageX:l.pageX,u="touchmove"===l.type?l.targetTouches[0].pageY:l.pageY;if(l.preventedByNestedSwiper)return s.startX=c,void(s.startY=u);if(!t.allowTouchMove)return t.allowClick=!1,void(n.isTouched&&(d.extend(s,{startX:c,startY:u,currentX:c,currentY:u}),n.touchStartTime=d.now()));if(n.isTouchEvent&&r.touchReleaseOnEdges&&!r.loop)if(t.isVertical()){if(u<s.startY&&t.translate<=t.maxTranslate()||u>s.startY&&t.translate>=t.minTranslate())return n.isTouched=!1,void(n.isMoved=!1)}else if(c<s.startX&&t.translate<=t.maxTranslate()||c>s.startX&&t.translate>=t.minTranslate())return;if(n.isTouchEvent&&i.activeElement&&l.target===i.activeElement&&o(l.target).is(n.formElements))return n.isMoved=!0,void(t.allowClick=!1);if(n.allowTouchCallbacks&&t.emit("touchMove",l),l.targetTouches&&l.targetTouches.length>1)return;s.currentX=c,s.currentY=u;const p=s.currentX-s.startX,h=s.currentY-s.startY;if(t.params.threshold&&Math.sqrt(p**2+h**2)<t.params.threshold)return;if(void 0===n.isScrolling){let e;t.isHorizontal()&&s.currentY===s.startY||t.isVertical()&&s.currentX===s.startX?n.isScrolling=!1:p*p+h*h>=25&&(e=180*Math.atan2(Math.abs(h),Math.abs(p))/Math.PI,n.isScrolling=t.isHorizontal()?e>r.touchAngle:90-e>r.touchAngle)}if(n.isScrolling&&t.emit("touchMoveOpposite",l),void 0===n.startMoving&&(s.currentX===s.startX&&s.currentY===s.startY||(n.startMoving=!0)),n.isScrolling)return void(n.isTouched=!1);if(!n.startMoving)return;t.allowClick=!1,l.preventDefault(),r.touchMoveStopPropagation&&!r.nested&&l.stopPropagation(),n.isMoved||(r.loop&&t.loopFix(),n.startTranslate=t.getTranslate(),t.setTransition(0),t.animating&&t.$wrapperEl.trigger("webkitTransitionEnd transitionend"),n.allowMomentumBounce=!1,!r.grabCursor||!0!==t.allowSlideNext&&!0!==t.allowSlidePrev||t.setGrabCursor(!0),t.emit("sliderFirstMove",l)),t.emit("sliderMove",l),n.isMoved=!0;let f=t.isHorizontal()?p:h;s.diff=f,f*=r.touchRatio,a&&(f=-f),t.swipeDirection=f>0?"prev":"next",n.currentTranslate=f+n.startTranslate;let m=!0,g=r.resistanceRatio;if(r.touchReleaseOnEdges&&(g=0),f>0&&n.currentTranslate>t.minTranslate()?(m=!1,r.resistance&&(n.currentTranslate=t.minTranslate()-1+(-t.minTranslate()+n.startTranslate+f)**g)):f<0&&n.currentTranslate<t.maxTranslate()&&(m=!1,r.resistance&&(n.currentTranslate=t.maxTranslate()+1-(t.maxTranslate()-n.startTranslate-f)**g)),m&&(l.preventedByNestedSwiper=!0),!t.allowSlideNext&&"next"===t.swipeDirection&&n.currentTranslate<n.startTranslate&&(n.currentTranslate=n.startTranslate),!t.allowSlidePrev&&"prev"===t.swipeDirection&&n.currentTranslate>n.startTranslate&&(n.currentTranslate=n.startTranslate),r.threshold>0){if(!(Math.abs(f)>r.threshold||n.allowThresholdMove))return void(n.currentTranslate=n.startTranslate);if(!n.allowThresholdMove)return n.allowThresholdMove=!0,s.startX=s.currentX,s.startY=s.currentY,n.currentTranslate=n.startTranslate,void(s.diff=t.isHorizontal()?s.currentX-s.startX:s.currentY-s.startY)}r.followFinger&&((r.freeMode||r.watchSlidesProgress||r.watchSlidesVisibility)&&(t.updateActiveIndex(),t.updateSlidesClasses()),r.freeMode&&(0===n.velocities.length&&n.velocities.push({position:s[t.isHorizontal()?"startX":"startY"],time:n.touchStartTime}),n.velocities.push({position:s[t.isHorizontal()?"currentX":"currentY"],time:d.now()})),t.updateProgress(n.currentTranslate),t.setTranslate(n.currentTranslate))}.bind(e),e.onTouchEnd=function(e){const t=this,n=t.touchEventsData,{params:i,touches:r,rtlTranslate:s,$wrapperEl:o,slidesGrid:a,snapGrid:l}=t;let c=e;if(c.originalEvent&&(c=c.originalEvent),n.allowTouchCallbacks&&t.emit("touchEnd",c),n.allowTouchCallbacks=!1,!n.isTouched)return n.isMoved&&i.grabCursor&&t.setGrabCursor(!1),n.isMoved=!1,void(n.startMoving=!1);i.grabCursor&&n.isMoved&&n.isTouched&&(!0===t.allowSlideNext||!0===t.allowSlidePrev)&&t.setGrabCursor(!1);const u=d.now(),p=u-n.touchStartTime;if(t.allowClick&&(t.updateClickedSlide(c),t.emit("tap",c),p<300&&u-n.lastClickTime>300&&(n.clickTimeout&&clearTimeout(n.clickTimeout),n.clickTimeout=d.nextTick(()=>{t&&!t.destroyed&&t.emit("click",c)},300)),p<300&&u-n.lastClickTime<300&&(n.clickTimeout&&clearTimeout(n.clickTimeout),t.emit("doubleTap",c))),n.lastClickTime=d.now(),d.nextTick(()=>{t.destroyed||(t.allowClick=!0)}),!n.isTouched||!n.isMoved||!t.swipeDirection||0===r.diff||n.currentTranslate===n.startTranslate)return n.isTouched=!1,n.isMoved=!1,void(n.startMoving=!1);let h;if(n.isTouched=!1,n.isMoved=!1,n.startMoving=!1,h=i.followFinger?s?t.translate:-t.translate:-n.currentTranslate,i.freeMode){if(h<-t.minTranslate())return void t.slideTo(t.activeIndex);if(h>-t.maxTranslate())return void(t.slides.length<l.length?t.slideTo(l.length-1):t.slideTo(t.slides.length-1));if(i.freeModeMomentum){if(n.velocities.length>1){const e=n.velocities.pop(),r=n.velocities.pop(),s=e.position-r.position,o=e.time-r.time;t.velocity=s/o,t.velocity/=2,Math.abs(t.velocity)<i.freeModeMinimumVelocity&&(t.velocity=0),(o>150||d.now()-e.time>300)&&(t.velocity=0)}else t.velocity=0;t.velocity*=i.freeModeMomentumVelocityRatio,n.velocities.length=0;let e=1e3*i.freeModeMomentumRatio;const r=t.velocity*e;let a=t.translate+r;s&&(a=-a);let c,u=!1;const p=20*Math.abs(t.velocity)*i.freeModeMomentumBounceRatio;let h;if(a<t.maxTranslate())i.freeModeMomentumBounce?(a+t.maxTranslate()<-p&&(a=t.maxTranslate()-p),c=t.maxTranslate(),u=!0,n.allowMomentumBounce=!0):a=t.maxTranslate(),i.loop&&i.centeredSlides&&(h=!0);else if(a>t.minTranslate())i.freeModeMomentumBounce?(a-t.minTranslate()>p&&(a=t.minTranslate()+p),c=t.minTranslate(),u=!0,n.allowMomentumBounce=!0):a=t.minTranslate(),i.loop&&i.centeredSlides&&(h=!0);else if(i.freeModeSticky){let e;for(let t=0;t<l.length;t+=1)if(l[t]>-a){e=t;break}a=-(a=Math.abs(l[e]-a)<Math.abs(l[e-1]-a)||"next"===t.swipeDirection?l[e]:l[e-1])}if(h&&t.once("transitionEnd",()=>{t.loopFix()}),0!==t.velocity)e=s?Math.abs((-a-t.translate)/t.velocity):Math.abs((a-t.translate)/t.velocity);else if(i.freeModeSticky)return void t.slideToClosest();i.freeModeMomentumBounce&&u?(t.updateProgress(c),t.setTransition(e),t.setTranslate(a),t.transitionStart(!0,t.swipeDirection),t.animating=!0,o.transitionEnd(()=>{t&&!t.destroyed&&n.allowMomentumBounce&&(t.emit("momentumBounce"),t.setTransition(i.speed),t.setTranslate(c),o.transitionEnd(()=>{t&&!t.destroyed&&t.transitionEnd()}))})):t.velocity?(t.updateProgress(a),t.setTransition(e),t.setTranslate(a),t.transitionStart(!0,t.swipeDirection),t.animating||(t.animating=!0,o.transitionEnd(()=>{t&&!t.destroyed&&t.transitionEnd()}))):t.updateProgress(a),t.updateActiveIndex(),t.updateSlidesClasses()}else if(i.freeModeSticky)return void t.slideToClosest();return void((!i.freeModeMomentum||p>=i.longSwipesMs)&&(t.updateProgress(),t.updateActiveIndex(),t.updateSlidesClasses()))}let f=0,m=t.slidesSizesGrid[0];for(let e=0;e<a.length;e+=i.slidesPerGroup)void 0!==a[e+i.slidesPerGroup]?h>=a[e]&&h<a[e+i.slidesPerGroup]&&(f=e,m=a[e+i.slidesPerGroup]-a[e]):h>=a[e]&&(f=e,m=a[a.length-1]-a[a.length-2]);const g=(h-a[f])/m;if(p>i.longSwipesMs){if(!i.longSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&(g>=i.longSwipesRatio?t.slideTo(f+i.slidesPerGroup):t.slideTo(f)),"prev"===t.swipeDirection&&(g>1-i.longSwipesRatio?t.slideTo(f+i.slidesPerGroup):t.slideTo(f))}else{if(!i.shortSwipes)return void t.slideTo(t.activeIndex);"next"===t.swipeDirection&&t.slideTo(f+i.slidesPerGroup),"prev"===t.swipeDirection&&t.slideTo(f)}}.bind(e),e.onClick=function(e){const t=this;t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation()))}.bind(e);const l="container"===t.touchEventsTarget?s:a,u=!!t.nested;if(c.touch||!c.pointerEvents&&!c.prefixedPointerEvents){if(c.touch){const i=!("touchstart"!==n.start||!c.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};l.addEventListener(n.start,e.onTouchStart,i),l.addEventListener(n.move,e.onTouchMove,c.passiveListener?{passive:!1,capture:u}:u),l.addEventListener(n.end,e.onTouchEnd,i)}(t.simulateTouch&&!b.ios&&!b.android||t.simulateTouch&&!c.touch&&b.ios)&&(l.addEventListener("mousedown",e.onTouchStart,!1),i.addEventListener("mousemove",e.onTouchMove,u),i.addEventListener("mouseup",e.onTouchEnd,!1))}else l.addEventListener(n.start,e.onTouchStart,!1),i.addEventListener(n.move,e.onTouchMove,u),i.addEventListener(n.end,e.onTouchEnd,!1);(t.preventClicks||t.preventClicksPropagation)&&l.addEventListener("click",e.onClick,!0),e.on(b.ios||b.android?"resize orientationchange observerUpdate":"resize observerUpdate",w,!0)},detachEvents:function(){const e=this,{params:t,touchEvents:n,el:r,wrapperEl:s}=e,o="container"===t.touchEventsTarget?r:s,a=!!t.nested;if(c.touch||!c.pointerEvents&&!c.prefixedPointerEvents){if(c.touch){const i=!("onTouchStart"!==n.start||!c.passiveListener||!t.passiveListeners)&&{passive:!0,capture:!1};o.removeEventListener(n.start,e.onTouchStart,i),o.removeEventListener(n.move,e.onTouchMove,a),o.removeEventListener(n.end,e.onTouchEnd,i)}(t.simulateTouch&&!b.ios&&!b.android||t.simulateTouch&&!c.touch&&b.ios)&&(o.removeEventListener("mousedown",e.onTouchStart,!1),i.removeEventListener("mousemove",e.onTouchMove,a),i.removeEventListener("mouseup",e.onTouchEnd,!1))}else o.removeEventListener(n.start,e.onTouchStart,!1),i.removeEventListener(n.move,e.onTouchMove,a),i.removeEventListener(n.end,e.onTouchEnd,!1);(t.preventClicks||t.preventClicksPropagation)&&o.removeEventListener("click",e.onClick,!0),e.off(b.ios||b.android?"resize orientationchange observerUpdate":"resize observerUpdate",w)}};var x={setBreakpoint:function(){const e=this,{activeIndex:t,initialized:n,loopedSlides:i=0,params:r}=e,s=r.breakpoints;if(!s||s&&0===Object.keys(s).length)return;const o=e.getBreakpoint(s);if(o&&e.currentBreakpoint!==o){const a=o in s?s[o]:e.originalParams,l=r.loop&&a.slidesPerView!==r.slidesPerView;d.extend(e.params,a),d.extend(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),e.currentBreakpoint=o,l&&n&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-i+e.loopedSlides,0,!1)),e.emit("breakpoint",a)}},getBreakpoint:function(e){if(!e)return;let t=!1;const n=[];Object.keys(e).forEach(e=>{n.push(e)}),n.sort((e,t)=>parseInt(e,10)-parseInt(t,10));for(let e=0;e<n.length;e+=1){const i=n[e];i>=r.innerWidth&&!t&&(t=i)}return t||"max"}};const T=function(){return{isIE:!!r.navigator.userAgent.match(/Trident/g)||!!r.navigator.userAgent.match(/MSIE/g),isSafari:function(){const e=r.navigator.userAgent.toLowerCase();return e.indexOf("safari")>=0&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isUiWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(r.navigator.userAgent)}}();var S={init:!0,direction:"horizontal",touchEventsTarget:"container",initialSlide:0,speed:300,preventInteractionOnTransition:!1,edgeSwipeDetection:!1,edgeSwipeThreshold:20,freeMode:!1,freeModeMomentum:!0,freeModeMomentumRatio:1,freeModeMomentumBounce:!0,freeModeMomentumBounceRatio:1,freeModeMomentumVelocityRatio:1,freeModeSticky:!1,freeModeMinimumVelocity:.02,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,spaceBetween:0,slidesPerView:1,slidesPerColumn:1,slidesPerColumnFill:"column",slidesPerGroup:1,centeredSlides:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,watchOverflow:!1,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!0,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,watchSlidesVisibility:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,containerModifierClass:"swiper-container-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0};const C={update:p,translate:h,transition:f,slide:m,loop:g,grabCursor:v,manipulation:y,events:E,breakpoints:x,checkOverflow:{checkOverflow:function(){const e=this,t=e.isLocked;e.isLocked=1===e.snapGrid.length,e.allowSlideNext=!e.isLocked,e.allowSlidePrev=!e.isLocked,t!==e.isLocked&&e.emit(e.isLocked?"lock":"unlock"),t&&t!==e.isLocked&&(e.isEnd=!1,e.navigation.update())}},classes:{addClasses:function(){const{classNames:e,params:t,rtl:n,$el:i}=this,r=[];r.push(t.direction),t.freeMode&&r.push("free-mode"),c.flexbox||r.push("no-flexbox"),t.autoHeight&&r.push("autoheight"),n&&r.push("rtl"),t.slidesPerColumn>1&&r.push("multirow"),b.android&&r.push("android"),b.ios&&r.push("ios"),T.isIE&&(c.pointerEvents||c.prefixedPointerEvents)&&r.push(`wp8-${t.direction}`),r.forEach(n=>{e.push(t.containerModifierClass+n)}),i.addClass(e.join(" "))},removeClasses:function(){const{$el:e,classNames:t}=this;e.removeClass(t.join(" "))}},images:{loadImage:function(e,t,n,i,s,o){let a;function l(){o&&o()}e.complete&&s?l():t?((a=new r.Image).onload=l,a.onerror=l,i&&(a.sizes=i),n&&(a.srcset=n),t&&(a.src=t)):l()},preloadImages:function(){const e=this;function t(){void 0!==e&&null!==e&&e&&!e.destroyed&&(void 0!==e.imagesLoaded&&(e.imagesLoaded+=1),e.imagesLoaded===e.imagesToLoad.length&&(e.params.updateOnImagesReady&&e.update(),e.emit("imagesReady")))}e.imagesToLoad=e.$el.find("img");for(let n=0;n<e.imagesToLoad.length;n+=1){const i=e.imagesToLoad[n];e.loadImage(i,i.currentSrc||i.getAttribute("src"),i.srcset||i.getAttribute("srcset"),i.sizes||i.getAttribute("sizes"),!0,t)}}}},k={};class P extends u{constructor(...e){let t,n;1===e.length&&e[0].constructor&&e[0].constructor===Object?n=e[0]:[t,n]=e,n||(n={}),n=d.extend({},n),t&&!n.el&&(n.el=t),super(n),Object.keys(C).forEach(e=>{Object.keys(C[e]).forEach(t=>{P.prototype[t]||(P.prototype[t]=C[e][t])})});const i=this;void 0===i.modules&&(i.modules={}),Object.keys(i.modules).forEach(e=>{const t=i.modules[e];if(t.params){const e=Object.keys(t.params)[0],i=t.params[e];if("object"!=typeof i)return;if(!(e in n&&"enabled"in i))return;!0===n[e]&&(n[e]={enabled:!0}),"object"!=typeof n[e]||"enabled"in n[e]||(n[e].enabled=!0),n[e]||(n[e]={enabled:!1})}});const r=d.extend({},S);i.useModulesParams(r),i.params=d.extend({},r,k,n),i.originalParams=d.extend({},i.params),i.passedParams=d.extend({},n),i.$=o;const s=o(i.params.el);if(!(t=s[0]))return;if(s.length>1){const e=[];return s.each((t,i)=>{const r=d.extend({},n,{el:i});e.push(new P(r))}),e}t.swiper=i,s.data("swiper",i);const a=s.children(`.${i.params.wrapperClass}`);return d.extend(i,{$el:s,el:t,$wrapperEl:a,wrapperEl:a[0],classNames:[],slides:o(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal:()=>"horizontal"===i.params.direction,isVertical:()=>"vertical"===i.params.direction,rtl:"rtl"===t.dir.toLowerCase()||"rtl"===s.css("direction"),rtlTranslate:"horizontal"===i.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===s.css("direction")),wrongRTL:"-webkit-box"===a.css("display"),activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:i.params.allowSlideNext,allowSlidePrev:i.params.allowSlidePrev,touchEvents:function(){const e=["touchstart","touchmove","touchend"];let t=["mousedown","mousemove","mouseup"];return c.pointerEvents?t=["pointerdown","pointermove","pointerup"]:c.prefixedPointerEvents&&(t=["MSPointerDown","MSPointerMove","MSPointerUp"]),i.touchEventsTouch={start:e[0],move:e[1],end:e[2]},i.touchEventsDesktop={start:t[0],move:t[1],end:t[2]},c.touch||!i.params.simulateTouch?i.touchEventsTouch:i.touchEventsDesktop}(),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,formElements:"input, select, option, textarea, button, video",lastClickTime:d.now(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:i.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),i.useModules(),i.params.init&&i.init(),i}slidesPerViewDynamic(){const{params:e,slides:t,slidesGrid:n,size:i,activeIndex:r}=this;let s=1;if(e.centeredSlides){let e,n=t[r].swiperSlideSize;for(let o=r+1;o<t.length;o+=1)t[o]&&!e&&(s+=1,(n+=t[o].swiperSlideSize)>i&&(e=!0));for(let o=r-1;o>=0;o-=1)t[o]&&!e&&(s+=1,(n+=t[o].swiperSlideSize)>i&&(e=!0))}else for(let e=r+1;e<t.length;e+=1)n[e]-n[r]<i&&(s+=1);return s}update(){const e=this;if(!e||e.destroyed)return;const{snapGrid:t,params:n}=e;function i(){const t=e.rtlTranslate?-1*e.translate:e.translate,n=Math.min(Math.max(t,e.maxTranslate()),e.minTranslate());e.setTranslate(n),e.updateActiveIndex(),e.updateSlidesClasses()}let r;n.breakpoints&&e.setBreakpoint(),e.updateSize(),e.updateSlides(),e.updateProgress(),e.updateSlidesClasses(),e.params.freeMode?(i(),e.params.autoHeight&&e.updateAutoHeight()):(r=("auto"===e.params.slidesPerView||e.params.slidesPerView>1)&&e.isEnd&&!e.params.centeredSlides?e.slideTo(e.slides.length-1,0,!1,!0):e.slideTo(e.activeIndex,0,!1,!0))||i(),n.watchOverflow&&t!==e.snapGrid&&e.checkOverflow(),e.emit("update")}init(){const e=this;e.initialized||(e.emit("beforeInit"),e.params.breakpoints&&e.setBreakpoint(),e.addClasses(),e.params.loop&&e.loopCreate(),e.updateSize(),e.updateSlides(),e.params.watchOverflow&&e.checkOverflow(),e.params.grabCursor&&e.setGrabCursor(),e.params.preloadImages&&e.preloadImages(),e.params.loop?e.slideTo(e.params.initialSlide+e.loopedSlides,0,e.params.runCallbacksOnInit):e.slideTo(e.params.initialSlide,0,e.params.runCallbacksOnInit),e.attachEvents(),e.initialized=!0,e.emit("init"))}destroy(e=!0,t=!0){const n=this,{params:i,$el:r,$wrapperEl:s,slides:o}=n;return void 0===n.params||n.destroyed?null:(n.emit("beforeDestroy"),n.initialized=!1,n.detachEvents(),i.loop&&n.loopDestroy(),t&&(n.removeClasses(),r.removeAttr("style"),s.removeAttr("style"),o&&o.length&&o.removeClass([i.slideVisibleClass,i.slideActiveClass,i.slideNextClass,i.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index").removeAttr("data-swiper-column").removeAttr("data-swiper-row")),n.emit("destroy"),Object.keys(n.eventsListeners).forEach(e=>{n.off(e)}),!1!==e&&(n.$el[0].swiper=null,n.$el.data("swiper",null),d.deleteProps(n)),n.destroyed=!0,null)}static extendDefaults(e){d.extend(k,e)}static get extendedDefaults(){return k}static get defaults(){return S}static get Class(){return u}static get $(){return o}}var $={name:"device",proto:{device:b},static:{device:b}},A={name:"support",proto:{support:c},static:{support:c}},_={name:"browser",proto:{browser:T},static:{browser:T}},L={name:"resize",create(){const e=this;d.extend(e,{resize:{resizeHandler(){e&&!e.destroyed&&e.initialized&&(e.emit("beforeResize"),e.emit("resize"))},orientationChangeHandler(){e&&!e.destroyed&&e.initialized&&e.emit("orientationchange")}}})},on:{init(){r.addEventListener("resize",this.resize.resizeHandler),r.addEventListener("orientationchange",this.resize.orientationChangeHandler)},destroy(){r.removeEventListener("resize",this.resize.resizeHandler),r.removeEventListener("orientationchange",this.resize.orientationChangeHandler)}}};const M={func:r.MutationObserver||r.WebkitMutationObserver,attach(e,t={}){const n=this,i=new(0,M.func)(e=>{if(1===e.length)return void n.emit("observerUpdate",e[0]);const t=function(){n.emit("observerUpdate",e[0])};r.requestAnimationFrame?r.requestAnimationFrame(t):r.setTimeout(t,0)});i.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),n.observer.observers.push(i)},init(){const e=this;if(c.observer&&e.params.observer){if(e.params.observeParents){const t=e.$el.parents();for(let n=0;n<t.length;n+=1)e.observer.attach(t[n])}e.observer.attach(e.$el[0],{childList:!1}),e.observer.attach(e.$wrapperEl[0],{attributes:!1})}},destroy(){this.observer.observers.forEach(e=>{e.disconnect()}),this.observer.observers=[]}};var N={name:"observer",params:{observer:!1,observeParents:!1},create(){d.extend(this,{observer:{init:M.init.bind(this),attach:M.attach.bind(this),destroy:M.destroy.bind(this),observers:[]}})},on:{init(){this.observer.init()},destroy(){this.observer.destroy()}}};const D={update(e){const t=this,{slidesPerView:n,slidesPerGroup:i,centeredSlides:r}=t.params,{from:s,to:o,slides:a,slidesGrid:l,renderSlide:c,offset:u}=t.virtual;t.updateActiveIndex();const p=t.activeIndex||0;let h,f,m;h=t.rtlTranslate?"right":t.isHorizontal()?"left":"top",r?(f=Math.floor(n/2)+i,m=Math.floor(n/2)+i):(f=n+(i-1),m=i);const g=Math.max((p||0)-m,0),v=Math.min((p||0)+f,a.length-1),y=(t.slidesGrid[g]||0)-(t.slidesGrid[0]||0);function b(){t.updateSlides(),t.updateProgress(),t.updateSlidesClasses(),t.lazy&&t.params.lazy.enabled&&t.lazy.load()}if(d.extend(t.virtual,{from:g,to:v,offset:y,slidesGrid:t.slidesGrid}),s===g&&o===v&&!e)return t.slidesGrid!==l&&y!==u&&t.slides.css(h,`${y}px`),void t.updateProgress();if(t.params.virtual.renderExternal)return t.params.virtual.renderExternal.call(t,{offset:y,from:g,to:v,slides:function(){const e=[];for(let t=g;t<=v;t+=1)e.push(a[t]);return e}()}),void b();const w=[],E=[];if(e)t.$wrapperEl.find(`.${t.params.slideClass}`).remove();else for(let e=s;e<=o;e+=1)(e<g||e>v)&&t.$wrapperEl.find(`.${t.params.slideClass}[data-swiper-slide-index="${e}"]`).remove();for(let t=0;t<a.length;t+=1)t>=g&&t<=v&&(void 0===o||e?E.push(t):(t>o&&E.push(t),t<s&&w.push(t)));E.forEach(e=>{t.$wrapperEl.append(c(a[e],e))}),w.sort((e,t)=>e<t).forEach(e=>{t.$wrapperEl.prepend(c(a[e],e))}),t.$wrapperEl.children(".swiper-slide").css(h,`${y}px`),b()},renderSlide(e,t){const n=this,i=n.params.virtual;if(i.cache&&n.virtual.cache[t])return n.virtual.cache[t];const r=i.renderSlide?o(i.renderSlide.call(n,e,t)):o(`<div class="${n.params.slideClass}" data-swiper-slide-index="${t}">${e}</div>`);return r.attr("data-swiper-slide-index")||r.attr("data-swiper-slide-index",t),i.cache&&(n.virtual.cache[t]=r),r},appendSlide(e){this.virtual.slides.push(e),this.virtual.update(!0)},prependSlide(e){const t=this;if(t.virtual.slides.unshift(e),t.params.virtual.cache){const e=t.virtual.cache,n={};Object.keys(e).forEach(t=>{n[t+1]=e[t]}),t.virtual.cache=n}t.virtual.update(!0),t.slideNext(0)}};var I={name:"virtual",params:{virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null}},create(){d.extend(this,{virtual:{update:D.update.bind(this),appendSlide:D.appendSlide.bind(this),prependSlide:D.prependSlide.bind(this),renderSlide:D.renderSlide.bind(this),slides:this.params.virtual.slides,cache:{}}})},on:{beforeInit(){if(!this.params.virtual.enabled)return;this.classNames.push(`${this.params.containerModifierClass}virtual`);const e={watchSlidesProgress:!0};d.extend(this.params,e),d.extend(this.originalParams,e),this.virtual.update()},setTranslate(){this.params.virtual.enabled&&this.virtual.update()}}};const O={handle(e){const t=this,{rtlTranslate:n}=t;let s=e;s.originalEvent&&(s=s.originalEvent);const o=s.keyCode||s.charCode;if(!t.allowSlideNext&&(t.isHorizontal()&&39===o||t.isVertical()&&40===o))return!1;if(!t.allowSlidePrev&&(t.isHorizontal()&&37===o||t.isVertical()&&38===o))return!1;if(!(s.shiftKey||s.altKey||s.ctrlKey||s.metaKey||i.activeElement&&i.activeElement.nodeName&&("input"===i.activeElement.nodeName.toLowerCase()||"textarea"===i.activeElement.nodeName.toLowerCase()))){if(t.params.keyboard.onlyInViewport&&(37===o||39===o||38===o||40===o)){let e=!1;if(t.$el.parents(`.${t.params.slideClass}`).length>0&&0===t.$el.parents(`.${t.params.slideActiveClass}`).length)return;const i=r.innerWidth,s=r.innerHeight,o=t.$el.offset();n&&(o.left-=t.$el[0].scrollLeft);const a=[[o.left,o.top],[o.left+t.width,o.top],[o.left,o.top+t.height],[o.left+t.width,o.top+t.height]];for(let t=0;t<a.length;t+=1){const n=a[t];n[0]>=0&&n[0]<=i&&n[1]>=0&&n[1]<=s&&(e=!0)}if(!e)return}t.isHorizontal()?(37!==o&&39!==o||(s.preventDefault?s.preventDefault():s.returnValue=!1),(39===o&&!n||37===o&&n)&&t.slideNext(),(37===o&&!n||39===o&&n)&&t.slidePrev()):(38!==o&&40!==o||(s.preventDefault?s.preventDefault():s.returnValue=!1),40===o&&t.slideNext(),38===o&&t.slidePrev()),t.emit("keyPress",o)}},enable(){this.keyboard.enabled||(o(i).on("keydown",this.keyboard.handle),this.keyboard.enabled=!0)},disable(){this.keyboard.enabled&&(o(i).off("keydown",this.keyboard.handle),this.keyboard.enabled=!1)}};var j={name:"keyboard",params:{keyboard:{enabled:!1,onlyInViewport:!0}},create(){d.extend(this,{keyboard:{enabled:!1,enable:O.enable.bind(this),disable:O.disable.bind(this),handle:O.handle.bind(this)}})},on:{init(){const e=this;e.params.keyboard.enabled&&e.keyboard.enable()},destroy(){const e=this;e.keyboard.enabled&&e.keyboard.disable()}}};const F={lastScrollTime:d.now(),event:r.navigator.userAgent.indexOf("firefox")>-1?"DOMMouseScroll":function(){let e="onwheel"in i;if(!e){const t=i.createElement("div");t.setAttribute("onwheel","return;"),e="function"==typeof t.onwheel}return!e&&i.implementation&&i.implementation.hasFeature&&!0!==i.implementation.hasFeature("","")&&(e=i.implementation.hasFeature("Events.wheel","3.0")),e}()?"wheel":"mousewheel",normalize(e){let t=0,n=0,i=0,r=0;return"detail"in e&&(n=e.detail),"wheelDelta"in e&&(n=-e.wheelDelta/120),"wheelDeltaY"in e&&(n=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=n,n=0),i=10*t,r=10*n,"deltaY"in e&&(r=e.deltaY),"deltaX"in e&&(i=e.deltaX),(i||r)&&e.deltaMode&&(1===e.deltaMode?(i*=40,r*=40):(i*=800,r*=800)),i&&!t&&(t=i<1?-1:1),r&&!n&&(n=r<1?-1:1),{spinX:t,spinY:n,pixelX:i,pixelY:r}},handleMouseEnter(){this.mouseEntered=!0},handleMouseLeave(){this.mouseEntered=!1},handle(e){let t=e;const n=this,i=n.params.mousewheel;if(!n.mouseEntered&&!i.releaseOnEdges)return!0;t.originalEvent&&(t=t.originalEvent);let s=0;const o=n.rtlTranslate?-1:1,a=F.normalize(t);if(i.forceToAxis)if(n.isHorizontal()){if(!(Math.abs(a.pixelX)>Math.abs(a.pixelY)))return!0;s=a.pixelX*o}else{if(!(Math.abs(a.pixelY)>Math.abs(a.pixelX)))return!0;s=a.pixelY}else s=Math.abs(a.pixelX)>Math.abs(a.pixelY)?-a.pixelX*o:-a.pixelY;if(0===s)return!0;if(i.invert&&(s=-s),n.params.freeMode){n.params.loop&&n.loopFix();let e=n.getTranslate()+s*i.sensitivity;const r=n.isBeginning,o=n.isEnd;if(e>=n.minTranslate()&&(e=n.minTranslate()),e<=n.maxTranslate()&&(e=n.maxTranslate()),n.setTransition(0),n.setTranslate(e),n.updateProgress(),n.updateActiveIndex(),n.updateSlidesClasses(),(!r&&n.isBeginning||!o&&n.isEnd)&&n.updateSlidesClasses(),n.params.freeModeSticky&&(clearTimeout(n.mousewheel.timeout),n.mousewheel.timeout=d.nextTick(()=>{n.slideToClosest()},300)),n.emit("scroll",t),n.params.autoplay&&n.params.autoplayDisableOnInteraction&&n.autoplay.stop(),e===n.minTranslate()||e===n.maxTranslate())return!0}else{if(d.now()-n.mousewheel.lastScrollTime>60)if(s<0)if(n.isEnd&&!n.params.loop||n.animating){if(i.releaseOnEdges)return!0}else n.slideNext(),n.emit("scroll",t);else if(n.isBeginning&&!n.params.loop||n.animating){if(i.releaseOnEdges)return!0}else n.slidePrev(),n.emit("scroll",t);n.mousewheel.lastScrollTime=(new r.Date).getTime()}return t.preventDefault?t.preventDefault():t.returnValue=!1,!1},enable(){const e=this;if(!F.event)return!1;if(e.mousewheel.enabled)return!1;let t=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(t=o(e.params.mousewheel.eventsTarged)),t.on("mouseenter",e.mousewheel.handleMouseEnter),t.on("mouseleave",e.mousewheel.handleMouseLeave),t.on(F.event,e.mousewheel.handle),e.mousewheel.enabled=!0,!0},disable(){const e=this;if(!F.event)return!1;if(!e.mousewheel.enabled)return!1;let t=e.$el;return"container"!==e.params.mousewheel.eventsTarged&&(t=o(e.params.mousewheel.eventsTarged)),t.off(F.event,e.mousewheel.handle),e.mousewheel.enabled=!1,!0}};const z={update(){const e=this,t=e.params.navigation;if(e.params.loop)return;const{$nextEl:n,$prevEl:i}=e.navigation;i&&i.length>0&&(e.isBeginning?i.addClass(t.disabledClass):i.removeClass(t.disabledClass),i[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass)),n&&n.length>0&&(e.isEnd?n.addClass(t.disabledClass):n.removeClass(t.disabledClass),n[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](t.lockClass))},init(){const e=this,t=e.params.navigation;if(!t.nextEl&&!t.prevEl)return;let n,i;t.nextEl&&(n=o(t.nextEl),e.params.uniqueNavElements&&"string"==typeof t.nextEl&&n.length>1&&1===e.$el.find(t.nextEl).length&&(n=e.$el.find(t.nextEl))),t.prevEl&&(i=o(t.prevEl),e.params.uniqueNavElements&&"string"==typeof t.prevEl&&i.length>1&&1===e.$el.find(t.prevEl).length&&(i=e.$el.find(t.prevEl))),n&&n.length>0&&n.on("click",t=>{t.preventDefault(),e.isEnd&&!e.params.loop||e.slideNext()}),i&&i.length>0&&i.on("click",t=>{t.preventDefault(),e.isBeginning&&!e.params.loop||e.slidePrev()}),d.extend(e.navigation,{$nextEl:n,nextEl:n&&n[0],$prevEl:i,prevEl:i&&i[0]})},destroy(){const e=this,{$nextEl:t,$prevEl:n}=e.navigation;t&&t.length&&(t.off("click"),t.removeClass(e.params.navigation.disabledClass)),n&&n.length&&(n.off("click"),n.removeClass(e.params.navigation.disabledClass))}};const H={update(){const e=this,t=e.rtl,n=e.params.pagination;if(!n.el||!e.pagination.el||!e.pagination.$el||0===e.pagination.$el.length)return;const i=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,r=e.pagination.$el;let s;const a=e.params.loop?Math.ceil((i-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;if(e.params.loop?((s=Math.ceil((e.activeIndex-e.loopedSlides)/e.params.slidesPerGroup))>i-1-2*e.loopedSlides&&(s-=i-2*e.loopedSlides),s>a-1&&(s-=a),s<0&&"bullets"!==e.params.paginationType&&(s=a+s)):s=void 0!==e.snapIndex?e.snapIndex:e.activeIndex||0,"bullets"===n.type&&e.pagination.bullets&&e.pagination.bullets.length>0){const i=e.pagination.bullets;let a,l,d;if(n.dynamicBullets&&(e.pagination.bulletSize=i.eq(0)[e.isHorizontal()?"outerWidth":"outerHeight"](!0),r.css(e.isHorizontal()?"width":"height",`${e.pagination.bulletSize*(n.dynamicMainBullets+4)}px`),n.dynamicMainBullets>1&&void 0!==e.previousIndex&&(e.pagination.dynamicBulletIndex+=s-e.previousIndex,e.pagination.dynamicBulletIndex>n.dynamicMainBullets-1?e.pagination.dynamicBulletIndex=n.dynamicMainBullets-1:e.pagination.dynamicBulletIndex<0&&(e.pagination.dynamicBulletIndex=0)),a=s-e.pagination.dynamicBulletIndex,d=((l=a+(Math.min(i.length,n.dynamicMainBullets)-1))+a)/2),i.removeClass(`${n.bulletActiveClass} ${n.bulletActiveClass}-next ${n.bulletActiveClass}-next-next ${n.bulletActiveClass}-prev ${n.bulletActiveClass}-prev-prev ${n.bulletActiveClass}-main`),r.length>1)i.each((e,t)=>{const i=o(t),r=i.index();r===s&&i.addClass(n.bulletActiveClass),n.dynamicBullets&&(r>=a&&r<=l&&i.addClass(`${n.bulletActiveClass}-main`),r===a&&i.prev().addClass(`${n.bulletActiveClass}-prev`).prev().addClass(`${n.bulletActiveClass}-prev-prev`),r===l&&i.next().addClass(`${n.bulletActiveClass}-next`).next().addClass(`${n.bulletActiveClass}-next-next`))});else{if(i.eq(s).addClass(n.bulletActiveClass),n.dynamicBullets){const e=i.eq(a),t=i.eq(l);for(let e=a;e<=l;e+=1)i.eq(e).addClass(`${n.bulletActiveClass}-main`);e.prev().addClass(`${n.bulletActiveClass}-prev`).prev().addClass(`${n.bulletActiveClass}-prev-prev`),t.next().addClass(`${n.bulletActiveClass}-next`).next().addClass(`${n.bulletActiveClass}-next-next`)}}if(n.dynamicBullets){const r=Math.min(i.length,n.dynamicMainBullets+4),s=(e.pagination.bulletSize*r-e.pagination.bulletSize)/2-d*e.pagination.bulletSize,o=t?"right":"left";i.css(e.isHorizontal()?o:"top",`${s}px`)}}if("fraction"===n.type&&(r.find(`.${n.currentClass}`).text(n.formatFractionCurrent(s+1)),r.find(`.${n.totalClass}`).text(n.formatFractionTotal(a))),"progressbar"===n.type){let t;t=n.progressbarOpposite?e.isHorizontal()?"vertical":"horizontal":e.isHorizontal()?"horizontal":"vertical";const i=(s+1)/a;let o=1,l=1;"horizontal"===t?o=i:l=i,r.find(`.${n.progressbarFillClass}`).transform(`translate3d(0,0,0) scaleX(${o}) scaleY(${l})`).transition(e.params.speed)}"custom"===n.type&&n.renderCustom?(r.html(n.renderCustom(e,s+1,a)),e.emit("paginationRender",e,r[0])):e.emit("paginationUpdate",e,r[0]),r[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](n.lockClass)},render(){const e=this,t=e.params.pagination;if(!t.el||!e.pagination.el||!e.pagination.$el||0===e.pagination.$el.length)return;const n=e.virtual&&e.params.virtual.enabled?e.virtual.slides.length:e.slides.length,i=e.pagination.$el;let r="";if("bullets"===t.type){const s=e.params.loop?Math.ceil((n-2*e.loopedSlides)/e.params.slidesPerGroup):e.snapGrid.length;for(let n=0;n<s;n+=1)t.renderBullet?r+=t.renderBullet.call(e,n,t.bulletClass):r+=`<${t.bulletElement} class="${t.bulletClass}"></${t.bulletElement}>`;i.html(r),e.pagination.bullets=i.find(`.${t.bulletClass}`)}"fraction"===t.type&&(r=t.renderFraction?t.renderFraction.call(e,t.currentClass,t.totalClass):`<span class="${t.currentClass}"></span>`+" / "+`<span class="${t.totalClass}"></span>`,i.html(r)),"progressbar"===t.type&&(r=t.renderProgressbar?t.renderProgressbar.call(e,t.progressbarFillClass):`<span class="${t.progressbarFillClass}"></span>`,i.html(r)),"custom"!==t.type&&e.emit("paginationRender",e.pagination.$el[0])},init(){const e=this,t=e.params.pagination;if(!t.el)return;let n=o(t.el);0!==n.length&&(e.params.uniqueNavElements&&"string"==typeof t.el&&n.length>1&&1===e.$el.find(t.el).length&&(n=e.$el.find(t.el)),"bullets"===t.type&&t.clickable&&n.addClass(t.clickableClass),n.addClass(t.modifierClass+t.type),"bullets"===t.type&&t.dynamicBullets&&(n.addClass(`${t.modifierClass}${t.type}-dynamic`),e.pagination.dynamicBulletIndex=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&n.addClass(t.progressbarOppositeClass),t.clickable&&n.on("click",`.${t.bulletClass}`,function(t){t.preventDefault();let n=o(this).index()*e.params.slidesPerGroup;e.params.loop&&(n+=e.loopedSlides),e.slideTo(n)}),d.extend(e.pagination,{$el:n,el:n[0]}))},destroy(){const e=this.params.pagination;if(!e.el||!this.pagination.el||!this.pagination.$el||0===this.pagination.$el.length)return;const t=this.pagination.$el;t.removeClass(e.hiddenClass),t.removeClass(e.modifierClass+e.type),this.pagination.bullets&&this.pagination.bullets.removeClass(e.bulletActiveClass),e.clickable&&t.off("click",`.${e.bulletClass}`)}};const R={setTranslate(){const e=this;if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t,rtlTranslate:n,progress:i}=e,{dragSize:r,trackSize:s,$dragEl:o,$el:a}=t,l=e.params.scrollbar;let d=r,u=(s-r)*i;n?(u=-u)>0?(d=r-u,u=0):-u+r>s&&(d=s+u):u<0?(d=r+u,u=0):u+r>s&&(d=s-u),e.isHorizontal()?(c.transforms3d?o.transform(`translate3d(${u}px, 0, 0)`):o.transform(`translateX(${u}px)`),o[0].style.width=`${d}px`):(c.transforms3d?o.transform(`translate3d(0px, ${u}px, 0)`):o.transform(`translateY(${u}px)`),o[0].style.height=`${d}px`),l.hide&&(clearTimeout(e.scrollbar.timeout),a[0].style.opacity=1,e.scrollbar.timeout=setTimeout(()=>{a[0].style.opacity=0,a.transition(400)},1e3))},setTransition(e){this.params.scrollbar.el&&this.scrollbar.el&&this.scrollbar.$dragEl.transition(e)},updateSize(){const e=this;if(!e.params.scrollbar.el||!e.scrollbar.el)return;const{scrollbar:t}=e,{$dragEl:n,$el:i}=t;n[0].style.width="",n[0].style.height="";const r=e.isHorizontal()?i[0].offsetWidth:i[0].offsetHeight,s=e.size/e.virtualSize,o=s*(r/e.size);let a;a="auto"===e.params.scrollbar.dragSize?r*s:parseInt(e.params.scrollbar.dragSize,10),e.isHorizontal()?n[0].style.width=`${a}px`:n[0].style.height=`${a}px`,i[0].style.display=s>=1?"none":"",e.params.scrollbarHide&&(i[0].style.opacity=0),d.extend(t,{trackSize:r,divider:s,moveDivider:o,dragSize:a}),t.$el[e.params.watchOverflow&&e.isLocked?"addClass":"removeClass"](e.params.scrollbar.lockClass)},setDragPosition(e){const{scrollbar:t,rtlTranslate:n}=this,{$el:i,dragSize:r,trackSize:s}=t;let o,a;a=((o=this.isHorizontal()?"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageX:e.pageX||e.clientX:"touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0].pageY:e.pageY||e.clientY)-i.offset()[this.isHorizontal()?"left":"top"]-r/2)/(s-r),a=Math.max(Math.min(a,1),0),n&&(a=1-a);const l=this.minTranslate()+(this.maxTranslate()-this.minTranslate())*a;this.updateProgress(l),this.setTranslate(l),this.updateActiveIndex(),this.updateSlidesClasses()},onDragStart(e){const t=this.params.scrollbar,{scrollbar:n,$wrapperEl:i}=this,{$el:r,$dragEl:s}=n;this.scrollbar.isTouched=!0,e.preventDefault(),e.stopPropagation(),i.transition(100),s.transition(100),n.setDragPosition(e),clearTimeout(this.scrollbar.dragTimeout),r.transition(0),t.hide&&r.css("opacity",1),this.emit("scrollbarDragStart",e)},onDragMove(e){const{scrollbar:t,$wrapperEl:n}=this,{$el:i,$dragEl:r}=t;this.scrollbar.isTouched&&(e.preventDefault?e.preventDefault():e.returnValue=!1,t.setDragPosition(e),n.transition(0),i.transition(0),r.transition(0),this.emit("scrollbarDragMove",e))},onDragEnd(e){const t=this,n=t.params.scrollbar,{scrollbar:i}=t,{$el:r}=i;t.scrollbar.isTouched&&(t.scrollbar.isTouched=!1,n.hide&&(clearTimeout(t.scrollbar.dragTimeout),t.scrollbar.dragTimeout=d.nextTick(()=>{r.css("opacity",0),r.transition(400)},1e3)),t.emit("scrollbarDragEnd",e),n.snapOnRelease&&t.slideToClosest())},enableDraggable(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,touchEvents:n,touchEventsDesktop:r,params:s}=e,o=t.$el[0],a=!(!c.passiveListener||!s.passiveListeners)&&{passive:!1,capture:!1},l=!(!c.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1};c.touch||!c.pointerEvents&&!c.prefixedPointerEvents?(c.touch&&(o.addEventListener(n.start,e.scrollbar.onDragStart,a),o.addEventListener(n.move,e.scrollbar.onDragMove,a),o.addEventListener(n.end,e.scrollbar.onDragEnd,l)),(s.simulateTouch&&!b.ios&&!b.android||s.simulateTouch&&!c.touch&&b.ios)&&(o.addEventListener("mousedown",e.scrollbar.onDragStart,a),i.addEventListener("mousemove",e.scrollbar.onDragMove,a),i.addEventListener("mouseup",e.scrollbar.onDragEnd,l))):(o.addEventListener(r.start,e.scrollbar.onDragStart,a),i.addEventListener(r.move,e.scrollbar.onDragMove,a),i.addEventListener(r.end,e.scrollbar.onDragEnd,l))},disableDraggable(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,touchEvents:n,touchEventsDesktop:r,params:s}=e,o=t.$el[0],a=!(!c.passiveListener||!s.passiveListeners)&&{passive:!1,capture:!1},l=!(!c.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1};c.touch||!c.pointerEvents&&!c.prefixedPointerEvents?(c.touch&&(o.removeEventListener(n.start,e.scrollbar.onDragStart,a),o.removeEventListener(n.move,e.scrollbar.onDragMove,a),o.removeEventListener(n.end,e.scrollbar.onDragEnd,l)),(s.simulateTouch&&!b.ios&&!b.android||s.simulateTouch&&!c.touch&&b.ios)&&(o.removeEventListener("mousedown",e.scrollbar.onDragStart,a),i.removeEventListener("mousemove",e.scrollbar.onDragMove,a),i.removeEventListener("mouseup",e.scrollbar.onDragEnd,l))):(o.removeEventListener(r.start,e.scrollbar.onDragStart,a),i.removeEventListener(r.move,e.scrollbar.onDragMove,a),i.removeEventListener(r.end,e.scrollbar.onDragEnd,l))},init(){const e=this;if(!e.params.scrollbar.el)return;const{scrollbar:t,$el:n}=e,i=e.params.scrollbar;let r=o(i.el);e.params.uniqueNavElements&&"string"==typeof i.el&&r.length>1&&1===n.find(i.el).length&&(r=n.find(i.el));let s=r.find(`.${e.params.scrollbar.dragClass}`);0===s.length&&(s=o(`<div class="${e.params.scrollbar.dragClass}"></div>`),r.append(s)),d.extend(t,{$el:r,el:r[0],$dragEl:s,dragEl:s[0]}),i.draggable&&t.enableDraggable()},destroy(){this.scrollbar.disableDraggable()}};const q={setTransform(e,t){const{rtl:n}=this,i=o(e),r=n?-1:1,s=i.attr("data-swiper-parallax")||"0";let a=i.attr("data-swiper-parallax-x"),l=i.attr("data-swiper-parallax-y");const d=i.attr("data-swiper-parallax-scale"),c=i.attr("data-swiper-parallax-opacity");if(a||l?(a=a||"0",l=l||"0"):this.isHorizontal()?(a=s,l="0"):(l=s,a="0"),a=a.indexOf("%")>=0?`${parseInt(a,10)*t*r}%`:`${a*t*r}px`,l=l.indexOf("%")>=0?`${parseInt(l,10)*t}%`:`${l*t}px`,void 0!==c&&null!==c){const e=c-(c-1)*(1-Math.abs(t));i[0].style.opacity=e}if(void 0===d||null===d)i.transform(`translate3d(${a}, ${l}, 0px)`);else{const e=d-(d-1)*(1-Math.abs(t));i.transform(`translate3d(${a}, ${l}, 0px) scale(${e})`)}},setTranslate(){const e=this,{$el:t,slides:n,progress:i,snapGrid:r}=e;t.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each((t,n)=>{e.parallax.setTransform(n,i)}),n.each((t,n)=>{let s=n.progress;e.params.slidesPerGroup>1&&"auto"!==e.params.slidesPerView&&(s+=Math.ceil(t/2)-i*(r.length-1)),s=Math.min(Math.max(s,-1),1),o(n).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each((t,n)=>{e.parallax.setTransform(n,s)})})},setTransition(e=this.params.speed){const{$el:t}=this;t.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y]").each((t,n)=>{const i=o(n);let r=parseInt(i.attr("data-swiper-parallax-duration"),10)||e;0===e&&(r=0),i.transition(r)})}};const B={getDistanceBetweenTouches(e){if(e.targetTouches.length<2)return 1;const t=e.targetTouches[0].pageX,n=e.targetTouches[0].pageY,i=e.targetTouches[1].pageX,r=e.targetTouches[1].pageY;return Math.sqrt((i-t)**2+(r-n)**2)},onGestureStart(e){const t=this,n=t.params.zoom,i=t.zoom,{gesture:r}=i;if(i.fakeGestureTouched=!1,i.fakeGestureMoved=!1,!c.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;i.fakeGestureTouched=!0,r.scaleStart=B.getDistanceBetweenTouches(e)}r.$slideEl&&r.$slideEl.length||(r.$slideEl=o(e.target).closest(".swiper-slide"),0===r.$slideEl.length&&(r.$slideEl=t.slides.eq(t.activeIndex)),r.$imageEl=r.$slideEl.find("img, svg, canvas"),r.$imageWrapEl=r.$imageEl.parent(`.${n.containerClass}`),r.maxRatio=r.$imageWrapEl.attr("data-swiper-zoom")||n.maxRatio,0!==r.$imageWrapEl.length)?(r.$imageEl.transition(0),t.zoom.isScaling=!0):r.$imageEl=void 0},onGestureChange(e){const t=this,n=t.params.zoom,i=t.zoom,{gesture:r}=i;if(!c.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;i.fakeGestureMoved=!0,r.scaleMove=B.getDistanceBetweenTouches(e)}r.$imageEl&&0!==r.$imageEl.length&&(c.gestures?t.zoom.scale=e.scale*i.currentScale:i.scale=r.scaleMove/r.scaleStart*i.currentScale,i.scale>r.maxRatio&&(i.scale=r.maxRatio-1+(i.scale-r.maxRatio+1)**.5),i.scale<n.minRatio&&(i.scale=n.minRatio+1-(n.minRatio-i.scale+1)**.5),r.$imageEl.transform(`translate3d(0,0,0) scale(${i.scale})`))},onGestureEnd(e){const t=this.params.zoom,n=this.zoom,{gesture:i}=n;if(!c.gestures){if(!n.fakeGestureTouched||!n.fakeGestureMoved)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!b.android)return;n.fakeGestureTouched=!1,n.fakeGestureMoved=!1}i.$imageEl&&0!==i.$imageEl.length&&(n.scale=Math.max(Math.min(n.scale,i.maxRatio),t.minRatio),i.$imageEl.transition(this.params.speed).transform(`translate3d(0,0,0) scale(${n.scale})`),n.currentScale=n.scale,n.isScaling=!1,1===n.scale&&(i.$slideEl=void 0))},onTouchStart(e){const t=this.zoom,{gesture:n,image:i}=t;n.$imageEl&&0!==n.$imageEl.length&&(i.isTouched||(b.android&&e.preventDefault(),i.isTouched=!0,i.touchesStart.x="touchstart"===e.type?e.targetTouches[0].pageX:e.pageX,i.touchesStart.y="touchstart"===e.type?e.targetTouches[0].pageY:e.pageY))},onTouchMove(e){const t=this,n=t.zoom,{gesture:i,image:r,velocity:s}=n;if(!i.$imageEl||0===i.$imageEl.length)return;if(t.allowClick=!1,!r.isTouched||!i.$slideEl)return;r.isMoved||(r.width=i.$imageEl[0].offsetWidth,r.height=i.$imageEl[0].offsetHeight,r.startX=d.getTranslate(i.$imageWrapEl[0],"x")||0,r.startY=d.getTranslate(i.$imageWrapEl[0],"y")||0,i.slideWidth=i.$slideEl[0].offsetWidth,i.slideHeight=i.$slideEl[0].offsetHeight,i.$imageWrapEl.transition(0),t.rtl&&(r.startX=-r.startX,r.startY=-r.startY));const o=r.width*n.scale,a=r.height*n.scale;if(!(o<i.slideWidth&&a<i.slideHeight)){if(r.minX=Math.min(i.slideWidth/2-o/2,0),r.maxX=-r.minX,r.minY=Math.min(i.slideHeight/2-a/2,0),r.maxY=-r.minY,r.touchesCurrent.x="touchmove"===e.type?e.targetTouches[0].pageX:e.pageX,r.touchesCurrent.y="touchmove"===e.type?e.targetTouches[0].pageY:e.pageY,!r.isMoved&&!n.isScaling){if(t.isHorizontal()&&(Math.floor(r.minX)===Math.floor(r.startX)&&r.touchesCurrent.x<r.touchesStart.x||Math.floor(r.maxX)===Math.floor(r.startX)&&r.touchesCurrent.x>r.touchesStart.x))return void(r.isTouched=!1);if(!t.isHorizontal()&&(Math.floor(r.minY)===Math.floor(r.startY)&&r.touchesCurrent.y<r.touchesStart.y||Math.floor(r.maxY)===Math.floor(r.startY)&&r.touchesCurrent.y>r.touchesStart.y))return void(r.isTouched=!1)}e.preventDefault(),e.stopPropagation(),r.isMoved=!0,r.currentX=r.touchesCurrent.x-r.touchesStart.x+r.startX,r.currentY=r.touchesCurrent.y-r.touchesStart.y+r.startY,r.currentX<r.minX&&(r.currentX=r.minX+1-(r.minX-r.currentX+1)**.8),r.currentX>r.maxX&&(r.currentX=r.maxX-1+(r.currentX-r.maxX+1)**.8),r.currentY<r.minY&&(r.currentY=r.minY+1-(r.minY-r.currentY+1)**.8),r.currentY>r.maxY&&(r.currentY=r.maxY-1+(r.currentY-r.maxY+1)**.8),s.prevPositionX||(s.prevPositionX=r.touchesCurrent.x),s.prevPositionY||(s.prevPositionY=r.touchesCurrent.y),s.prevTime||(s.prevTime=Date.now()),s.x=(r.touchesCurrent.x-s.prevPositionX)/(Date.now()-s.prevTime)/2,s.y=(r.touchesCurrent.y-s.prevPositionY)/(Date.now()-s.prevTime)/2,Math.abs(r.touchesCurrent.x-s.prevPositionX)<2&&(s.x=0),Math.abs(r.touchesCurrent.y-s.prevPositionY)<2&&(s.y=0),s.prevPositionX=r.touchesCurrent.x,s.prevPositionY=r.touchesCurrent.y,s.prevTime=Date.now(),i.$imageWrapEl.transform(`translate3d(${r.currentX}px, ${r.currentY}px,0)`)}},onTouchEnd(){const e=this.zoom,{gesture:t,image:n,velocity:i}=e;if(!t.$imageEl||0===t.$imageEl.length)return;if(!n.isTouched||!n.isMoved)return n.isTouched=!1,void(n.isMoved=!1);n.isTouched=!1,n.isMoved=!1;let r=300,s=300;const o=i.x*r,a=n.currentX+o,l=i.y*s,d=n.currentY+l;0!==i.x&&(r=Math.abs((a-n.currentX)/i.x)),0!==i.y&&(s=Math.abs((d-n.currentY)/i.y));const c=Math.max(r,s);n.currentX=a,n.currentY=d;const u=n.width*e.scale,p=n.height*e.scale;n.minX=Math.min(t.slideWidth/2-u/2,0),n.maxX=-n.minX,n.minY=Math.min(t.slideHeight/2-p/2,0),n.maxY=-n.minY,n.currentX=Math.max(Math.min(n.currentX,n.maxX),n.minX),n.currentY=Math.max(Math.min(n.currentY,n.maxY),n.minY),t.$imageWrapEl.transition(c).transform(`translate3d(${n.currentX}px, ${n.currentY}px,0)`)},onTransitionEnd(){const e=this.zoom,{gesture:t}=e;t.$slideEl&&this.previousIndex!==this.activeIndex&&(t.$imageEl.transform("translate3d(0,0,0) scale(1)"),t.$imageWrapEl.transform("translate3d(0,0,0)"),t.$slideEl=void 0,t.$imageEl=void 0,t.$imageWrapEl=void 0,e.scale=1,e.currentScale=1)},toggle(e){const t=this.zoom;t.scale&&1!==t.scale?t.out():t.in(e)},in(e){const t=this,n=t.zoom,i=t.params.zoom,{gesture:r,image:s}=n;if(r.$slideEl||(r.$slideEl=t.clickedSlide?o(t.clickedSlide):t.slides.eq(t.activeIndex),r.$imageEl=r.$slideEl.find("img, svg, canvas"),r.$imageWrapEl=r.$imageEl.parent(`.${i.containerClass}`)),!r.$imageEl||0===r.$imageEl.length)return;let a,l,d,c,u,p,h,f,m,g,v,y,b,w,E,x,T,S;r.$slideEl.addClass(`${i.zoomedSlideClass}`),void 0===s.touchesStart.x&&e?(a="touchend"===e.type?e.changedTouches[0].pageX:e.pageX,l="touchend"===e.type?e.changedTouches[0].pageY:e.pageY):(a=s.touchesStart.x,l=s.touchesStart.y),n.scale=r.$imageWrapEl.attr("data-swiper-zoom")||i.maxRatio,n.currentScale=r.$imageWrapEl.attr("data-swiper-zoom")||i.maxRatio,e?(T=r.$slideEl[0].offsetWidth,S=r.$slideEl[0].offsetHeight,u=(d=r.$slideEl.offset().left)+T/2-a,p=(c=r.$slideEl.offset().top)+S/2-l,m=r.$imageEl[0].offsetWidth,g=r.$imageEl[0].offsetHeight,v=m*n.scale,y=g*n.scale,E=-(b=Math.min(T/2-v/2,0)),x=-(w=Math.min(S/2-y/2,0)),h=u*n.scale,f=p*n.scale,h<b&&(h=b),h>E&&(h=E),f<w&&(f=w),f>x&&(f=x)):(h=0,f=0),r.$imageWrapEl.transition(300).transform(`translate3d(${h}px, ${f}px,0)`),r.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${n.scale})`)},out(){const e=this,t=e.zoom,n=e.params.zoom,{gesture:i}=t;i.$slideEl||(i.$slideEl=e.clickedSlide?o(e.clickedSlide):e.slides.eq(e.activeIndex),i.$imageEl=i.$slideEl.find("img, svg, canvas"),i.$imageWrapEl=i.$imageEl.parent(`.${n.containerClass}`)),i.$imageEl&&0!==i.$imageEl.length&&(t.scale=1,t.currentScale=1,i.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),i.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),i.$slideEl.removeClass(`${n.zoomedSlideClass}`),i.$slideEl=void 0)},enable(){const e=this,t=e.zoom;if(t.enabled)return;t.enabled=!0;const n=!("touchstart"!==e.touchEvents.start||!c.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1};c.gestures?(e.$wrapperEl.on("gesturestart",".swiper-slide",t.onGestureStart,n),e.$wrapperEl.on("gesturechange",".swiper-slide",t.onGestureChange,n),e.$wrapperEl.on("gestureend",".swiper-slide",t.onGestureEnd,n)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.on(e.touchEvents.start,".swiper-slide",t.onGestureStart,n),e.$wrapperEl.on(e.touchEvents.move,".swiper-slide",t.onGestureChange,n),e.$wrapperEl.on(e.touchEvents.end,".swiper-slide",t.onGestureEnd,n)),e.$wrapperEl.on(e.touchEvents.move,`.${e.params.zoom.containerClass}`,t.onTouchMove)},disable(){const e=this,t=e.zoom;if(!t.enabled)return;e.zoom.enabled=!1;const n=!("touchstart"!==e.touchEvents.start||!c.passiveListener||!e.params.passiveListeners)&&{passive:!0,capture:!1};c.gestures?(e.$wrapperEl.off("gesturestart",".swiper-slide",t.onGestureStart,n),e.$wrapperEl.off("gesturechange",".swiper-slide",t.onGestureChange,n),e.$wrapperEl.off("gestureend",".swiper-slide",t.onGestureEnd,n)):"touchstart"===e.touchEvents.start&&(e.$wrapperEl.off(e.touchEvents.start,".swiper-slide",t.onGestureStart,n),e.$wrapperEl.off(e.touchEvents.move,".swiper-slide",t.onGestureChange,n),e.$wrapperEl.off(e.touchEvents.end,".swiper-slide",t.onGestureEnd,n)),e.$wrapperEl.off(e.touchEvents.move,`.${e.params.zoom.containerClass}`,t.onTouchMove)}};const V={loadInSlide(e,t=!0){const n=this,i=n.params.lazy;if(void 0===e)return;if(0===n.slides.length)return;const r=n.virtual&&n.params.virtual.enabled?n.$wrapperEl.children(`.${n.params.slideClass}[data-swiper-slide-index="${e}"]`):n.slides.eq(e);let s=r.find(`.${i.elementClass}:not(.${i.loadedClass}):not(.${i.loadingClass})`);!r.hasClass(i.elementClass)||r.hasClass(i.loadedClass)||r.hasClass(i.loadingClass)||(s=s.add(r[0])),0!==s.length&&s.each((e,s)=>{const a=o(s);a.addClass(i.loadingClass);const l=a.attr("data-background"),d=a.attr("data-src"),c=a.attr("data-srcset"),u=a.attr("data-sizes");n.loadImage(a[0],d||l,c,u,!1,()=>{if(void 0!==n&&null!==n&&n&&(!n||n.params)&&!n.destroyed){if(l?(a.css("background-image",`url("${l}")`),a.removeAttr("data-background")):(c&&(a.attr("srcset",c),a.removeAttr("data-srcset")),u&&(a.attr("sizes",u),a.removeAttr("data-sizes")),d&&(a.attr("src",d),a.removeAttr("data-src"))),a.addClass(i.loadedClass).removeClass(i.loadingClass),r.find(`.${i.preloaderClass}`).remove(),n.params.loop&&t){const e=r.attr("data-swiper-slide-index");if(r.hasClass(n.params.slideDuplicateClass)){const t=n.$wrapperEl.children(`[data-swiper-slide-index="${e}"]:not(.${n.params.slideDuplicateClass})`);n.lazy.loadInSlide(t.index(),!1)}else{const t=n.$wrapperEl.children(`.${n.params.slideDuplicateClass}[data-swiper-slide-index="${e}"]`);n.lazy.loadInSlide(t.index(),!1)}}n.emit("lazyImageReady",r[0],a[0])}}),n.emit("lazyImageLoad",r[0],a[0])})},load(){const e=this,{$wrapperEl:t,params:n,slides:i,activeIndex:r}=e,s=e.virtual&&n.virtual.enabled,a=n.lazy;let l=n.slidesPerView;function d(e){if(s){if(t.children(`.${n.slideClass}[data-swiper-slide-index="${e}"]`).length)return!0}else if(i[e])return!0;return!1}function c(e){return s?o(e).attr("data-swiper-slide-index"):o(e).index()}if("auto"===l&&(l=0),e.lazy.initialImageLoaded||(e.lazy.initialImageLoaded=!0),e.params.watchSlidesVisibility)t.children(`.${n.slideVisibleClass}`).each((t,n)=>{const i=s?o(n).attr("data-swiper-slide-index"):o(n).index();e.lazy.loadInSlide(i)});else if(l>1)for(let t=r;t<r+l;t+=1)d(t)&&e.lazy.loadInSlide(t);else e.lazy.loadInSlide(r);if(a.loadPrevNext)if(l>1||a.loadPrevNextAmount&&a.loadPrevNextAmount>1){const t=a.loadPrevNextAmount,n=l,s=Math.min(r+n+Math.max(t,n),i.length),o=Math.max(r-Math.max(n,t),0);for(let t=r+l;t<s;t+=1)d(t)&&e.lazy.loadInSlide(t);for(let t=o;t<r;t+=1)d(t)&&e.lazy.loadInSlide(t)}else{const i=t.children(`.${n.slideNextClass}`);i.length>0&&e.lazy.loadInSlide(c(i));const r=t.children(`.${n.slidePrevClass}`);r.length>0&&e.lazy.loadInSlide(c(r))}}};const U={LinearSpline:function(e,t){const n=function(){let e,t,n;return(i,r)=>{for(t=-1,e=i.length;e-t>1;)i[n=e+t>>1]<=r?t=n:e=n;return e}}();let i,r;return this.x=e,this.y=t,this.lastIndex=e.length-1,this.interpolate=function(e){return e?(r=n(this.x,e),i=r-1,(e-this.x[i])*(this.y[r]-this.y[i])/(this.x[r]-this.x[i])+this.y[i]):0},this},getInterpolateFunction(e){const t=this;t.controller.spline||(t.controller.spline=t.params.loop?new U.LinearSpline(t.slidesGrid,e.slidesGrid):new U.LinearSpline(t.snapGrid,e.snapGrid))},setTranslate(e,t){const n=this,i=n.controller.control;let r,s;function o(e){const t=n.rtlTranslate?-n.translate:n.translate;"slide"===n.params.controller.by&&(n.controller.getInterpolateFunction(e),s=-n.controller.spline.interpolate(-t)),s&&"container"!==n.params.controller.by||(r=(e.maxTranslate()-e.minTranslate())/(n.maxTranslate()-n.minTranslate()),s=(t-n.minTranslate())*r+e.minTranslate()),n.params.controller.inverse&&(s=e.maxTranslate()-s),e.updateProgress(s),e.setTranslate(s,n),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(i))for(let e=0;e<i.length;e+=1)i[e]!==t&&i[e]instanceof P&&o(i[e]);else i instanceof P&&t!==i&&o(i)},setTransition(e,t){const n=this,i=n.controller.control;let r;function s(t){t.setTransition(e,n),0!==e&&(t.transitionStart(),t.params.autoHeight&&d.nextTick(()=>{t.updateAutoHeight()}),t.$wrapperEl.transitionEnd(()=>{i&&(t.params.loop&&"slide"===n.params.controller.by&&t.loopFix(),t.transitionEnd())}))}if(Array.isArray(i))for(r=0;r<i.length;r+=1)i[r]!==t&&i[r]instanceof P&&s(i[r]);else i instanceof P&&t!==i&&s(i)}};const W={makeElFocusable:e=>(e.attr("tabIndex","0"),e),addElRole:(e,t)=>(e.attr("role",t),e),addElLabel:(e,t)=>(e.attr("aria-label",t),e),disableEl:e=>(e.attr("aria-disabled",!0),e),enableEl:e=>(e.attr("aria-disabled",!1),e),onEnterKey(e){const t=this,n=t.params.a11y;if(13!==e.keyCode)return;const i=o(e.target);t.navigation&&t.navigation.$nextEl&&i.is(t.navigation.$nextEl)&&(t.isEnd&&!t.params.loop||t.slideNext(),t.isEnd?t.a11y.notify(n.lastSlideMessage):t.a11y.notify(n.nextSlideMessage)),t.navigation&&t.navigation.$prevEl&&i.is(t.navigation.$prevEl)&&(t.isBeginning&&!t.params.loop||t.slidePrev(),t.isBeginning?t.a11y.notify(n.firstSlideMessage):t.a11y.notify(n.prevSlideMessage)),t.pagination&&i.is(`.${t.params.pagination.bulletClass}`)&&i[0].click()},notify(e){const t=this.a11y.liveRegion;0!==t.length&&(t.html(""),t.html(e))},updateNavigation(){const e=this;if(e.params.loop)return;const{$nextEl:t,$prevEl:n}=e.navigation;n&&n.length>0&&(e.isBeginning?e.a11y.disableEl(n):e.a11y.enableEl(n)),t&&t.length>0&&(e.isEnd?e.a11y.disableEl(t):e.a11y.enableEl(t))},updatePagination(){const e=this,t=e.params.a11y;e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.bullets.each((n,i)=>{const r=o(i);e.a11y.makeElFocusable(r),e.a11y.addElRole(r,"button"),e.a11y.addElLabel(r,t.paginationBulletMessage.replace(/{{index}}/,r.index()+1))})},init(){const e=this;e.$el.append(e.a11y.liveRegion);const t=e.params.a11y;let n,i;e.navigation&&e.navigation.$nextEl&&(n=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(i=e.navigation.$prevEl),n&&(e.a11y.makeElFocusable(n),e.a11y.addElRole(n,"button"),e.a11y.addElLabel(n,t.nextSlideMessage),n.on("keydown",e.a11y.onEnterKey)),i&&(e.a11y.makeElFocusable(i),e.a11y.addElRole(i,"button"),e.a11y.addElLabel(i,t.prevSlideMessage),i.on("keydown",e.a11y.onEnterKey)),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.on("keydown",`.${e.params.pagination.bulletClass}`,e.a11y.onEnterKey)},destroy(){const e=this;let t,n;e.a11y.liveRegion&&e.a11y.liveRegion.length>0&&e.a11y.liveRegion.remove(),e.navigation&&e.navigation.$nextEl&&(t=e.navigation.$nextEl),e.navigation&&e.navigation.$prevEl&&(n=e.navigation.$prevEl),t&&t.off("keydown",e.a11y.onEnterKey),n&&n.off("keydown",e.a11y.onEnterKey),e.pagination&&e.params.pagination.clickable&&e.pagination.bullets&&e.pagination.bullets.length&&e.pagination.$el.off("keydown",`.${e.params.pagination.bulletClass}`,e.a11y.onEnterKey)}};const G={init(){const e=this;if(!e.params.history)return;if(!r.history||!r.history.pushState)return e.params.history.enabled=!1,void(e.params.hashNavigation.enabled=!0);const t=e.history;t.initialized=!0,t.paths=G.getPathValues(),(t.paths.key||t.paths.value)&&(t.scrollToSlide(0,t.paths.value,e.params.runCallbacksOnInit),e.params.history.replaceState||r.addEventListener("popstate",e.history.setHistoryPopState))},destroy(){const e=this;e.params.history.replaceState||r.removeEventListener("popstate",e.history.setHistoryPopState)},setHistoryPopState(){this.history.paths=G.getPathValues(),this.history.scrollToSlide(this.params.speed,this.history.paths.value,!1)},getPathValues(){const e=r.location.pathname.slice(1).split("/").filter(e=>""!==e),t=e.length;return{key:e[t-2],value:e[t-1]}},setHistory(e,t){if(!this.history.initialized||!this.params.history.enabled)return;const n=this.slides.eq(t);let i=G.slugify(n.attr("data-history"));r.location.pathname.includes(e)||(i=`${e}/${i}`);const s=r.history.state;s&&s.value===i||(this.params.history.replaceState?r.history.replaceState({value:i},null,i):r.history.pushState({value:i},null,i))},slugify:e=>e.toString().toLowerCase().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),scrollToSlide(e,t,n){const i=this;if(t)for(let r=0,s=i.slides.length;r<s;r+=1){const s=i.slides.eq(r);if(G.slugify(s.attr("data-history"))===t&&!s.hasClass(i.params.slideDuplicateClass)){const t=s.index();i.slideTo(t,e,n)}}else i.slideTo(0,e,n)}};const X={onHashCange(){const e=this,t=i.location.hash.replace("#","");t!==e.slides.eq(e.activeIndex).attr("data-hash")&&e.slideTo(e.$wrapperEl.children(`.${e.params.slideClass}[data-hash="${t}"]`).index())},setHash(){const e=this;if(e.hashNavigation.initialized&&e.params.hashNavigation.enabled)if(e.params.hashNavigation.replaceState&&r.history&&r.history.replaceState)r.history.replaceState(null,null,`#${e.slides.eq(e.activeIndex).attr("data-hash")}`||"");else{const t=e.slides.eq(e.activeIndex),n=t.attr("data-hash")||t.attr("data-history");i.location.hash=n||""}},init(){const e=this;if(!e.params.hashNavigation.enabled||e.params.history&&e.params.history.enabled)return;e.hashNavigation.initialized=!0;const t=i.location.hash.replace("#","");if(t){const n=0;for(let i=0,r=e.slides.length;i<r;i+=1){const r=e.slides.eq(i);if((r.attr("data-hash")||r.attr("data-history"))===t&&!r.hasClass(e.params.slideDuplicateClass)){const t=r.index();e.slideTo(t,n,e.params.runCallbacksOnInit,!0)}}}e.params.hashNavigation.watchState&&o(r).on("hashchange",e.hashNavigation.onHashCange)},destroy(){const e=this;e.params.hashNavigation.watchState&&o(r).off("hashchange",e.hashNavigation.onHashCange)}};const Y={run(){const e=this,t=e.slides.eq(e.activeIndex);let n=e.params.autoplay.delay;t.attr("data-swiper-autoplay")&&(n=t.attr("data-swiper-autoplay")||e.params.autoplay.delay),e.autoplay.timeout=d.nextTick(()=>{e.params.autoplay.reverseDirection?e.params.loop?(e.loopFix(),e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.isBeginning?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(e.slides.length-1,e.params.speed,!0,!0),e.emit("autoplay")):(e.slidePrev(e.params.speed,!0,!0),e.emit("autoplay")):e.params.loop?(e.loopFix(),e.slideNext(e.params.speed,!0,!0),e.emit("autoplay")):e.isEnd?e.params.autoplay.stopOnLastSlide?e.autoplay.stop():(e.slideTo(0,e.params.speed,!0,!0),e.emit("autoplay")):(e.slideNext(e.params.speed,!0,!0),e.emit("autoplay"))},n)},start(){return void 0===this.autoplay.timeout&&(!this.autoplay.running&&(this.autoplay.running=!0,this.emit("autoplayStart"),this.autoplay.run(),!0))},stop(){const e=this;return!!e.autoplay.running&&(void 0!==e.autoplay.timeout&&(e.autoplay.timeout&&(clearTimeout(e.autoplay.timeout),e.autoplay.timeout=void 0),e.autoplay.running=!1,e.emit("autoplayStop"),!0))},pause(e){const t=this;t.autoplay.running&&(t.autoplay.paused||(t.autoplay.timeout&&clearTimeout(t.autoplay.timeout),t.autoplay.paused=!0,0!==e&&t.params.autoplay.waitForTransition?(t.$wrapperEl[0].addEventListener("transitionend",t.autoplay.onTransitionEnd),t.$wrapperEl[0].addEventListener("webkitTransitionEnd",t.autoplay.onTransitionEnd)):(t.autoplay.paused=!1,t.autoplay.run())))}};const K={setTranslate(){const e=this,{slides:t}=e;for(let n=0;n<t.length;n+=1){const t=e.slides.eq(n);let i=-t[0].swiperSlideOffset;e.params.virtualTranslate||(i-=e.translate);let r=0;e.isHorizontal()||(r=i,i=0);const s=e.params.fadeEffect.crossFade?Math.max(1-Math.abs(t[0].progress),0):1+Math.min(Math.max(t[0].progress,-1),0);t.css({opacity:s}).transform(`translate3d(${i}px, ${r}px, 0px)`)}},setTransition(e){const t=this,{slides:n,$wrapperEl:i}=t;if(n.transition(e),t.params.virtualTranslate&&0!==e){let e=!1;n.transitionEnd(()=>{if(e)return;if(!t||t.destroyed)return;e=!0,t.animating=!1;const n=["webkitTransitionEnd","transitionend"];for(let e=0;e<n.length;e+=1)i.trigger(n[e])})}}};const Q={setTranslate(){const{$el:e,$wrapperEl:t,slides:n,width:i,height:r,rtlTranslate:s,size:a}=this,l=this.params.cubeEffect,d=this.isHorizontal(),c=this.virtual&&this.params.virtual.enabled;let u,p=0;l.shadow&&(d?(0===(u=t.find(".swiper-cube-shadow")).length&&(u=o('<div class="swiper-cube-shadow"></div>'),t.append(u)),u.css({height:`${i}px`})):0===(u=e.find(".swiper-cube-shadow")).length&&(u=o('<div class="swiper-cube-shadow"></div>'),e.append(u)));for(let e=0;e<n.length;e+=1){const t=n.eq(e);let i=e;c&&(i=parseInt(t.attr("data-swiper-slide-index"),10));let r=90*i,u=Math.floor(r/360);s&&(r=-r,u=Math.floor(-r/360));const h=Math.max(Math.min(t[0].progress,1),-1);let f=0,m=0,g=0;i%4==0?(f=4*-u*a,g=0):(i-1)%4==0?(f=0,g=4*-u*a):(i-2)%4==0?(f=a+4*u*a,g=a):(i-3)%4==0&&(f=-a,g=3*a+4*a*u),s&&(f=-f),d||(m=f,f=0);const v=`rotateX(${d?0:-r}deg) rotateY(${d?r:0}deg) translate3d(${f}px, ${m}px, ${g}px)`;if(h<=1&&h>-1&&(p=90*i+90*h,s&&(p=90*-i-90*h)),t.transform(v),l.slideShadows){let e=d?t.find(".swiper-slide-shadow-left"):t.find(".swiper-slide-shadow-top"),n=d?t.find(".swiper-slide-shadow-right"):t.find(".swiper-slide-shadow-bottom");0===e.length&&(e=o(`<div class="swiper-slide-shadow-${d?"left":"top"}"></div>`),t.append(e)),0===n.length&&(n=o(`<div class="swiper-slide-shadow-${d?"right":"bottom"}"></div>`),t.append(n)),e.length&&(e[0].style.opacity=Math.max(-h,0)),n.length&&(n[0].style.opacity=Math.max(h,0))}}if(t.css({"-webkit-transform-origin":`50% 50% -${a/2}px`,"-moz-transform-origin":`50% 50% -${a/2}px`,"-ms-transform-origin":`50% 50% -${a/2}px`,"transform-origin":`50% 50% -${a/2}px`}),l.shadow)if(d)u.transform(`translate3d(0px, ${i/2+l.shadowOffset}px, ${-i/2}px) rotateX(90deg) rotateZ(0deg) scale(${l.shadowScale})`);else{const e=Math.abs(p)-90*Math.floor(Math.abs(p)/90),t=1.5-(Math.sin(2*e*Math.PI/360)/2+Math.cos(2*e*Math.PI/360)/2),n=l.shadowScale,i=l.shadowScale/t,s=l.shadowOffset;u.transform(`scale3d(${n}, 1, ${i}) translate3d(0px, ${r/2+s}px, ${-r/2/i}px) rotateX(-90deg)`)}const h=T.isSafari||T.isUiWebView?-a/2:0;t.transform(`translate3d(0px,0,${h}px) rotateX(${this.isHorizontal()?0:p}deg) rotateY(${this.isHorizontal()?-p:0}deg)`)},setTransition(e){const{$el:t,slides:n}=this;n.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),this.params.cubeEffect.shadow&&!this.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)}};const Z={setTranslate(){const e=this,{slides:t,rtlTranslate:n}=e;for(let i=0;i<t.length;i+=1){const r=t.eq(i);let s=r[0].progress;e.params.flipEffect.limitRotation&&(s=Math.max(Math.min(r[0].progress,1),-1));let a=-180*s,l=0,d=-r[0].swiperSlideOffset,c=0;if(e.isHorizontal()?n&&(a=-a):(c=d,d=0,l=-a,a=0),r[0].style.zIndex=-Math.abs(Math.round(s))+t.length,e.params.flipEffect.slideShadows){let t=e.isHorizontal()?r.find(".swiper-slide-shadow-left"):r.find(".swiper-slide-shadow-top"),n=e.isHorizontal()?r.find(".swiper-slide-shadow-right"):r.find(".swiper-slide-shadow-bottom");0===t.length&&(t=o(`<div class="swiper-slide-shadow-${e.isHorizontal()?"left":"top"}"></div>`),r.append(t)),0===n.length&&(n=o(`<div class="swiper-slide-shadow-${e.isHorizontal()?"right":"bottom"}"></div>`),r.append(n)),t.length&&(t[0].style.opacity=Math.max(-s,0)),n.length&&(n[0].style.opacity=Math.max(s,0))}r.transform(`translate3d(${d}px, ${c}px, 0px) rotateX(${l}deg) rotateY(${a}deg)`)}},setTransition(e){const t=this,{slides:n,activeIndex:i,$wrapperEl:r}=t;if(n.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),t.params.virtualTranslate&&0!==e){let e=!1;n.eq(i).transitionEnd(function(){if(e)return;if(!t||t.destroyed)return;e=!0,t.animating=!1;const n=["webkitTransitionEnd","transitionend"];for(let e=0;e<n.length;e+=1)r.trigger(n[e])})}}};const J={setTranslate(){const{width:e,height:t,slides:n,$wrapperEl:i,slidesSizesGrid:r}=this,s=this.params.coverflowEffect,a=this.isHorizontal(),l=this.translate,d=a?e/2-l:t/2-l,u=a?s.rotate:-s.rotate,p=s.depth;for(let e=0,t=n.length;e<t;e+=1){const t=n.eq(e),i=r[e],l=(d-t[0].swiperSlideOffset-i/2)/i*s.modifier;let c=a?u*l:0,h=a?0:u*l,f=-p*Math.abs(l),m=a?0:s.stretch*l,g=a?s.stretch*l:0;Math.abs(g)<.001&&(g=0),Math.abs(m)<.001&&(m=0),Math.abs(f)<.001&&(f=0),Math.abs(c)<.001&&(c=0),Math.abs(h)<.001&&(h=0);const v=`translate3d(${g}px,${m}px,${f}px)  rotateX(${h}deg) rotateY(${c}deg)`;if(t.transform(v),t[0].style.zIndex=1-Math.abs(Math.round(l)),s.slideShadows){let e=a?t.find(".swiper-slide-shadow-left"):t.find(".swiper-slide-shadow-top"),n=a?t.find(".swiper-slide-shadow-right"):t.find(".swiper-slide-shadow-bottom");0===e.length&&(e=o(`<div class="swiper-slide-shadow-${a?"left":"top"}"></div>`),t.append(e)),0===n.length&&(n=o(`<div class="swiper-slide-shadow-${a?"right":"bottom"}"></div>`),t.append(n)),e.length&&(e[0].style.opacity=l>0?l:0),n.length&&(n[0].style.opacity=-l>0?-l:0)}}if(c.pointerEvents||c.prefixedPointerEvents){i[0].style.perspectiveOrigin=`${d}px 50%`}},setTransition(e){this.slides.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)}};const ee=[$,A,_,L,N,I,j,{name:"mousewheel",params:{mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarged:"container"}},create(){d.extend(this,{mousewheel:{enabled:!1,enable:F.enable.bind(this),disable:F.disable.bind(this),handle:F.handle.bind(this),handleMouseEnter:F.handleMouseEnter.bind(this),handleMouseLeave:F.handleMouseLeave.bind(this),lastScrollTime:d.now()}})},on:{init(){this.params.mousewheel.enabled&&this.mousewheel.enable()},destroy(){this.mousewheel.enabled&&this.mousewheel.disable()}}},{name:"navigation",params:{navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}},create(){d.extend(this,{navigation:{init:z.init.bind(this),update:z.update.bind(this),destroy:z.destroy.bind(this)}})},on:{init(){this.navigation.init(),this.navigation.update()},toEdge(){this.navigation.update()},fromEdge(){this.navigation.update()},destroy(){this.navigation.destroy()},click(e){const t=this,{$nextEl:n,$prevEl:i}=t.navigation;!t.params.navigation.hideOnClick||o(e.target).is(i)||o(e.target).is(n)||(n&&n.toggleClass(t.params.navigation.hiddenClass),i&&i.toggleClass(t.params.navigation.hiddenClass))}}},{name:"pagination",params:{pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:"swiper-pagination-bullet",bulletActiveClass:"swiper-pagination-bullet-active",modifierClass:"swiper-pagination-",currentClass:"swiper-pagination-current",totalClass:"swiper-pagination-total",hiddenClass:"swiper-pagination-hidden",progressbarFillClass:"swiper-pagination-progressbar-fill",progressbarOppositeClass:"swiper-pagination-progressbar-opposite",clickableClass:"swiper-pagination-clickable",lockClass:"swiper-pagination-lock"}},create(){d.extend(this,{pagination:{init:H.init.bind(this),render:H.render.bind(this),update:H.update.bind(this),destroy:H.destroy.bind(this),dynamicBulletIndex:0}})},on:{init(){this.pagination.init(),this.pagination.render(),this.pagination.update()},activeIndexChange(){const e=this;e.params.loop?e.pagination.update():void 0===e.snapIndex&&e.pagination.update()},snapIndexChange(){const e=this;e.params.loop||e.pagination.update()},slidesLengthChange(){const e=this;e.params.loop&&(e.pagination.render(),e.pagination.update())},snapGridLengthChange(){const e=this;e.params.loop||(e.pagination.render(),e.pagination.update())},destroy(){this.pagination.destroy()},click(e){const t=this;t.params.pagination.el&&t.params.pagination.hideOnClick&&t.pagination.$el.length>0&&!o(e.target).hasClass(t.params.pagination.bulletClass)&&t.pagination.$el.toggleClass(t.params.pagination.hiddenClass)}}},{name:"scrollbar",params:{scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}},create(){d.extend(this,{scrollbar:{init:R.init.bind(this),destroy:R.destroy.bind(this),updateSize:R.updateSize.bind(this),setTranslate:R.setTranslate.bind(this),setTransition:R.setTransition.bind(this),enableDraggable:R.enableDraggable.bind(this),disableDraggable:R.disableDraggable.bind(this),setDragPosition:R.setDragPosition.bind(this),onDragStart:R.onDragStart.bind(this),onDragMove:R.onDragMove.bind(this),onDragEnd:R.onDragEnd.bind(this),isTouched:!1,timeout:null,dragTimeout:null}})},on:{init(){this.scrollbar.init(),this.scrollbar.updateSize(),this.scrollbar.setTranslate()},update(){this.scrollbar.updateSize()},resize(){this.scrollbar.updateSize()},observerUpdate(){this.scrollbar.updateSize()},setTranslate(){this.scrollbar.setTranslate()},setTransition(e){this.scrollbar.setTransition(e)},destroy(){this.scrollbar.destroy()}}},{name:"parallax",params:{parallax:{enabled:!1}},create(){d.extend(this,{parallax:{setTransform:q.setTransform.bind(this),setTranslate:q.setTranslate.bind(this),setTransition:q.setTransition.bind(this)}})},on:{beforeInit(){this.params.parallax.enabled&&(this.params.watchSlidesProgress=!0)},init(){this.params.parallax&&this.parallax.setTranslate()},setTranslate(){this.params.parallax&&this.parallax.setTranslate()},setTransition(e){this.params.parallax&&this.parallax.setTransition(e)}}},{name:"zoom",params:{zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}},create(){const e=this,t={enabled:!1,scale:1,currentScale:1,isScaling:!1,gesture:{$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},image:{isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},velocity:{x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0}};"onGestureStart onGestureChange onGestureEnd onTouchStart onTouchMove onTouchEnd onTransitionEnd toggle enable disable in out".split(" ").forEach(n=>{t[n]=B[n].bind(e)}),d.extend(e,{zoom:t})},on:{init(){const e=this;e.params.zoom.enabled&&e.zoom.enable()},destroy(){this.zoom.disable()},touchStart(e){this.zoom.enabled&&this.zoom.onTouchStart(e)},touchEnd(e){this.zoom.enabled&&this.zoom.onTouchEnd(e)},doubleTap(e){const t=this;t.params.zoom.enabled&&t.zoom.enabled&&t.params.zoom.toggle&&t.zoom.toggle(e)},transitionEnd(){const e=this;e.zoom.enabled&&e.params.zoom.enabled&&e.zoom.onTransitionEnd()}}},{name:"lazy",params:{lazy:{enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}},create(){d.extend(this,{lazy:{initialImageLoaded:!1,load:V.load.bind(this),loadInSlide:V.loadInSlide.bind(this)}})},on:{beforeInit(){const e=this;e.params.lazy.enabled&&e.params.preloadImages&&(e.params.preloadImages=!1)},init(){const e=this;e.params.lazy.enabled&&!e.params.loop&&0===e.params.initialSlide&&e.lazy.load()},scroll(){const e=this;e.params.freeMode&&!e.params.freeModeSticky&&e.lazy.load()},resize(){const e=this;e.params.lazy.enabled&&e.lazy.load()},scrollbarDragMove(){const e=this;e.params.lazy.enabled&&e.lazy.load()},transitionStart(){const e=this;e.params.lazy.enabled&&(e.params.lazy.loadOnTransitionStart||!e.params.lazy.loadOnTransitionStart&&!e.lazy.initialImageLoaded)&&e.lazy.load()},transitionEnd(){const e=this;e.params.lazy.enabled&&!e.params.lazy.loadOnTransitionStart&&e.lazy.load()}}},{name:"controller",params:{controller:{control:void 0,inverse:!1,by:"slide"}},create(){d.extend(this,{controller:{control:this.params.controller.control,getInterpolateFunction:U.getInterpolateFunction.bind(this),setTranslate:U.setTranslate.bind(this),setTransition:U.setTransition.bind(this)}})},on:{update(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},resize(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},observerUpdate(){const e=this;e.controller.control&&e.controller.spline&&(e.controller.spline=void 0,delete e.controller.spline)},setTranslate(e,t){this.controller.control&&this.controller.setTranslate(e,t)},setTransition(e,t){this.controller.control&&this.controller.setTransition(e,t)}}},{name:"a11y",params:{a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}"}},create(){const e=this;d.extend(e,{a11y:{liveRegion:o(`<span class="${e.params.a11y.notificationClass}" aria-live="assertive" aria-atomic="true"></span>`)}}),Object.keys(W).forEach(t=>{e.a11y[t]=W[t].bind(e)})},on:{init(){this.params.a11y.enabled&&(this.a11y.init(),this.a11y.updateNavigation())},toEdge(){this.params.a11y.enabled&&this.a11y.updateNavigation()},fromEdge(){this.params.a11y.enabled&&this.a11y.updateNavigation()},paginationUpdate(){this.params.a11y.enabled&&this.a11y.updatePagination()},destroy(){this.params.a11y.enabled&&this.a11y.destroy()}}},{name:"history",params:{history:{enabled:!1,replaceState:!1,key:"slides"}},create(){d.extend(this,{history:{init:G.init.bind(this),setHistory:G.setHistory.bind(this),setHistoryPopState:G.setHistoryPopState.bind(this),scrollToSlide:G.scrollToSlide.bind(this),destroy:G.destroy.bind(this)}})},on:{init(){const e=this;e.params.history.enabled&&e.history.init()},destroy(){const e=this;e.params.history.enabled&&e.history.destroy()},transitionEnd(){const e=this;e.history.initialized&&e.history.setHistory(e.params.history.key,e.activeIndex)}}},{name:"hash-navigation",params:{hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}},create(){d.extend(this,{hashNavigation:{initialized:!1,init:X.init.bind(this),destroy:X.destroy.bind(this),setHash:X.setHash.bind(this),onHashCange:X.onHashCange.bind(this)}})},on:{init(){const e=this;e.params.hashNavigation.enabled&&e.hashNavigation.init()},destroy(){const e=this;e.params.hashNavigation.enabled&&e.hashNavigation.destroy()},transitionEnd(){const e=this;e.hashNavigation.initialized&&e.hashNavigation.setHash()}}},{name:"autoplay",params:{autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1}},create(){const e=this;d.extend(e,{autoplay:{running:!1,paused:!1,run:Y.run.bind(e),start:Y.start.bind(e),stop:Y.stop.bind(e),pause:Y.pause.bind(e),onTransitionEnd(t){e&&!e.destroyed&&e.$wrapperEl&&t.target===this&&(e.$wrapperEl[0].removeEventListener("transitionend",e.autoplay.onTransitionEnd),e.$wrapperEl[0].removeEventListener("webkitTransitionEnd",e.autoplay.onTransitionEnd),e.autoplay.paused=!1,e.autoplay.running?e.autoplay.run():e.autoplay.stop())}}})},on:{init(){const e=this;e.params.autoplay.enabled&&e.autoplay.start()},beforeTransitionStart(e,t){const n=this;n.autoplay.running&&(t||!n.params.autoplay.disableOnInteraction?n.autoplay.pause(e):n.autoplay.stop())},sliderFirstMove(){const e=this;e.autoplay.running&&(e.params.autoplay.disableOnInteraction?e.autoplay.stop():e.autoplay.pause())},destroy(){const e=this;e.autoplay.running&&e.autoplay.stop()}}},{name:"effect-fade",params:{fadeEffect:{crossFade:!1}},create(){d.extend(this,{fadeEffect:{setTranslate:K.setTranslate.bind(this),setTransition:K.setTransition.bind(this)}})},on:{beforeInit(){if("fade"!==this.params.effect)return;this.classNames.push(`${this.params.containerModifierClass}fade`);const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};d.extend(this.params,e),d.extend(this.originalParams,e)},setTranslate(){"fade"===this.params.effect&&this.fadeEffect.setTranslate()},setTransition(e){"fade"===this.params.effect&&this.fadeEffect.setTransition(e)}}},{name:"effect-cube",params:{cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}},create(){d.extend(this,{cubeEffect:{setTranslate:Q.setTranslate.bind(this),setTransition:Q.setTransition.bind(this)}})},on:{beforeInit(){if("cube"!==this.params.effect)return;this.classNames.push(`${this.params.containerModifierClass}cube`),this.classNames.push(`${this.params.containerModifierClass}3d`);const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0};d.extend(this.params,e),d.extend(this.originalParams,e)},setTranslate(){"cube"===this.params.effect&&this.cubeEffect.setTranslate()},setTransition(e){"cube"===this.params.effect&&this.cubeEffect.setTransition(e)}}},{name:"effect-flip",params:{flipEffect:{slideShadows:!0,limitRotation:!0}},create(){d.extend(this,{flipEffect:{setTranslate:Z.setTranslate.bind(this),setTransition:Z.setTransition.bind(this)}})},on:{beforeInit(){if("flip"!==this.params.effect)return;this.classNames.push(`${this.params.containerModifierClass}flip`),this.classNames.push(`${this.params.containerModifierClass}3d`);const e={slidesPerView:1,slidesPerColumn:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!0};d.extend(this.params,e),d.extend(this.originalParams,e)},setTranslate(){"flip"===this.params.effect&&this.flipEffect.setTranslate()},setTransition(e){"flip"===this.params.effect&&this.flipEffect.setTransition(e)}}},{name:"effect-coverflow",params:{coverflowEffect:{rotate:50,stretch:0,depth:100,modifier:1,slideShadows:!0}},create(){d.extend(this,{coverflowEffect:{setTranslate:J.setTranslate.bind(this),setTransition:J.setTransition.bind(this)}})},on:{beforeInit(){"coverflow"===this.params.effect&&(this.classNames.push(`${this.params.containerModifierClass}coverflow`),this.classNames.push(`${this.params.containerModifierClass}3d`),this.params.watchSlidesProgress=!0,this.originalParams.watchSlidesProgress=!0)},setTranslate(){"coverflow"===this.params.effect&&this.coverflowEffect.setTranslate()},setTransition(e){"coverflow"===this.params.effect&&this.coverflowEffect.setTransition(e)}}}];void 0===P.use&&(P.use=P.Class.use,P.installModule=P.Class.installModule),P.use(ee);t.default=P}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,